
MEWA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b20  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08004dc0  08004dc0  00014dc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080051b4  080051b4  000151b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080051b8  080051b8  000151b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000000  080051bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000088  200001e0  0800539c  000201e0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000268  0800539c  00020268  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001aaea  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00002d9b  00000000  00000000  0003acf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a68  00000000  00000000  0003da98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000a90  00000000  00000000  0003e500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035f00  00000000  00000000  0003ef90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00010ff0  00000000  00000000  00074e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014fe0e  00000000  00000000  00085e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d5c8e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000028b0  00000000  00000000  001d5ce4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00008341  00000000  00000000  001d8594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	200001e0 	.word	0x200001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08004da8 	.word	0x08004da8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	200001e4 	.word	0x200001e4
 80002dc:	08004da8 	.word	0x08004da8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <MX_GPIO_Init>:
/** Configure pins
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
*/
void MX_GPIO_Init(void)
{
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	2400      	movs	r4, #0
 8000396:	940c      	str	r4, [sp, #48]	; 0x30
 8000398:	940d      	str	r4, [sp, #52]	; 0x34

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800039a:	4b51      	ldr	r3, [pc, #324]	; (80004e0 <MX_GPIO_Init+0x150>)
 800039c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003a0:	f042 0210 	orr.w	r2, r2, #16
 80003a4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003ac:	f002 0210 	and.w	r2, r2, #16
 80003b0:	9201      	str	r2, [sp, #4]
 80003b2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003b8:	f042 0204 	orr.w	r2, r2, #4
 80003bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003c4:	f002 0204 	and.w	r2, r2, #4
 80003c8:	9202      	str	r2, [sp, #8]
 80003ca:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003d0:	f042 0220 	orr.w	r2, r2, #32
 80003d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003dc:	f002 0220 	and.w	r2, r2, #32
 80003e0:	9203      	str	r2, [sp, #12]
 80003e2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80003e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80003ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80003f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80003f4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80003f8:	9204      	str	r2, [sp, #16]
 80003fa:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000400:	f042 0201 	orr.w	r2, r2, #1
 8000404:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000408:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800040c:	f002 0201 	and.w	r2, r2, #1
 8000410:	9205      	str	r2, [sp, #20]
 8000412:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000414:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000418:	f042 0202 	orr.w	r2, r2, #2
 800041c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000420:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000424:	f002 0202 	and.w	r2, r2, #2
 8000428:	9206      	str	r2, [sp, #24]
 800042a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800042c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000434:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000438:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800043c:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000440:	9207      	str	r2, [sp, #28]
 8000442:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000444:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000448:	f042 0208 	orr.w	r2, r2, #8
 800044c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8000450:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000454:	f003 0308 	and.w	r3, r3, #8
 8000458:	9308      	str	r3, [sp, #32]
 800045a:	9b08      	ldr	r3, [sp, #32]

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE7 PE8 PE9
                           PE10 PE11 PE12 PE13
                           PE14 PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 800045c:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8000460:	9609      	str	r6, [sp, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000462:	2503      	movs	r5, #3
 8000464:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000466:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000468:	a909      	add	r1, sp, #36	; 0x24
 800046a:	481e      	ldr	r0, [pc, #120]	; (80004e4 <MX_GPIO_Init+0x154>)
 800046c:	f000 fafc 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC4
                           PC5 PC6 PC7 PC8
                           PC9 PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000470:	9609      	str	r6, [sp, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000472:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000474:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000476:	a909      	add	r1, sp, #36	; 0x24
 8000478:	481b      	ldr	r0, [pc, #108]	; (80004e8 <MX_GPIO_Init+0x158>)
 800047a:	f000 faf5 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800047e:	9609      	str	r6, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000480:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000482:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000484:	a909      	add	r1, sp, #36	; 0x24
 8000486:	4819      	ldr	r0, [pc, #100]	; (80004ec <MX_GPIO_Init+0x15c>)
 8000488:	f000 faee 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800048c:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800048e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000490:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000492:	a909      	add	r1, sp, #36	; 0x24
 8000494:	4816      	ldr	r0, [pc, #88]	; (80004f0 <MX_GPIO_Init+0x160>)
 8000496:	f000 fae7 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800049a:	f649 73ff 	movw	r3, #40959	; 0x9fff
 800049e:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004a0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	a909      	add	r1, sp, #36	; 0x24
 80004a6:	4813      	ldr	r0, [pc, #76]	; (80004f4 <MX_GPIO_Init+0x164>)
 80004a8:	f000 fade 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80004ac:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80004b0:	9309      	str	r3, [sp, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004b2:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b4:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004b6:	a909      	add	r1, sp, #36	; 0x24
 80004b8:	480f      	ldr	r0, [pc, #60]	; (80004f8 <MX_GPIO_Init+0x168>)
 80004ba:	f000 fad5 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG9 PG10 PG11
                           PG12 PG13 PG14 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80004be:	9609      	str	r6, [sp, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004c0:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c2:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80004c4:	a909      	add	r1, sp, #36	; 0x24
 80004c6:	480d      	ldr	r0, [pc, #52]	; (80004fc <MX_GPIO_Init+0x16c>)
 80004c8:	f000 face 	bl	8000a68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80004cc:	9609      	str	r6, [sp, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004ce:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d0:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80004d2:	a909      	add	r1, sp, #36	; 0x24
 80004d4:	480a      	ldr	r0, [pc, #40]	; (8000500 <MX_GPIO_Init+0x170>)
 80004d6:	f000 fac7 	bl	8000a68 <HAL_GPIO_Init>

}
 80004da:	b00e      	add	sp, #56	; 0x38
 80004dc:	bd70      	pop	{r4, r5, r6, pc}
 80004de:	bf00      	nop
 80004e0:	58024400 	.word	0x58024400
 80004e4:	58021000 	.word	0x58021000
 80004e8:	58020800 	.word	0x58020800
 80004ec:	58021400 	.word	0x58021400
 80004f0:	58021c00 	.word	0x58021c00
 80004f4:	58020000 	.word	0x58020000
 80004f8:	58020400 	.word	0x58020400
 80004fc:	58021800 	.word	0x58021800
 8000500:	58020c00 	.word	0x58020c00

08000504 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000504:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000506:	4815      	ldr	r0, [pc, #84]	; (800055c <MX_I2C1_Init+0x58>)
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <MX_I2C1_Init+0x5c>)
 800050a:	6003      	str	r3, [r0, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800050c:	f1a3 533e 	sub.w	r3, r3, #796917760	; 0x2f800000
 8000510:	f5a3 237d 	sub.w	r3, r3, #1036288	; 0xfd000
 8000514:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8000518:	6043      	str	r3, [r0, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800051a:	2300      	movs	r3, #0
 800051c:	6083      	str	r3, [r0, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800051e:	2201      	movs	r2, #1
 8000520:	60c2      	str	r2, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000522:	6103      	str	r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000524:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000526:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000528:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800052a:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800052c:	f000 fb8e 	bl	8000c4c <HAL_I2C_Init>
 8000530:	b950      	cbnz	r0, 8000548 <MX_I2C1_Init+0x44>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000532:	2100      	movs	r1, #0
 8000534:	4809      	ldr	r0, [pc, #36]	; (800055c <MX_I2C1_Init+0x58>)
 8000536:	f000 fbe7 	bl	8000d08 <HAL_I2CEx_ConfigAnalogFilter>
 800053a:	b940      	cbnz	r0, 800054e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800053c:	2100      	movs	r1, #0
 800053e:	4807      	ldr	r0, [pc, #28]	; (800055c <MX_I2C1_Init+0x58>)
 8000540:	f000 fc10 	bl	8000d64 <HAL_I2CEx_ConfigDigitalFilter>
 8000544:	b930      	cbnz	r0, 8000554 <MX_I2C1_Init+0x50>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000546:	bd08      	pop	{r3, pc}
    Error_Handler();
 8000548:	f000 f858 	bl	80005fc <Error_Handler>
 800054c:	e7f1      	b.n	8000532 <MX_I2C1_Init+0x2e>
    Error_Handler();
 800054e:	f000 f855 	bl	80005fc <Error_Handler>
 8000552:	e7f3      	b.n	800053c <MX_I2C1_Init+0x38>
    Error_Handler();
 8000554:	f000 f852 	bl	80005fc <Error_Handler>
}
 8000558:	e7f5      	b.n	8000546 <MX_I2C1_Init+0x42>
 800055a:	bf00      	nop
 800055c:	20000208 	.word	0x20000208
 8000560:	40005400 	.word	0x40005400

08000564 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000564:	b510      	push	{r4, lr}
 8000566:	b0b6      	sub	sp, #216	; 0xd8
 8000568:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056a:	2100      	movs	r1, #0
 800056c:	9131      	str	r1, [sp, #196]	; 0xc4
 800056e:	9132      	str	r1, [sp, #200]	; 0xc8
 8000570:	9133      	str	r1, [sp, #204]	; 0xcc
 8000572:	9134      	str	r1, [sp, #208]	; 0xd0
 8000574:	9135      	str	r1, [sp, #212]	; 0xd4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000576:	22bc      	movs	r2, #188	; 0xbc
 8000578:	a802      	add	r0, sp, #8
 800057a:	f001 ffcb 	bl	8002514 <memset>
  if(i2cHandle->Instance==I2C1)
 800057e:	6822      	ldr	r2, [r4, #0]
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <HAL_I2C_MspInit+0x8c>)
 8000582:	429a      	cmp	r2, r3
 8000584:	d001      	beq.n	800058a <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000586:	b036      	add	sp, #216	; 0xd8
 8000588:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800058a:	2308      	movs	r3, #8
 800058c:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800058e:	2300      	movs	r3, #0
 8000590:	9322      	str	r3, [sp, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000592:	a802      	add	r0, sp, #8
 8000594:	f001 fab2 	bl	8001afc <HAL_RCCEx_PeriphCLKConfig>
 8000598:	bb30      	cbnz	r0, 80005e8 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800059a:	4c16      	ldr	r4, [pc, #88]	; (80005f4 <HAL_I2C_MspInit+0x90>)
 800059c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80005a0:	f043 0302 	orr.w	r3, r3, #2
 80005a4:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80005a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80005ac:	f003 0302 	and.w	r3, r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80005b4:	23c0      	movs	r3, #192	; 0xc0
 80005b6:	9331      	str	r3, [sp, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005b8:	2312      	movs	r3, #18
 80005ba:	9332      	str	r3, [sp, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005bc:	2300      	movs	r3, #0
 80005be:	9333      	str	r3, [sp, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c0:	9334      	str	r3, [sp, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005c2:	2304      	movs	r3, #4
 80005c4:	9335      	str	r3, [sp, #212]	; 0xd4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c6:	a931      	add	r1, sp, #196	; 0xc4
 80005c8:	480b      	ldr	r0, [pc, #44]	; (80005f8 <HAL_I2C_MspInit+0x94>)
 80005ca:	f000 fa4d 	bl	8000a68 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005ce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80005d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005d6:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 80005da:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 80005de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005e2:	9301      	str	r3, [sp, #4]
 80005e4:	9b01      	ldr	r3, [sp, #4]
}
 80005e6:	e7ce      	b.n	8000586 <HAL_I2C_MspInit+0x22>
      Error_Handler();
 80005e8:	f000 f808 	bl	80005fc <Error_Handler>
 80005ec:	e7d5      	b.n	800059a <HAL_I2C_MspInit+0x36>
 80005ee:	bf00      	nop
 80005f0:	40005400 	.word	0x40005400
 80005f4:	58024400 	.word	0x58024400
 80005f8:	58020400 	.word	0x58020400

080005fc <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005fc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005fe:	e7fe      	b.n	80005fe <Error_Handler+0x2>

08000600 <SystemClock_Config>:
{
 8000600:	b500      	push	{lr}
 8000602:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000604:	224c      	movs	r2, #76	; 0x4c
 8000606:	2100      	movs	r1, #0
 8000608:	a809      	add	r0, sp, #36	; 0x24
 800060a:	f001 ff83 	bl	8002514 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060e:	2220      	movs	r2, #32
 8000610:	2100      	movs	r1, #0
 8000612:	a801      	add	r0, sp, #4
 8000614:	f001 ff7e 	bl	8002514 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000618:	2002      	movs	r0, #2
 800061a:	f000 fbcf 	bl	8000dbc <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800061e:	2300      	movs	r3, #0
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	4b1e      	ldr	r3, [pc, #120]	; (800069c <SystemClock_Config+0x9c>)
 8000624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000626:	f022 0201 	bic.w	r2, r2, #1
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
 800062c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	9300      	str	r3, [sp, #0]
 8000634:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <SystemClock_Config+0xa0>)
 8000636:	6993      	ldr	r3, [r2, #24]
 8000638:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800063c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000640:	6193      	str	r3, [r2, #24]
 8000642:	6993      	ldr	r3, [r2, #24]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	9b00      	ldr	r3, [sp, #0]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <SystemClock_Config+0xa0>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000654:	d0fa      	beq.n	800064c <SystemClock_Config+0x4c>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000656:	2302      	movs	r3, #2
 8000658:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800065a:	2301      	movs	r3, #1
 800065c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800065e:	2340      	movs	r3, #64	; 0x40
 8000660:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000662:	2300      	movs	r3, #0
 8000664:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	a809      	add	r0, sp, #36	; 0x24
 8000668:	f000 fbd2 	bl	8000e10 <HAL_RCC_OscConfig>
 800066c:	b988      	cbnz	r0, 8000692 <SystemClock_Config+0x92>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066e:	233f      	movs	r3, #63	; 0x3f
 8000670:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000672:	2300      	movs	r3, #0
 8000674:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000676:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000678:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800067a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800067c:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800067e:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000680:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000682:	2101      	movs	r1, #1
 8000684:	a801      	add	r0, sp, #4
 8000686:	f000 ffe3 	bl	8001650 <HAL_RCC_ClockConfig>
 800068a:	b920      	cbnz	r0, 8000696 <SystemClock_Config+0x96>
}
 800068c:	b01d      	add	sp, #116	; 0x74
 800068e:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000692:	f7ff ffb3 	bl	80005fc <Error_Handler>
    Error_Handler();
 8000696:	f7ff ffb1 	bl	80005fc <Error_Handler>
 800069a:	bf00      	nop
 800069c:	58000400 	.word	0x58000400
 80006a0:	58024800 	.word	0x58024800

080006a4 <main>:
{
 80006a4:	b508      	push	{r3, lr}
  HAL_Init();
 80006a6:	f000 f93f 	bl	8000928 <HAL_Init>
  SystemClock_Config();
 80006aa:	f7ff ffa9 	bl	8000600 <SystemClock_Config>
  MX_GPIO_Init();
 80006ae:	f7ff fe6f 	bl	8000390 <MX_GPIO_Init>
  MX_I2C1_Init();
 80006b2:	f7ff ff27 	bl	8000504 <MX_I2C1_Init>
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <main+0x12>

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	4b07      	ldr	r3, [pc, #28]	; (80006d8 <HAL_MspInit+0x20>)
 80006bc:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80006c0:	f042 0202 	orr.w	r2, r2, #2
 80006c4:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 80006c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006cc:	f003 0302 	and.w	r3, r3, #2
 80006d0:	9301      	str	r3, [sp, #4]
 80006d2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d4:	b002      	add	sp, #8
 80006d6:	4770      	bx	lr
 80006d8:	58024400 	.word	0x58024400

080006dc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <NMI_Handler>

080006de <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006de:	e7fe      	b.n	80006de <HardFault_Handler>

080006e0 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <MemManage_Handler>

080006e2 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler>

080006e4 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <UsageFault_Handler>

080006e6 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006e6:	4770      	bx	lr

080006e8 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006e8:	4770      	bx	lr

080006ea <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ea:	4770      	bx	lr

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006ee:	f000 f949 	bl	8000984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f2:	bd08      	pop	{r3, pc}

080006f4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80006f4:	2001      	movs	r0, #1
 80006f6:	4770      	bx	lr

080006f8 <_kill>:

int _kill(int pid, int sig)
{
 80006f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80006fa:	f001 fee1 	bl	80024c0 <__errno>
 80006fe:	2316      	movs	r3, #22
 8000700:	6003      	str	r3, [r0, #0]
	return -1;
}
 8000702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000706:	bd08      	pop	{r3, pc}

08000708 <_exit>:

void _exit (int status)
{
 8000708:	b508      	push	{r3, lr}
	_kill(status, -1);
 800070a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800070e:	f7ff fff3 	bl	80006f8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000712:	e7fe      	b.n	8000712 <_exit+0xa>

08000714 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	460c      	mov	r4, r1
 8000718:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800071a:	2500      	movs	r5, #0
 800071c:	42b5      	cmp	r5, r6
 800071e:	da07      	bge.n	8000730 <_read+0x1c>
	{
		*ptr++ = __io_getchar();
 8000720:	f3af 8000 	nop.w
 8000724:	4621      	mov	r1, r4
 8000726:	f801 0b01 	strb.w	r0, [r1], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072a:	3501      	adds	r5, #1
		*ptr++ = __io_getchar();
 800072c:	460c      	mov	r4, r1
 800072e:	e7f5      	b.n	800071c <_read+0x8>
	}

return len;
}
 8000730:	4630      	mov	r0, r6
 8000732:	bd70      	pop	{r4, r5, r6, pc}

08000734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000734:	b570      	push	{r4, r5, r6, lr}
 8000736:	460c      	mov	r4, r1
 8000738:	4616      	mov	r6, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073a:	2500      	movs	r5, #0
 800073c:	42b5      	cmp	r5, r6
 800073e:	da05      	bge.n	800074c <_write+0x18>
	{
		__io_putchar(*ptr++);
 8000740:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000744:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000748:	3501      	adds	r5, #1
 800074a:	e7f7      	b.n	800073c <_write+0x8>
	}
	return len;
}
 800074c:	4630      	mov	r0, r6
 800074e:	bd70      	pop	{r4, r5, r6, pc}

08000750 <_close>:

int _close(int file)
{
	return -1;
}
 8000750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000754:	4770      	bx	lr

08000756 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8000756:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800075c:	2000      	movs	r0, #0
 800075e:	4770      	bx	lr

08000760 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8000760:	2001      	movs	r0, #1
 8000762:	4770      	bx	lr

08000764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8000764:	2000      	movs	r0, #0
 8000766:	4770      	bx	lr

08000768 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000768:	b510      	push	{r4, lr}
 800076a:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800076c:	4a0c      	ldr	r2, [pc, #48]	; (80007a0 <_sbrk+0x38>)
 800076e:	490d      	ldr	r1, [pc, #52]	; (80007a4 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000770:	480d      	ldr	r0, [pc, #52]	; (80007a8 <_sbrk+0x40>)
 8000772:	6800      	ldr	r0, [r0, #0]
 8000774:	b140      	cbz	r0, 8000788 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000776:	480c      	ldr	r0, [pc, #48]	; (80007a8 <_sbrk+0x40>)
 8000778:	6800      	ldr	r0, [r0, #0]
 800077a:	4403      	add	r3, r0
 800077c:	1a52      	subs	r2, r2, r1
 800077e:	4293      	cmp	r3, r2
 8000780:	d806      	bhi.n	8000790 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000782:	4a09      	ldr	r2, [pc, #36]	; (80007a8 <_sbrk+0x40>)
 8000784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8000786:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000788:	4807      	ldr	r0, [pc, #28]	; (80007a8 <_sbrk+0x40>)
 800078a:	4c08      	ldr	r4, [pc, #32]	; (80007ac <_sbrk+0x44>)
 800078c:	6004      	str	r4, [r0, #0]
 800078e:	e7f2      	b.n	8000776 <_sbrk+0xe>
    errno = ENOMEM;
 8000790:	f001 fe96 	bl	80024c0 <__errno>
 8000794:	230c      	movs	r3, #12
 8000796:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800079c:	e7f3      	b.n	8000786 <_sbrk+0x1e>
 800079e:	bf00      	nop
 80007a0:	20020000 	.word	0x20020000
 80007a4:	00000400 	.word	0x00000400
 80007a8:	200001fc 	.word	0x200001fc
 80007ac:	20000268 	.word	0x20000268

080007b0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007b0:	4a29      	ldr	r2, [pc, #164]	; (8000858 <SystemInit+0xa8>)
 80007b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80007b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ba:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007be:	4b27      	ldr	r3, [pc, #156]	; (800085c <SystemInit+0xac>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	2b06      	cmp	r3, #6
 80007c8:	d806      	bhi.n	80007d8 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <SystemInit+0xac>)
 80007cc:	6813      	ldr	r3, [r2, #0]
 80007ce:	f023 030f 	bic.w	r3, r3, #15
 80007d2:	f043 0307 	orr.w	r3, r3, #7
 80007d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007d8:	4b21      	ldr	r3, [pc, #132]	; (8000860 <SystemInit+0xb0>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	f042 0201 	orr.w	r2, r2, #1
 80007e0:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80007e6:	6819      	ldr	r1, [r3, #0]
 80007e8:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <SystemInit+0xb4>)
 80007ea:	400a      	ands	r2, r1
 80007ec:	601a      	str	r2, [r3, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <SystemInit+0xac>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f013 0f08 	tst.w	r3, #8
 80007f6:	d006      	beq.n	8000806 <SystemInit+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007f8:	4a18      	ldr	r2, [pc, #96]	; (800085c <SystemInit+0xac>)
 80007fa:	6813      	ldr	r3, [r2, #0]
 80007fc:	f023 030f 	bic.w	r3, r3, #15
 8000800:	f043 0307 	orr.w	r3, r3, #7
 8000804:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <SystemInit+0xb0>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800080c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800080e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000810:	4915      	ldr	r1, [pc, #84]	; (8000868 <SystemInit+0xb8>)
 8000812:	6299      	str	r1, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000814:	4915      	ldr	r1, [pc, #84]	; (800086c <SystemInit+0xbc>)
 8000816:	62d9      	str	r1, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000818:	4915      	ldr	r1, [pc, #84]	; (8000870 <SystemInit+0xc0>)
 800081a:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800081c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800081e:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000820:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000822:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000824:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000826:	6819      	ldr	r1, [r3, #0]
 8000828:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800082c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800082e:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000830:	4b10      	ldr	r3, [pc, #64]	; (8000874 <SystemInit+0xc4>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <SystemInit+0xc8>)
 8000836:	4013      	ands	r3, r2
 8000838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800083c:	d202      	bcs.n	8000844 <SystemInit+0x94>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <SystemInit+0xcc>)
 8000840:	2201      	movs	r2, #1
 8000842:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000844:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <SystemInit+0xd0>)
 8000846:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800084a:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800084c:	4b02      	ldr	r3, [pc, #8]	; (8000858 <SystemInit+0xa8>)
 800084e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000852:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	e000ed00 	.word	0xe000ed00
 800085c:	52002000 	.word	0x52002000
 8000860:	58024400 	.word	0x58024400
 8000864:	eaf6ed7f 	.word	0xeaf6ed7f
 8000868:	02020200 	.word	0x02020200
 800086c:	01ff0000 	.word	0x01ff0000
 8000870:	01010280 	.word	0x01010280
 8000874:	5c001000 	.word	0x5c001000
 8000878:	ffff0000 	.word	0xffff0000
 800087c:	51008108 	.word	0x51008108
 8000880:	52004000 	.word	0x52004000

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000884:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008bc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000888:	f7ff ff92 	bl	80007b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800088c:	480c      	ldr	r0, [pc, #48]	; (80008c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800088e:	490d      	ldr	r1, [pc, #52]	; (80008c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000890:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a4:	4c0a      	ldr	r4, [pc, #40]	; (80008d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b2:	f001 fe0b 	bl	80024cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008b6:	f7ff fef5 	bl	80006a4 <main>
  bx  lr
 80008ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80008c8:	080051bc 	.word	0x080051bc
  ldr r2, =_sbss
 80008cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80008d0:	20000268 	.word	0x20000268

080008d4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d4:	e7fe      	b.n	80008d4 <ADC3_IRQHandler>
	...

080008d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_InitTick+0x44>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b90b      	cbnz	r3, 80008e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80008de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80008e0:	4770      	bx	lr
{
 80008e2:	b510      	push	{r4, lr}
 80008e4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80008e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80008ee:	4a0c      	ldr	r2, [pc, #48]	; (8000920 <HAL_InitTick+0x48>)
 80008f0:	6810      	ldr	r0, [r2, #0]
 80008f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80008f6:	f000 f8a1 	bl	8000a3c <HAL_SYSTICK_Config>
 80008fa:	b968      	cbnz	r0, 8000918 <HAL_InitTick+0x40>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	2c0f      	cmp	r4, #15
 80008fe:	d901      	bls.n	8000904 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000900:	2001      	movs	r0, #1
 8000902:	e00a      	b.n	800091a <HAL_InitTick+0x42>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000904:	2200      	movs	r2, #0
 8000906:	4621      	mov	r1, r4
 8000908:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800090c:	f000 f864 	bl	80009d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000910:	4b04      	ldr	r3, [pc, #16]	; (8000924 <HAL_InitTick+0x4c>)
 8000912:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000914:	2000      	movs	r0, #0
 8000916:	e000      	b.n	800091a <HAL_InitTick+0x42>
      return HAL_ERROR;
 8000918:	2001      	movs	r0, #1
}
 800091a:	bd10      	pop	{r4, pc}
 800091c:	20000008 	.word	0x20000008
 8000920:	20000000 	.word	0x20000000
 8000924:	2000000c 	.word	0x2000000c

08000928 <HAL_Init>:
{
 8000928:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092a:	2003      	movs	r0, #3
 800092c:	f000 f842 	bl	80009b4 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000930:	f000 fd94 	bl	800145c <HAL_RCC_GetSysClockFreq>
 8000934:	490f      	ldr	r1, [pc, #60]	; (8000974 <HAL_Init+0x4c>)
 8000936:	698b      	ldr	r3, [r1, #24]
 8000938:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800093c:	4a0e      	ldr	r2, [pc, #56]	; (8000978 <HAL_Init+0x50>)
 800093e:	5cd3      	ldrb	r3, [r2, r3]
 8000940:	f003 031f 	and.w	r3, r3, #31
 8000944:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000946:	698b      	ldr	r3, [r1, #24]
 8000948:	f003 030f 	and.w	r3, r3, #15
 800094c:	5cd3      	ldrb	r3, [r2, r3]
 800094e:	f003 031f 	and.w	r3, r3, #31
 8000952:	fa20 f303 	lsr.w	r3, r0, r3
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_Init+0x54>)
 8000958:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_Init+0x58>)
 800095c:	6018      	str	r0, [r3, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800095e:	2000      	movs	r0, #0
 8000960:	f7ff ffba 	bl	80008d8 <HAL_InitTick>
 8000964:	b110      	cbz	r0, 800096c <HAL_Init+0x44>
    return HAL_ERROR;
 8000966:	2401      	movs	r4, #1
}
 8000968:	4620      	mov	r0, r4
 800096a:	bd10      	pop	{r4, pc}
 800096c:	4604      	mov	r4, r0
  HAL_MspInit();
 800096e:	f7ff fea3 	bl	80006b8 <HAL_MspInit>
  return HAL_OK;
 8000972:	e7f9      	b.n	8000968 <HAL_Init+0x40>
 8000974:	58024400 	.word	0x58024400
 8000978:	08004dc0 	.word	0x08004dc0
 800097c:	20000004 	.word	0x20000004
 8000980:	20000000 	.word	0x20000000

08000984 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_IncTick+0x10>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	4a03      	ldr	r2, [pc, #12]	; (8000998 <HAL_IncTick+0x14>)
 800098a:	6811      	ldr	r1, [r2, #0]
 800098c:	440b      	add	r3, r1
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	20000008 	.word	0x20000008
 8000998:	20000254 	.word	0x20000254

0800099c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800099c:	4b01      	ldr	r3, [pc, #4]	; (80009a4 <HAL_GetTick+0x8>)
 800099e:	6818      	ldr	r0, [r3, #0]
}
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	20000254 	.word	0x20000254

080009a8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80009a8:	4b01      	ldr	r3, [pc, #4]	; (80009b0 <HAL_GetREVID+0x8>)
 80009aa:	6818      	ldr	r0, [r3, #0]
}
 80009ac:	0c00      	lsrs	r0, r0, #16
 80009ae:	4770      	bx	lr
 80009b0:	5c001000 	.word	0x5c001000

080009b4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009b4:	4906      	ldr	r1, [pc, #24]	; (80009d0 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 80009b6:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009b8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80009bc:	041b      	lsls	r3, r3, #16
 80009be:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009c0:	0200      	lsls	r0, r0, #8
 80009c2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009c6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80009c8:	4a02      	ldr	r2, [pc, #8]	; (80009d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80009ca:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 80009cc:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80009ce:	4770      	bx	lr
 80009d0:	e000ed00 	.word	0xe000ed00
 80009d4:	05fa0000 	.word	0x05fa0000

080009d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009d8:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_NVIC_SetPriority+0x58>)
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009e2:	f1c3 0407 	rsb	r4, r3, #7
 80009e6:	2c04      	cmp	r4, #4
 80009e8:	bf28      	it	cs
 80009ea:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ec:	1d1d      	adds	r5, r3, #4
 80009ee:	2d06      	cmp	r5, #6
 80009f0:	d914      	bls.n	8000a1c <HAL_NVIC_SetPriority+0x44>
 80009f2:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009f4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80009f8:	fa05 f404 	lsl.w	r4, r5, r4
 80009fc:	ea21 0104 	bic.w	r1, r1, r4
 8000a00:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a02:	fa05 f303 	lsl.w	r3, r5, r3
 8000a06:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a0a:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000a0c:	2800      	cmp	r0, #0
 8000a0e:	db07      	blt.n	8000a20 <HAL_NVIC_SetPriority+0x48>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	0109      	lsls	r1, r1, #4
 8000a12:	b2c9      	uxtb	r1, r1
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_NVIC_SetPriority+0x5c>)
 8000a16:	5419      	strb	r1, [r3, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000a18:	bc30      	pop	{r4, r5}
 8000a1a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	e7e9      	b.n	80009f4 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a20:	f000 000f 	and.w	r0, r0, #15
 8000a24:	0109      	lsls	r1, r1, #4
 8000a26:	b2c9      	uxtb	r1, r1
 8000a28:	4b03      	ldr	r3, [pc, #12]	; (8000a38 <HAL_NVIC_SetPriority+0x60>)
 8000a2a:	5419      	strb	r1, [r3, r0]
 8000a2c:	e7f4      	b.n	8000a18 <HAL_NVIC_SetPriority+0x40>
 8000a2e:	bf00      	nop
 8000a30:	e000ed00 	.word	0xe000ed00
 8000a34:	e000e400 	.word	0xe000e400
 8000a38:	e000ed14 	.word	0xe000ed14

08000a3c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a3c:	3801      	subs	r0, #1
 8000a3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a42:	d20a      	bcs.n	8000a5a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <HAL_SYSTICK_Config+0x24>)
 8000a46:	6058      	str	r0, [r3, #4]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <HAL_SYSTICK_Config+0x28>)
 8000a4a:	21f0      	movs	r1, #240	; 0xf0
 8000a4c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a50:	2000      	movs	r0, #0
 8000a52:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a54:	2207      	movs	r2, #7
 8000a56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a58:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000a5a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000e010 	.word	0xe000e010
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6a:	b083      	sub	sp, #12
  uint32_t position = 0x00U;
 8000a6c:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000a6e:	e03a      	b.n	8000ae6 <HAL_GPIO_Init+0x7e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a70:	2409      	movs	r4, #9
 8000a72:	e000      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000a74:	2400      	movs	r4, #0
 8000a76:	40b4      	lsls	r4, r6
 8000a78:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a7a:	3502      	adds	r5, #2
 8000a7c:	4e6f      	ldr	r6, [pc, #444]	; (8000c3c <HAL_GPIO_Init+0x1d4>)
 8000a7e:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000a82:	4c6f      	ldr	r4, [pc, #444]	; (8000c40 <HAL_GPIO_Init+0x1d8>)
 8000a84:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000a86:	43d4      	mvns	r4, r2
 8000a88:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8c:	684f      	ldr	r7, [r1, #4]
 8000a8e:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8000a92:	d001      	beq.n	8000a98 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8000a94:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000a98:	4d69      	ldr	r5, [pc, #420]	; (8000c40 <HAL_GPIO_Init+0x1d8>)
 8000a9a:	602e      	str	r6, [r5, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8000a9c:	686e      	ldr	r6, [r5, #4]
        temp &= ~(iocurrent);
 8000a9e:	ea04 0506 	and.w	r5, r4, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aa2:	684f      	ldr	r7, [r1, #4]
 8000aa4:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000aa8:	d001      	beq.n	8000aae <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8000aaa:	ea42 0506 	orr.w	r5, r2, r6
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000aae:	4e64      	ldr	r6, [pc, #400]	; (8000c40 <HAL_GPIO_Init+0x1d8>)
 8000ab0:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ab2:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000ab6:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
 8000ab8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abc:	684f      	ldr	r7, [r1, #4]
 8000abe:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000ac2:	d001      	beq.n	8000ac8 <HAL_GPIO_Init+0x60>
        {
          temp |= iocurrent;
 8000ac4:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8000ac8:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8000acc:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8000ace:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000ad0:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ad2:	684e      	ldr	r6, [r1, #4]
 8000ad4:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000ad8:	d001      	beq.n	8000ade <HAL_GPIO_Init+0x76>
        {
          temp |= iocurrent;
 8000ada:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR1 = temp;
 8000ade:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ae2:	6054      	str	r4, [r2, #4]
      }
    }

    position++;
 8000ae4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ae6:	680a      	ldr	r2, [r1, #0]
 8000ae8:	fa32 f403 	lsrs.w	r4, r2, r3
 8000aec:	f000 80a3 	beq.w	8000c36 <HAL_GPIO_Init+0x1ce>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000af0:	2401      	movs	r4, #1
 8000af2:	409c      	lsls	r4, r3
    if (iocurrent != 0x00U)
 8000af4:	4022      	ands	r2, r4
 8000af6:	d0f5      	beq.n	8000ae4 <HAL_GPIO_Init+0x7c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000af8:	684d      	ldr	r5, [r1, #4]
 8000afa:	1e6e      	subs	r6, r5, #1
 8000afc:	2d11      	cmp	r5, #17
 8000afe:	bf18      	it	ne
 8000b00:	2e01      	cmpne	r6, #1
 8000b02:	d901      	bls.n	8000b08 <HAL_GPIO_Init+0xa0>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b04:	2d12      	cmp	r5, #18
 8000b06:	d112      	bne.n	8000b2e <HAL_GPIO_Init+0xc6>
        temp = GPIOx->OSPEEDR;
 8000b08:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000b0a:	005f      	lsls	r7, r3, #1
 8000b0c:	2503      	movs	r5, #3
 8000b0e:	40bd      	lsls	r5, r7
 8000b10:	ea26 0605 	bic.w	r6, r6, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b14:	68cd      	ldr	r5, [r1, #12]
 8000b16:	40bd      	lsls	r5, r7
 8000b18:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8000b1a:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000b1c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b1e:	ea26 0604 	bic.w	r6, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b22:	684d      	ldr	r5, [r1, #4]
 8000b24:	f3c5 1400 	ubfx	r4, r5, #4, #1
 8000b28:	409c      	lsls	r4, r3
 8000b2a:	4334      	orrs	r4, r6
        GPIOx->OTYPER = temp;
 8000b2c:	6044      	str	r4, [r0, #4]
      temp = GPIOx->PUPDR;
 8000b2e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b30:	005e      	lsls	r6, r3, #1
 8000b32:	2503      	movs	r5, #3
 8000b34:	40b5      	lsls	r5, r6
 8000b36:	43ec      	mvns	r4, r5
 8000b38:	ea27 0705 	bic.w	r7, r7, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b3c:	688d      	ldr	r5, [r1, #8]
 8000b3e:	40b5      	lsls	r5, r6
 8000b40:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000b42:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b44:	684d      	ldr	r5, [r1, #4]
 8000b46:	2d12      	cmp	r5, #18
 8000b48:	bf18      	it	ne
 8000b4a:	2d02      	cmpne	r5, #2
 8000b4c:	d113      	bne.n	8000b76 <HAL_GPIO_Init+0x10e>
        temp = GPIOx->AFR[position >> 3U];
 8000b4e:	08df      	lsrs	r7, r3, #3
 8000b50:	3708      	adds	r7, #8
 8000b52:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000b56:	f003 0507 	and.w	r5, r3, #7
 8000b5a:	ea4f 0c85 	mov.w	ip, r5, lsl #2
 8000b5e:	250f      	movs	r5, #15
 8000b60:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b64:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000b68:	690d      	ldr	r5, [r1, #16]
 8000b6a:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b6e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 8000b72:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
      temp = GPIOx->MODER;
 8000b76:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000b78:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b7a:	684c      	ldr	r4, [r1, #4]
 8000b7c:	f004 0403 	and.w	r4, r4, #3
 8000b80:	40b4      	lsls	r4, r6
 8000b82:	432c      	orrs	r4, r5
      GPIOx->MODER = temp;
 8000b84:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b86:	684c      	ldr	r4, [r1, #4]
 8000b88:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000b8c:	d0aa      	beq.n	8000ae4 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	4c2d      	ldr	r4, [pc, #180]	; (8000c44 <HAL_GPIO_Init+0x1dc>)
 8000b90:	f8d4 50f4 	ldr.w	r5, [r4, #244]	; 0xf4
 8000b94:	f045 0502 	orr.w	r5, r5, #2
 8000b98:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
 8000b9c:	f8d4 40f4 	ldr.w	r4, [r4, #244]	; 0xf4
 8000ba0:	f004 0402 	and.w	r4, r4, #2
 8000ba4:	9401      	str	r4, [sp, #4]
 8000ba6:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ba8:	089d      	lsrs	r5, r3, #2
 8000baa:	1cae      	adds	r6, r5, #2
 8000bac:	4c23      	ldr	r4, [pc, #140]	; (8000c3c <HAL_GPIO_Init+0x1d4>)
 8000bae:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000bb2:	f003 0403 	and.w	r4, r3, #3
 8000bb6:	00a6      	lsls	r6, r4, #2
 8000bb8:	240f      	movs	r4, #15
 8000bba:	40b4      	lsls	r4, r6
 8000bbc:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000bc0:	4c21      	ldr	r4, [pc, #132]	; (8000c48 <HAL_GPIO_Init+0x1e0>)
 8000bc2:	42a0      	cmp	r0, r4
 8000bc4:	f43f af56 	beq.w	8000a74 <HAL_GPIO_Init+0xc>
 8000bc8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bcc:	42a0      	cmp	r0, r4
 8000bce:	d022      	beq.n	8000c16 <HAL_GPIO_Init+0x1ae>
 8000bd0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bd4:	42a0      	cmp	r0, r4
 8000bd6:	d020      	beq.n	8000c1a <HAL_GPIO_Init+0x1b2>
 8000bd8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bdc:	42a0      	cmp	r0, r4
 8000bde:	d01e      	beq.n	8000c1e <HAL_GPIO_Init+0x1b6>
 8000be0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000be4:	42a0      	cmp	r0, r4
 8000be6:	d01c      	beq.n	8000c22 <HAL_GPIO_Init+0x1ba>
 8000be8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bec:	42a0      	cmp	r0, r4
 8000bee:	d01a      	beq.n	8000c26 <HAL_GPIO_Init+0x1be>
 8000bf0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bf4:	42a0      	cmp	r0, r4
 8000bf6:	d018      	beq.n	8000c2a <HAL_GPIO_Init+0x1c2>
 8000bf8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000bfc:	42a0      	cmp	r0, r4
 8000bfe:	d016      	beq.n	8000c2e <HAL_GPIO_Init+0x1c6>
 8000c00:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c04:	42a0      	cmp	r0, r4
 8000c06:	d014      	beq.n	8000c32 <HAL_GPIO_Init+0x1ca>
 8000c08:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000c0c:	42a0      	cmp	r0, r4
 8000c0e:	f43f af2f 	beq.w	8000a70 <HAL_GPIO_Init+0x8>
 8000c12:	240a      	movs	r4, #10
 8000c14:	e72f      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c16:	2401      	movs	r4, #1
 8000c18:	e72d      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c1a:	2402      	movs	r4, #2
 8000c1c:	e72b      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c1e:	2403      	movs	r4, #3
 8000c20:	e729      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c22:	2404      	movs	r4, #4
 8000c24:	e727      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c26:	2405      	movs	r4, #5
 8000c28:	e725      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c2a:	2406      	movs	r4, #6
 8000c2c:	e723      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c2e:	2407      	movs	r4, #7
 8000c30:	e721      	b.n	8000a76 <HAL_GPIO_Init+0xe>
 8000c32:	2408      	movs	r4, #8
 8000c34:	e71f      	b.n	8000a76 <HAL_GPIO_Init+0xe>
  }
}
 8000c36:	b003      	add	sp, #12
 8000c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	58000400 	.word	0x58000400
 8000c40:	58000080 	.word	0x58000080
 8000c44:	58024400 	.word	0x58024400
 8000c48:	58020000 	.word	0x58020000

08000c4c <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d057      	beq.n	8000d00 <HAL_I2C_Init+0xb4>
{
 8000c50:	b510      	push	{r4, lr}
 8000c52:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c54:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d041      	beq.n	8000ce0 <HAL_I2C_Init+0x94>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c5c:	2324      	movs	r3, #36	; 0x24
 8000c5e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000c62:	6822      	ldr	r2, [r4, #0]
 8000c64:	6813      	ldr	r3, [r2, #0]
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000c74:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	6893      	ldr	r3, [r2, #8]
 8000c7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c7e:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000c80:	68e3      	ldr	r3, [r4, #12]
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d031      	beq.n	8000cea <HAL_I2C_Init+0x9e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000c86:	68a3      	ldr	r3, [r4, #8]
 8000c88:	6822      	ldr	r2, [r4, #0]
 8000c8a:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8000c8e:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000c90:	68e3      	ldr	r3, [r4, #12]
 8000c92:	2b02      	cmp	r3, #2
 8000c94:	d02f      	beq.n	8000cf6 <HAL_I2C_Init+0xaa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c96:	6822      	ldr	r2, [r4, #0]
 8000c98:	6851      	ldr	r1, [r2, #4]
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <HAL_I2C_Init+0xb8>)
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000ca0:	6822      	ldr	r2, [r4, #0]
 8000ca2:	68d3      	ldr	r3, [r2, #12]
 8000ca4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ca8:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000caa:	6923      	ldr	r3, [r4, #16]
 8000cac:	6962      	ldr	r2, [r4, #20]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	69a1      	ldr	r1, [r4, #24]
 8000cb2:	6822      	ldr	r2, [r4, #0]
 8000cb4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000cb8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000cba:	69e3      	ldr	r3, [r4, #28]
 8000cbc:	6a21      	ldr	r1, [r4, #32]
 8000cbe:	6822      	ldr	r2, [r4, #0]
 8000cc0:	430b      	orrs	r3, r1
 8000cc2:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000cc4:	6822      	ldr	r2, [r4, #0]
 8000cc6:	6813      	ldr	r3, [r2, #0]
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cce:	2000      	movs	r0, #0
 8000cd0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000cd2:	2320      	movs	r3, #32
 8000cd4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cd8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cda:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8000cde:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8000ce0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8000ce4:	f7ff fc3e 	bl	8000564 <HAL_I2C_MspInit>
 8000ce8:	e7b8      	b.n	8000c5c <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000cea:	68a3      	ldr	r3, [r4, #8]
 8000cec:	6822      	ldr	r2, [r4, #0]
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	6093      	str	r3, [r2, #8]
 8000cf4:	e7cc      	b.n	8000c90 <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	e7ca      	b.n	8000c96 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8000d00:	2001      	movs	r0, #1
}
 8000d02:	4770      	bx	lr
 8000d04:	02008000 	.word	0x02008000

08000d08 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d08:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b20      	cmp	r3, #32
 8000d10:	d124      	bne.n	8000d5c <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d12:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d16:	2b01      	cmp	r3, #1
 8000d18:	d022      	beq.n	8000d60 <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d20:	2324      	movs	r3, #36	; 0x24
 8000d22:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d26:	6802      	ldr	r2, [r0, #0]
 8000d28:	6813      	ldr	r3, [r2, #0]
 8000d2a:	f023 0301 	bic.w	r3, r3, #1
 8000d2e:	6013      	str	r3, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000d30:	6802      	ldr	r2, [r0, #0]
 8000d32:	6813      	ldr	r3, [r2, #0]
 8000d34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d38:	6013      	str	r3, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000d3a:	6802      	ldr	r2, [r0, #0]
 8000d3c:	6813      	ldr	r3, [r2, #0]
 8000d3e:	4319      	orrs	r1, r3
 8000d40:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d42:	6802      	ldr	r2, [r0, #0]
 8000d44:	6813      	ldr	r3, [r2, #0]
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d4c:	2320      	movs	r3, #32
 8000d4e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d52:	2300      	movs	r3, #0
 8000d54:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000d58:	4618      	mov	r0, r3
 8000d5a:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8000d60:	2002      	movs	r0, #2
  }
}
 8000d62:	4770      	bx	lr

08000d64 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d64:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b20      	cmp	r3, #32
 8000d6c:	d122      	bne.n	8000db4 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d6e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d020      	beq.n	8000db8 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8000d76:	2301      	movs	r3, #1
 8000d78:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d7c:	2324      	movs	r3, #36	; 0x24
 8000d7e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d82:	6802      	ldr	r2, [r0, #0]
 8000d84:	6813      	ldr	r3, [r2, #0]
 8000d86:	f023 0301 	bic.w	r3, r3, #1
 8000d8a:	6013      	str	r3, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d8c:	6802      	ldr	r2, [r0, #0]
 8000d8e:	6813      	ldr	r3, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d90:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d94:	ea43 2101 	orr.w	r1, r3, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d98:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d9a:	6802      	ldr	r2, [r0, #0]
 8000d9c:	6813      	ldr	r3, [r2, #0]
 8000d9e:	f043 0301 	orr.w	r3, r3, #1
 8000da2:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000da4:	2320      	movs	r3, #32
 8000da6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000daa:	2300      	movs	r3, #0
 8000dac:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8000db0:	4618      	mov	r0, r3
 8000db2:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8000db4:	2002      	movs	r0, #2
 8000db6:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8000db8:	2002      	movs	r0, #2
  }
}
 8000dba:	4770      	bx	lr

08000dbc <HAL_PWREx_ConfigSupply>:
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <HAL_PWREx_ConfigSupply+0x50>)
 8000dbe:	68db      	ldr	r3, [r3, #12]
 8000dc0:	f013 0f04 	tst.w	r3, #4
 8000dc4:	d107      	bne.n	8000dd6 <HAL_PWREx_ConfigSupply+0x1a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000dc6:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <HAL_PWREx_ConfigSupply+0x50>)
 8000dc8:	68db      	ldr	r3, [r3, #12]
 8000dca:	f003 0307 	and.w	r3, r3, #7
 8000dce:	4283      	cmp	r3, r0
 8000dd0:	d01a      	beq.n	8000e08 <HAL_PWREx_ConfigSupply+0x4c>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	4770      	bx	lr
{
 8000dd6:	b510      	push	{r4, lr}
      return HAL_OK;
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000dd8:	4a0c      	ldr	r2, [pc, #48]	; (8000e0c <HAL_PWREx_ConfigSupply+0x50>)
 8000dda:	68d3      	ldr	r3, [r2, #12]
 8000ddc:	f023 0307 	bic.w	r3, r3, #7
 8000de0:	4318      	orrs	r0, r3
 8000de2:	60d0      	str	r0, [r2, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8000de4:	f7ff fdda 	bl	800099c <HAL_GetTick>
 8000de8:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <HAL_PWREx_ConfigSupply+0x50>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8000df2:	d107      	bne.n	8000e04 <HAL_PWREx_ConfigSupply+0x48>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8000df4:	f7ff fdd2 	bl	800099c <HAL_GetTick>
 8000df8:	1b00      	subs	r0, r0, r4
 8000dfa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000dfe:	d9f4      	bls.n	8000dea <HAL_PWREx_ConfigSupply+0x2e>
    {
      return HAL_ERROR;
 8000e00:	2001      	movs	r0, #1
 8000e02:	e000      	b.n	8000e06 <HAL_PWREx_ConfigSupply+0x4a>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8000e04:	2000      	movs	r0, #0
}
 8000e06:	bd10      	pop	{r4, pc}
      return HAL_OK;
 8000e08:	2000      	movs	r0, #0
}
 8000e0a:	4770      	bx	lr
 8000e0c:	58024800 	.word	0x58024800

08000e10 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e10:	2800      	cmp	r0, #0
 8000e12:	f000 8304 	beq.w	800141e <HAL_RCC_OscConfig+0x60e>
{
 8000e16:	b538      	push	{r3, r4, r5, lr}
 8000e18:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e1a:	6803      	ldr	r3, [r0, #0]
 8000e1c:	f013 0f01 	tst.w	r3, #1
 8000e20:	d025      	beq.n	8000e6e <HAL_RCC_OscConfig+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e22:	4aae      	ldr	r2, [pc, #696]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000e24:	6913      	ldr	r3, [r2, #16]
 8000e26:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e2a:	6a92      	ldr	r2, [r2, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e2c:	2b10      	cmp	r3, #16
 8000e2e:	d015      	beq.n	8000e5c <HAL_RCC_OscConfig+0x4c>
 8000e30:	2b18      	cmp	r3, #24
 8000e32:	d00f      	beq.n	8000e54 <HAL_RCC_OscConfig+0x44>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e34:	6863      	ldr	r3, [r4, #4]
 8000e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e3a:	d03f      	beq.n	8000ebc <HAL_RCC_OscConfig+0xac>
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d153      	bne.n	8000ee8 <HAL_RCC_OscConfig+0xd8>
 8000e40:	4ba6      	ldr	r3, [pc, #664]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e48:	601a      	str	r2, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	e038      	b.n	8000ec6 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8000e54:	f002 0203 	and.w	r2, r2, #3
 8000e58:	2a02      	cmp	r2, #2
 8000e5a:	d1eb      	bne.n	8000e34 <HAL_RCC_OscConfig+0x24>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e5c:	4b9f      	ldr	r3, [pc, #636]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000e64:	d003      	beq.n	8000e6e <HAL_RCC_OscConfig+0x5e>
 8000e66:	6863      	ldr	r3, [r4, #4]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	f000 82da 	beq.w	8001422 <HAL_RCC_OscConfig+0x612>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e6e:	6823      	ldr	r3, [r4, #0]
 8000e70:	f013 0f02 	tst.w	r3, #2
 8000e74:	f000 808b 	beq.w	8000f8e <HAL_RCC_OscConfig+0x17e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e78:	4a98      	ldr	r2, [pc, #608]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000e7a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000e7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000e7e:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 8000e82:	d05a      	beq.n	8000f3a <HAL_RCC_OscConfig+0x12a>
 8000e84:	2b18      	cmp	r3, #24
 8000e86:	d055      	beq.n	8000f34 <HAL_RCC_OscConfig+0x124>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000e88:	68e3      	ldr	r3, [r4, #12]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80c8 	beq.w	8001020 <HAL_RCC_OscConfig+0x210>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8000e90:	4992      	ldr	r1, [pc, #584]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000e92:	680a      	ldr	r2, [r1, #0]
 8000e94:	f022 0219 	bic.w	r2, r2, #25
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fd7e 	bl	800099c <HAL_GetTick>
 8000ea0:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ea2:	4b8e      	ldr	r3, [pc, #568]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f013 0f04 	tst.w	r3, #4
 8000eaa:	f040 8097 	bne.w	8000fdc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000eae:	f7ff fd75 	bl	800099c <HAL_GetTick>
 8000eb2:	1b40      	subs	r0, r0, r5
 8000eb4:	2802      	cmp	r0, #2
 8000eb6:	d9f4      	bls.n	8000ea2 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_TIMEOUT;
 8000eb8:	2003      	movs	r0, #3
 8000eba:	e2b9      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ebc:	4a87      	ldr	r2, [pc, #540]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000ebe:	6813      	ldr	r3, [r2, #0]
 8000ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000ec6:	6863      	ldr	r3, [r4, #4]
 8000ec8:	b32b      	cbz	r3, 8000f16 <HAL_RCC_OscConfig+0x106>
        tickstart = HAL_GetTick();
 8000eca:	f7ff fd67 	bl	800099c <HAL_GetTick>
 8000ece:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000ed0:	4b82      	ldr	r3, [pc, #520]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000ed8:	d1c9      	bne.n	8000e6e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eda:	f7ff fd5f 	bl	800099c <HAL_GetTick>
 8000ede:	1b40      	subs	r0, r0, r5
 8000ee0:	2864      	cmp	r0, #100	; 0x64
 8000ee2:	d9f5      	bls.n	8000ed0 <HAL_RCC_OscConfig+0xc0>
            return HAL_TIMEOUT;
 8000ee4:	2003      	movs	r0, #3
 8000ee6:	e2a3      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eec:	d009      	beq.n	8000f02 <HAL_RCC_OscConfig+0xf2>
 8000eee:	4b7b      	ldr	r3, [pc, #492]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	e7e1      	b.n	8000ec6 <HAL_RCC_OscConfig+0xb6>
 8000f02:	4b76      	ldr	r3, [pc, #472]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	e7d7      	b.n	8000ec6 <HAL_RCC_OscConfig+0xb6>
        tickstart = HAL_GetTick();
 8000f16:	f7ff fd41 	bl	800099c <HAL_GetTick>
 8000f1a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f1c:	4b6f      	ldr	r3, [pc, #444]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f24:	d0a3      	beq.n	8000e6e <HAL_RCC_OscConfig+0x5e>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f26:	f7ff fd39 	bl	800099c <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	2864      	cmp	r0, #100	; 0x64
 8000f2e:	d9f5      	bls.n	8000f1c <HAL_RCC_OscConfig+0x10c>
            return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
 8000f32:	e27d      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8000f34:	f012 0f03 	tst.w	r2, #3
 8000f38:	d1a6      	bne.n	8000e88 <HAL_RCC_OscConfig+0x78>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f3a:	4b68      	ldr	r3, [pc, #416]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f013 0f04 	tst.w	r3, #4
 8000f42:	d003      	beq.n	8000f4c <HAL_RCC_OscConfig+0x13c>
 8000f44:	68e3      	ldr	r3, [r4, #12]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 826d 	beq.w	8001426 <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f4c:	f7ff fd2c 	bl	80009a8 <HAL_GetREVID>
 8000f50:	f241 0303 	movw	r3, #4099	; 0x1003
 8000f54:	4298      	cmp	r0, r3
 8000f56:	d812      	bhi.n	8000f7e <HAL_RCC_OscConfig+0x16e>
 8000f58:	6922      	ldr	r2, [r4, #16]
 8000f5a:	2a40      	cmp	r2, #64	; 0x40
 8000f5c:	d007      	beq.n	8000f6e <HAL_RCC_OscConfig+0x15e>
 8000f5e:	495f      	ldr	r1, [pc, #380]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000f60:	684b      	ldr	r3, [r1, #4]
 8000f62:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f66:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000f6a:	604b      	str	r3, [r1, #4]
 8000f6c:	e00f      	b.n	8000f8e <HAL_RCC_OscConfig+0x17e>
 8000f6e:	4a5b      	ldr	r2, [pc, #364]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000f70:	6853      	ldr	r3, [r2, #4]
 8000f72:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7a:	6053      	str	r3, [r2, #4]
 8000f7c:	e007      	b.n	8000f8e <HAL_RCC_OscConfig+0x17e>
 8000f7e:	4a57      	ldr	r2, [pc, #348]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000f80:	6853      	ldr	r3, [r2, #4]
 8000f82:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8000f86:	6921      	ldr	r1, [r4, #16]
 8000f88:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8000f8c:	6053      	str	r3, [r2, #4]
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8000f8e:	6823      	ldr	r3, [r4, #0]
 8000f90:	f013 0f10 	tst.w	r3, #16
 8000f94:	f000 8086 	beq.w	80010a4 <HAL_RCC_OscConfig+0x294>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f98:	4a50      	ldr	r2, [pc, #320]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000f9a:	6913      	ldr	r3, [r2, #16]
 8000f9c:	f003 0338 	and.w	r3, r3, #56	; 0x38
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8000fa0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8000fa2:	2b08      	cmp	r3, #8
 8000fa4:	d054      	beq.n	8001050 <HAL_RCC_OscConfig+0x240>
 8000fa6:	2b18      	cmp	r3, #24
 8000fa8:	d04e      	beq.n	8001048 <HAL_RCC_OscConfig+0x238>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8000faa:	69e3      	ldr	r3, [r4, #28]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	f000 80b9 	beq.w	8001124 <HAL_RCC_OscConfig+0x314>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8000fb2:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000fb4:	6813      	ldr	r3, [r2, #0]
 8000fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fcee 	bl	800099c <HAL_GetTick>
 8000fc0:	4605      	mov	r5, r0

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8000fc2:	4b46      	ldr	r3, [pc, #280]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000fca:	f040 8089 	bne.w	80010e0 <HAL_RCC_OscConfig+0x2d0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8000fce:	f7ff fce5 	bl	800099c <HAL_GetTick>
 8000fd2:	1b40      	subs	r0, r0, r5
 8000fd4:	2802      	cmp	r0, #2
 8000fd6:	d9f4      	bls.n	8000fc2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000fd8:	2003      	movs	r0, #3
 8000fda:	e229      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	f7ff fce4 	bl	80009a8 <HAL_GetREVID>
 8000fe0:	f241 0303 	movw	r3, #4099	; 0x1003
 8000fe4:	4298      	cmp	r0, r3
 8000fe6:	d812      	bhi.n	800100e <HAL_RCC_OscConfig+0x1fe>
 8000fe8:	6922      	ldr	r2, [r4, #16]
 8000fea:	2a40      	cmp	r2, #64	; 0x40
 8000fec:	d007      	beq.n	8000ffe <HAL_RCC_OscConfig+0x1ee>
 8000fee:	493b      	ldr	r1, [pc, #236]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8000ff0:	684b      	ldr	r3, [r1, #4]
 8000ff2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8000ff6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8000ffa:	604b      	str	r3, [r1, #4]
 8000ffc:	e7c7      	b.n	8000f8e <HAL_RCC_OscConfig+0x17e>
 8000ffe:	4a37      	ldr	r2, [pc, #220]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001000:	6853      	ldr	r3, [r2, #4]
 8001002:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800100a:	6053      	str	r3, [r2, #4]
 800100c:	e7bf      	b.n	8000f8e <HAL_RCC_OscConfig+0x17e>
 800100e:	4a33      	ldr	r2, [pc, #204]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001010:	6853      	ldr	r3, [r2, #4]
 8001012:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8001016:	6921      	ldr	r1, [r4, #16]
 8001018:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800101c:	6053      	str	r3, [r2, #4]
 800101e:	e7b6      	b.n	8000f8e <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 8001020:	4a2e      	ldr	r2, [pc, #184]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001022:	6813      	ldr	r3, [r2, #0]
 8001024:	f023 0301 	bic.w	r3, r3, #1
 8001028:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800102a:	f7ff fcb7 	bl	800099c <HAL_GetTick>
 800102e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001030:	4b2a      	ldr	r3, [pc, #168]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f013 0f04 	tst.w	r3, #4
 8001038:	d0a9      	beq.n	8000f8e <HAL_RCC_OscConfig+0x17e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800103a:	f7ff fcaf 	bl	800099c <HAL_GetTick>
 800103e:	1b40      	subs	r0, r0, r5
 8001040:	2802      	cmp	r0, #2
 8001042:	d9f5      	bls.n	8001030 <HAL_RCC_OscConfig+0x220>
            return HAL_TIMEOUT;
 8001044:	2003      	movs	r0, #3
 8001046:	e1f3      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001048:	f002 0203 	and.w	r2, r2, #3
 800104c:	2a01      	cmp	r2, #1
 800104e:	d1ac      	bne.n	8000faa <HAL_RCC_OscConfig+0x19a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001050:	4b22      	ldr	r3, [pc, #136]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001058:	d003      	beq.n	8001062 <HAL_RCC_OscConfig+0x252>
 800105a:	69e3      	ldr	r3, [r4, #28]
 800105c:	2b80      	cmp	r3, #128	; 0x80
 800105e:	f040 81e4 	bne.w	800142a <HAL_RCC_OscConfig+0x61a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001062:	f7ff fca1 	bl	80009a8 <HAL_GetREVID>
 8001066:	f241 0303 	movw	r3, #4099	; 0x1003
 800106a:	4298      	cmp	r0, r3
 800106c:	d812      	bhi.n	8001094 <HAL_RCC_OscConfig+0x284>
 800106e:	6a22      	ldr	r2, [r4, #32]
 8001070:	2a20      	cmp	r2, #32
 8001072:	d007      	beq.n	8001084 <HAL_RCC_OscConfig+0x274>
 8001074:	4919      	ldr	r1, [pc, #100]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001076:	684b      	ldr	r3, [r1, #4]
 8001078:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800107c:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 8001080:	604b      	str	r3, [r1, #4]
 8001082:	e00f      	b.n	80010a4 <HAL_RCC_OscConfig+0x294>
 8001084:	4a15      	ldr	r2, [pc, #84]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001086:	6853      	ldr	r3, [r2, #4]
 8001088:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800108c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001090:	6053      	str	r3, [r2, #4]
 8001092:	e007      	b.n	80010a4 <HAL_RCC_OscConfig+0x294>
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 8001096:	68d3      	ldr	r3, [r2, #12]
 8001098:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800109c:	6a21      	ldr	r1, [r4, #32]
 800109e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80010a2:	60d3      	str	r3, [r2, #12]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010a4:	6823      	ldr	r3, [r4, #0]
 80010a6:	f013 0f08 	tst.w	r3, #8
 80010aa:	d063      	beq.n	8001174 <HAL_RCC_OscConfig+0x364>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010ac:	6963      	ldr	r3, [r4, #20]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d04c      	beq.n	800114c <HAL_RCC_OscConfig+0x33c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010b2:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 80010b4:	6f53      	ldr	r3, [r2, #116]	; 0x74
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010bc:	f7ff fc6e 	bl	800099c <HAL_GetTick>
 80010c0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_RCC_OscConfig+0x2cc>)
 80010c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010c6:	f013 0f02 	tst.w	r3, #2
 80010ca:	d153      	bne.n	8001174 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc66 	bl	800099c <HAL_GetTick>
 80010d0:	1b40      	subs	r0, r0, r5
 80010d2:	2802      	cmp	r0, #2
 80010d4:	d9f5      	bls.n	80010c2 <HAL_RCC_OscConfig+0x2b2>
        {
          return HAL_TIMEOUT;
 80010d6:	2003      	movs	r0, #3
 80010d8:	e1aa      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 80010da:	bf00      	nop
 80010dc:	58024400 	.word	0x58024400
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80010e0:	f7ff fc62 	bl	80009a8 <HAL_GetREVID>
 80010e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80010e8:	4298      	cmp	r0, r3
 80010ea:	d812      	bhi.n	8001112 <HAL_RCC_OscConfig+0x302>
 80010ec:	6a22      	ldr	r2, [r4, #32]
 80010ee:	2a20      	cmp	r2, #32
 80010f0:	d007      	beq.n	8001102 <HAL_RCC_OscConfig+0x2f2>
 80010f2:	4985      	ldr	r1, [pc, #532]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80010f4:	684b      	ldr	r3, [r1, #4]
 80010f6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80010fa:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80010fe:	604b      	str	r3, [r1, #4]
 8001100:	e7d0      	b.n	80010a4 <HAL_RCC_OscConfig+0x294>
 8001102:	4a81      	ldr	r2, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001104:	6853      	ldr	r3, [r2, #4]
 8001106:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800110a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800110e:	6053      	str	r3, [r2, #4]
 8001110:	e7c8      	b.n	80010a4 <HAL_RCC_OscConfig+0x294>
 8001112:	4a7d      	ldr	r2, [pc, #500]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001114:	68d3      	ldr	r3, [r2, #12]
 8001116:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800111a:	6a21      	ldr	r1, [r4, #32]
 800111c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001120:	60d3      	str	r3, [r2, #12]
 8001122:	e7bf      	b.n	80010a4 <HAL_RCC_OscConfig+0x294>
        __HAL_RCC_CSI_DISABLE();
 8001124:	4a78      	ldr	r2, [pc, #480]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800112c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800112e:	f7ff fc35 	bl	800099c <HAL_GetTick>
 8001132:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001134:	4b74      	ldr	r3, [pc, #464]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f413 7f80 	tst.w	r3, #256	; 0x100
 800113c:	d0b2      	beq.n	80010a4 <HAL_RCC_OscConfig+0x294>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800113e:	f7ff fc2d 	bl	800099c <HAL_GetTick>
 8001142:	1b40      	subs	r0, r0, r5
 8001144:	2802      	cmp	r0, #2
 8001146:	d9f5      	bls.n	8001134 <HAL_RCC_OscConfig+0x324>
            return HAL_TIMEOUT;
 8001148:	2003      	movs	r0, #3
 800114a:	e171      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800114c:	4a6e      	ldr	r2, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 800114e:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8001150:	f023 0301 	bic.w	r3, r3, #1
 8001154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001156:	f7ff fc21 	bl	800099c <HAL_GetTick>
 800115a:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800115c:	4b6a      	ldr	r3, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 800115e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001160:	f013 0f02 	tst.w	r3, #2
 8001164:	d006      	beq.n	8001174 <HAL_RCC_OscConfig+0x364>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001166:	f7ff fc19 	bl	800099c <HAL_GetTick>
 800116a:	1b40      	subs	r0, r0, r5
 800116c:	2802      	cmp	r0, #2
 800116e:	d9f5      	bls.n	800115c <HAL_RCC_OscConfig+0x34c>
        {
          return HAL_TIMEOUT;
 8001170:	2003      	movs	r0, #3
 8001172:	e15d      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	f013 0f20 	tst.w	r3, #32
 800117a:	d029      	beq.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800117c:	69a3      	ldr	r3, [r4, #24]
 800117e:	b19b      	cbz	r3, 80011a8 <HAL_RCC_OscConfig+0x398>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001180:	4a61      	ldr	r2, [pc, #388]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001182:	6813      	ldr	r3, [r2, #0]
 8001184:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001188:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800118a:	f7ff fc07 	bl	800099c <HAL_GetTick>
 800118e:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001190:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001198:	d11a      	bne.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800119a:	f7ff fbff 	bl	800099c <HAL_GetTick>
 800119e:	1b40      	subs	r0, r0, r5
 80011a0:	2802      	cmp	r0, #2
 80011a2:	d9f5      	bls.n	8001190 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 80011a4:	2003      	movs	r0, #3
 80011a6:	e143      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80011a8:	4a57      	ldr	r2, [pc, #348]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80011aa:	6813      	ldr	r3, [r2, #0]
 80011ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80011b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fbf3 	bl	800099c <HAL_GetTick>
 80011b6:	4605      	mov	r5, r0

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80011b8:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80011c0:	d006      	beq.n	80011d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80011c2:	f7ff fbeb 	bl	800099c <HAL_GetTick>
 80011c6:	1b40      	subs	r0, r0, r5
 80011c8:	2802      	cmp	r0, #2
 80011ca:	d9f5      	bls.n	80011b8 <HAL_RCC_OscConfig+0x3a8>
        {
          return HAL_TIMEOUT;
 80011cc:	2003      	movs	r0, #3
 80011ce:	e12f      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	f013 0f04 	tst.w	r3, #4
 80011d6:	d121      	bne.n	800121c <HAL_RCC_OscConfig+0x40c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 8127 	beq.w	800142e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80011e0:	4a49      	ldr	r2, [pc, #292]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80011e2:	6912      	ldr	r2, [r2, #16]
 80011e4:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80011e8:	2a18      	cmp	r2, #24
 80011ea:	f000 80ef 	beq.w	80013cc <HAL_RCC_OscConfig+0x5bc>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011ee:	2b02      	cmp	r3, #2
 80011f0:	d075      	beq.n	80012de <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011f2:	4a45      	ldr	r2, [pc, #276]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80011f4:	6813      	ldr	r3, [r2, #0]
 80011f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fc:	f7ff fbce 	bl	800099c <HAL_GetTick>
 8001200:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001202:	4b41      	ldr	r3, [pc, #260]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800120a:	f000 80dd 	beq.w	80013c8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800120e:	f7ff fbc5 	bl	800099c <HAL_GetTick>
 8001212:	1b00      	subs	r0, r0, r4
 8001214:	2802      	cmp	r0, #2
 8001216:	d9f4      	bls.n	8001202 <HAL_RCC_OscConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8001218:	2003      	movs	r0, #3
 800121a:	e109      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
    PWR->CR1 |= PWR_CR1_DBP;
 800121c:	4a3b      	ldr	r2, [pc, #236]	; (800130c <HAL_RCC_OscConfig+0x4fc>)
 800121e:	6813      	ldr	r3, [r2, #0]
 8001220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001224:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001226:	f7ff fbb9 	bl	800099c <HAL_GetTick>
 800122a:	4605      	mov	r5, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800122c:	4b37      	ldr	r3, [pc, #220]	; (800130c <HAL_RCC_OscConfig+0x4fc>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x434>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001236:	f7ff fbb1 	bl	800099c <HAL_GetTick>
 800123a:	1b40      	subs	r0, r0, r5
 800123c:	2864      	cmp	r0, #100	; 0x64
 800123e:	d9f5      	bls.n	800122c <HAL_RCC_OscConfig+0x41c>
        return HAL_TIMEOUT;
 8001240:	2003      	movs	r0, #3
 8001242:	e0f5      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001244:	68a3      	ldr	r3, [r4, #8]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d00a      	beq.n	8001260 <HAL_RCC_OscConfig+0x450>
 800124a:	bb0b      	cbnz	r3, 8001290 <HAL_RCC_OscConfig+0x480>
 800124c:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 800124e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001250:	f022 0201 	bic.w	r2, r2, #1
 8001254:	671a      	str	r2, [r3, #112]	; 0x70
 8001256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001258:	f022 0204 	bic.w	r2, r2, #4
 800125c:	671a      	str	r2, [r3, #112]	; 0x70
 800125e:	e004      	b.n	800126a <HAL_RCC_OscConfig+0x45a>
 8001260:	4a29      	ldr	r2, [pc, #164]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001262:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6713      	str	r3, [r2, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800126a:	68a3      	ldr	r3, [r4, #8]
 800126c:	b333      	cbz	r3, 80012bc <HAL_RCC_OscConfig+0x4ac>
      tickstart = HAL_GetTick();
 800126e:	f7ff fb95 	bl	800099c <HAL_GetTick>
 8001272:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001274:	4b24      	ldr	r3, [pc, #144]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001278:	f013 0f02 	tst.w	r3, #2
 800127c:	d1ac      	bne.n	80011d8 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800127e:	f7ff fb8d 	bl	800099c <HAL_GetTick>
 8001282:	1b40      	subs	r0, r0, r5
 8001284:	f241 3388 	movw	r3, #5000	; 0x1388
 8001288:	4298      	cmp	r0, r3
 800128a:	d9f3      	bls.n	8001274 <HAL_RCC_OscConfig+0x464>
          return HAL_TIMEOUT;
 800128c:	2003      	movs	r0, #3
 800128e:	e0cf      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001290:	2b05      	cmp	r3, #5
 8001292:	d009      	beq.n	80012a8 <HAL_RCC_OscConfig+0x498>
 8001294:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 8001296:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001298:	f022 0201 	bic.w	r2, r2, #1
 800129c:	671a      	str	r2, [r3, #112]	; 0x70
 800129e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012a0:	f022 0204 	bic.w	r2, r2, #4
 80012a4:	671a      	str	r2, [r3, #112]	; 0x70
 80012a6:	e7e0      	b.n	800126a <HAL_RCC_OscConfig+0x45a>
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80012aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012ac:	f042 0204 	orr.w	r2, r2, #4
 80012b0:	671a      	str	r2, [r3, #112]	; 0x70
 80012b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80012b4:	f042 0201 	orr.w	r2, r2, #1
 80012b8:	671a      	str	r2, [r3, #112]	; 0x70
 80012ba:	e7d6      	b.n	800126a <HAL_RCC_OscConfig+0x45a>
      tickstart = HAL_GetTick();
 80012bc:	f7ff fb6e 	bl	800099c <HAL_GetTick>
 80012c0:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80012c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012c6:	f013 0f02 	tst.w	r3, #2
 80012ca:	d085      	beq.n	80011d8 <HAL_RCC_OscConfig+0x3c8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff fb66 	bl	800099c <HAL_GetTick>
 80012d0:	1b40      	subs	r0, r0, r5
 80012d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d9f3      	bls.n	80012c2 <HAL_RCC_OscConfig+0x4b2>
          return HAL_TIMEOUT;
 80012da:	2003      	movs	r0, #3
 80012dc:	e0a8      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
        __HAL_RCC_PLL_DISABLE();
 80012de:	4a0a      	ldr	r2, [pc, #40]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80012e0:	6813      	ldr	r3, [r2, #0]
 80012e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012e6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80012e8:	f7ff fb58 	bl	800099c <HAL_GetTick>
 80012ec:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_RCC_OscConfig+0x4f8>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80012f6:	d00b      	beq.n	8001310 <HAL_RCC_OscConfig+0x500>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fb50 	bl	800099c <HAL_GetTick>
 80012fc:	1b40      	subs	r0, r0, r5
 80012fe:	2802      	cmp	r0, #2
 8001300:	d9f5      	bls.n	80012ee <HAL_RCC_OscConfig+0x4de>
            return HAL_TIMEOUT;
 8001302:	2003      	movs	r0, #3
 8001304:	e094      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 8001306:	bf00      	nop
 8001308:	58024400 	.word	0x58024400
 800130c:	58024800 	.word	0x58024800
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001310:	4b4f      	ldr	r3, [pc, #316]	; (8001450 <HAL_RCC_OscConfig+0x640>)
 8001312:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001314:	4a4f      	ldr	r2, [pc, #316]	; (8001454 <HAL_RCC_OscConfig+0x644>)
 8001316:	400a      	ands	r2, r1
 8001318:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800131a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800131c:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
 8001320:	430a      	orrs	r2, r1
 8001322:	629a      	str	r2, [r3, #40]	; 0x28
 8001324:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001326:	3a01      	subs	r2, #1
 8001328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800132c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800132e:	3901      	subs	r1, #1
 8001330:	0249      	lsls	r1, r1, #9
 8001332:	b289      	uxth	r1, r1
 8001334:	430a      	orrs	r2, r1
 8001336:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001338:	3901      	subs	r1, #1
 800133a:	0409      	lsls	r1, r1, #16
 800133c:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8001340:	430a      	orrs	r2, r1
 8001342:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001344:	3901      	subs	r1, #1
 8001346:	0609      	lsls	r1, r1, #24
 8001348:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 800134c:	430a      	orrs	r2, r1
 800134e:	631a      	str	r2, [r3, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 8001350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001352:	f022 0201 	bic.w	r2, r2, #1
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001358:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800135a:	4a3f      	ldr	r2, [pc, #252]	; (8001458 <HAL_RCC_OscConfig+0x648>)
 800135c:	400a      	ands	r2, r1
 800135e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001360:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001364:	635a      	str	r2, [r3, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001368:	f022 020c 	bic.w	r2, r2, #12
 800136c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800136e:	430a      	orrs	r2, r1
 8001370:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001374:	f022 0202 	bic.w	r2, r2, #2
 8001378:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800137a:	430a      	orrs	r2, r1
 800137c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800137e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001380:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001388:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800138e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001390:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001394:	62da      	str	r2, [r3, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8001396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	62da      	str	r2, [r3, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80013a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80013a6:	f7ff faf9 	bl	800099c <HAL_GetTick>
 80013aa:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80013ac:	4b28      	ldr	r3, [pc, #160]	; (8001450 <HAL_RCC_OscConfig+0x640>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80013b4:	d106      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5b4>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013b6:	f7ff faf1 	bl	800099c <HAL_GetTick>
 80013ba:	1b00      	subs	r0, r0, r4
 80013bc:	2802      	cmp	r0, #2
 80013be:	d9f5      	bls.n	80013ac <HAL_RCC_OscConfig+0x59c>
            return HAL_TIMEOUT;
 80013c0:	2003      	movs	r0, #3
 80013c2:	e035      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
 80013c6:	e033      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 80013c8:	2000      	movs	r0, #0
 80013ca:	e031      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
      temp1_pllckcfg = RCC->PLLCKSELR;
 80013cc:	4a20      	ldr	r2, [pc, #128]	; (8001450 <HAL_RCC_OscConfig+0x640>)
 80013ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 80013d0:	6b10      	ldr	r0, [r2, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d02d      	beq.n	8001432 <HAL_RCC_OscConfig+0x622>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013d6:	f001 0303 	and.w	r3, r1, #3
 80013da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013dc:	4293      	cmp	r3, r2
 80013de:	d12a      	bne.n	8001436 <HAL_RCC_OscConfig+0x626>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80013e0:	f3c1 1105 	ubfx	r1, r1, #4, #6
 80013e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013e6:	4299      	cmp	r1, r3
 80013e8:	d127      	bne.n	800143a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80013ea:	f3c0 0208 	ubfx	r2, r0, #0, #9
 80013ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80013f0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d123      	bne.n	800143e <HAL_RCC_OscConfig+0x62e>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80013f6:	f3c0 2246 	ubfx	r2, r0, #9, #7
 80013fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013fc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80013fe:	429a      	cmp	r2, r3
 8001400:	d11f      	bne.n	8001442 <HAL_RCC_OscConfig+0x632>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001402:	f3c0 4206 	ubfx	r2, r0, #16, #7
 8001406:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001408:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800140a:	429a      	cmp	r2, r3
 800140c:	d11b      	bne.n	8001446 <HAL_RCC_OscConfig+0x636>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800140e:	f3c0 6006 	ubfx	r0, r0, #24, #7
 8001412:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001414:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001416:	4298      	cmp	r0, r3
 8001418:	d117      	bne.n	800144a <HAL_RCC_OscConfig+0x63a>
  return HAL_OK;
 800141a:	2000      	movs	r0, #0
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
    return HAL_ERROR;
 800141e:	2001      	movs	r0, #1
}
 8001420:	4770      	bx	lr
        return HAL_ERROR;
 8001422:	2001      	movs	r0, #1
 8001424:	e004      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 8001426:	2001      	movs	r0, #1
 8001428:	e002      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
        return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e000      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
  return HAL_OK;
 800142e:	2000      	movs	r0, #0
}
 8001430:	bd38      	pop	{r3, r4, r5, pc}
        return HAL_ERROR;
 8001432:	2001      	movs	r0, #1
 8001434:	e7fc      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 8001436:	2001      	movs	r0, #1
 8001438:	e7fa      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 800143a:	2001      	movs	r0, #1
 800143c:	e7f8      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 800143e:	2001      	movs	r0, #1
 8001440:	e7f6      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 8001442:	2001      	movs	r0, #1
 8001444:	e7f4      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 8001446:	2001      	movs	r0, #1
 8001448:	e7f2      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 800144a:	2001      	movs	r0, #1
 800144c:	e7f0      	b.n	8001430 <HAL_RCC_OscConfig+0x620>
 800144e:	bf00      	nop
 8001450:	58024400 	.word	0x58024400
 8001454:	fffffc0c 	.word	0xfffffc0c
 8001458:	ffff0007 	.word	0xffff0007

0800145c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800145c:	4b74      	ldr	r3, [pc, #464]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001464:	2b10      	cmp	r3, #16
 8001466:	f000 80df 	beq.w	8001628 <HAL_RCC_GetSysClockFreq+0x1cc>
 800146a:	2b18      	cmp	r3, #24
 800146c:	d010      	beq.n	8001490 <HAL_RCC_GetSysClockFreq+0x34>
 800146e:	b10b      	cbz	r3, 8001474 <HAL_RCC_GetSysClockFreq+0x18>
 8001470:	4870      	ldr	r0, [pc, #448]	; (8001634 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8001472:	4770      	bx	lr
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001474:	4b6e      	ldr	r3, [pc, #440]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f013 0f20 	tst.w	r3, #32
 800147c:	f000 80d6 	beq.w	800162c <HAL_RCC_GetSysClockFreq+0x1d0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001480:	4b6b      	ldr	r3, [pc, #428]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001482:	6818      	ldr	r0, [r3, #0]
 8001484:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8001488:	4b6b      	ldr	r3, [pc, #428]	; (8001638 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800148a:	fa23 f000 	lsr.w	r0, r3, r0
 800148e:	4770      	bx	lr
{
 8001490:	b410      	push	{r4}
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001492:	4a67      	ldr	r2, [pc, #412]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001494:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001496:	f001 0103 	and.w	r1, r1, #3
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800149a:	6a94      	ldr	r4, [r2, #40]	; 0x28
 800149c:	f3c4 1005 	ubfx	r0, r4, #4, #6
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80014a0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80014a2:	f003 0301 	and.w	r3, r3, #1
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80014a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014a8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 80014ac:	fb03 f302 	mul.w	r3, r3, r2
 80014b0:	ee07 3a90 	vmov	s15, r3
 80014b4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    if (pllm != 0U)
 80014b8:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
 80014bc:	f000 8094 	beq.w	80015e8 <HAL_RCC_GetSysClockFreq+0x18c>
    {
      switch (pllsource)
 80014c0:	2901      	cmp	r1, #1
 80014c2:	d066      	beq.n	8001592 <HAL_RCC_GetSysClockFreq+0x136>
 80014c4:	2902      	cmp	r1, #2
 80014c6:	f000 8092 	beq.w	80015ee <HAL_RCC_GetSysClockFreq+0x192>
 80014ca:	b1e1      	cbz	r1, 8001506 <HAL_RCC_GetSysClockFreq+0xaa>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80014cc:	ee07 0a10 	vmov	s14, r0
 80014d0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80014d4:	ed9f 6a59 	vldr	s12, [pc, #356]	; 800163c <HAL_RCC_GetSysClockFreq+0x1e0>
 80014d8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80014dc:	4b54      	ldr	r3, [pc, #336]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80014de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e4:	ee06 3a90 	vmov	s13, r3
 80014e8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80014ec:	ed9f 6a54 	vldr	s12, [pc, #336]	; 8001640 <HAL_RCC_GetSysClockFreq+0x1e4>
 80014f0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80014f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80014f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001500:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8001504:	e061      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x16e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001506:	4b4a      	ldr	r3, [pc, #296]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f013 0f20 	tst.w	r3, #32
 800150e:	d023      	beq.n	8001558 <HAL_RCC_GetSysClockFreq+0xfc>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8001510:	4947      	ldr	r1, [pc, #284]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001512:	680a      	ldr	r2, [r1, #0]
 8001514:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8001518:	4b47      	ldr	r3, [pc, #284]	; (8001638 <HAL_RCC_GetSysClockFreq+0x1dc>)
 800151a:	40d3      	lsrs	r3, r2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800151c:	ee07 3a10 	vmov	s14, r3
 8001520:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001524:	ee07 0a10 	vmov	s14, r0
 8001528:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 800152c:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8001530:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001536:	ee06 3a90 	vmov	s13, r3
 800153a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800153e:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8001640 <HAL_RCC_GetSysClockFreq+0x1e4>
 8001542:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800154a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800154e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001556:	e038      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x16e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001558:	ee07 0a10 	vmov	s14, r0
 800155c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8001560:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8001644 <HAL_RCC_GetSysClockFreq+0x1e8>
 8001564:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8001568:	4b31      	ldr	r3, [pc, #196]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001570:	ee06 3a90 	vmov	s13, r3
 8001574:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8001578:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8001640 <HAL_RCC_GetSysClockFreq+0x1e4>
 800157c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001580:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001584:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001588:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800158c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001590:	e01b      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x16e>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8001592:	ee07 0a10 	vmov	s14, r0
 8001596:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800159a:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800163c <HAL_RCC_GetSysClockFreq+0x1e0>
 800159e:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015aa:	ee06 3a90 	vmov	s13, r3
 80015ae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80015b2:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8001640 <HAL_RCC_GetSysClockFreq+0x1e4>
 80015b6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80015ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80015be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80015c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80015c6:	ee27 7a27 	vmul.f32	s14, s14, s15
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80015d2:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80015d4:	ee07 3a90 	vmov	s15, r3
 80015d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015dc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015e0:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 80015e4:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80015e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015ec:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80015ee:	ee07 0a10 	vmov	s14, r0
 80015f2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80015f6:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001648 <HAL_RCC_GetSysClockFreq+0x1ec>
 80015fa:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80015fe:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <HAL_RCC_GetSysClockFreq+0x1d4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001606:	ee06 3a90 	vmov	s13, r3
 800160a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800160e:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8001640 <HAL_RCC_GetSysClockFreq+0x1e4>
 8001612:	ee67 7a86 	vmul.f32	s15, s15, s12
 8001616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800161a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800161e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001622:	ee27 7a27 	vmul.f32	s14, s14, s15
        break;
 8001626:	e7d0      	b.n	80015ca <HAL_RCC_GetSysClockFreq+0x16e>
    sysclockfreq = HSE_VALUE;
 8001628:	4808      	ldr	r0, [pc, #32]	; (800164c <HAL_RCC_GetSysClockFreq+0x1f0>)
 800162a:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <HAL_RCC_GetSysClockFreq+0x1dc>)
}
 800162e:	4770      	bx	lr
 8001630:	58024400 	.word	0x58024400
 8001634:	003d0900 	.word	0x003d0900
 8001638:	03d09000 	.word	0x03d09000
 800163c:	4a742400 	.word	0x4a742400
 8001640:	39000000 	.word	0x39000000
 8001644:	4c742400 	.word	0x4c742400
 8001648:	4bbebc20 	.word	0x4bbebc20
 800164c:	017d7840 	.word	0x017d7840

08001650 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001650:	2800      	cmp	r0, #0
 8001652:	f000 8132 	beq.w	80018ba <HAL_RCC_ClockConfig+0x26a>
{
 8001656:	b570      	push	{r4, r5, r6, lr}
 8001658:	460d      	mov	r5, r1
 800165a:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800165c:	4b9b      	ldr	r3, [pc, #620]	; (80018cc <HAL_RCC_ClockConfig+0x27c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 030f 	and.w	r3, r3, #15
 8001664:	428b      	cmp	r3, r1
 8001666:	d20b      	bcs.n	8001680 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001668:	4a98      	ldr	r2, [pc, #608]	; (80018cc <HAL_RCC_ClockConfig+0x27c>)
 800166a:	6813      	ldr	r3, [r2, #0]
 800166c:	f023 030f 	bic.w	r3, r3, #15
 8001670:	430b      	orrs	r3, r1
 8001672:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001674:	6813      	ldr	r3, [r2, #0]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	428b      	cmp	r3, r1
 800167c:	f040 811f 	bne.w	80018be <HAL_RCC_ClockConfig+0x26e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001680:	6823      	ldr	r3, [r4, #0]
 8001682:	f013 0f04 	tst.w	r3, #4
 8001686:	d00c      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x52>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001688:	6922      	ldr	r2, [r4, #16]
 800168a:	4b91      	ldr	r3, [pc, #580]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001692:	429a      	cmp	r2, r3
 8001694:	d905      	bls.n	80016a2 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001696:	498e      	ldr	r1, [pc, #568]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001698:	698b      	ldr	r3, [r1, #24]
 800169a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800169e:	431a      	orrs	r2, r3
 80016a0:	618a      	str	r2, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a2:	6823      	ldr	r3, [r4, #0]
 80016a4:	f013 0f08 	tst.w	r3, #8
 80016a8:	d00c      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x74>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80016aa:	6962      	ldr	r2, [r4, #20]
 80016ac:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d905      	bls.n	80016c4 <HAL_RCC_ClockConfig+0x74>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80016b8:	4985      	ldr	r1, [pc, #532]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80016ba:	69cb      	ldr	r3, [r1, #28]
 80016bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016c0:	431a      	orrs	r2, r3
 80016c2:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	f013 0f10 	tst.w	r3, #16
 80016ca:	d00c      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x96>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80016cc:	69a2      	ldr	r2, [r4, #24]
 80016ce:	4b80      	ldr	r3, [pc, #512]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80016d6:	429a      	cmp	r2, r3
 80016d8:	d905      	bls.n	80016e6 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80016da:	497d      	ldr	r1, [pc, #500]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80016dc:	69cb      	ldr	r3, [r1, #28]
 80016de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80016e2:	431a      	orrs	r2, r3
 80016e4:	61ca      	str	r2, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80016e6:	6823      	ldr	r3, [r4, #0]
 80016e8:	f013 0f20 	tst.w	r3, #32
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_ClockConfig+0xb8>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80016ee:	69e2      	ldr	r2, [r4, #28]
 80016f0:	4b77      	ldr	r3, [pc, #476]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d905      	bls.n	8001708 <HAL_RCC_ClockConfig+0xb8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80016fc:	4974      	ldr	r1, [pc, #464]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80016fe:	6a0b      	ldr	r3, [r1, #32]
 8001700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001704:	431a      	orrs	r2, r3
 8001706:	620a      	str	r2, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	6823      	ldr	r3, [r4, #0]
 800170a:	f013 0f02 	tst.w	r3, #2
 800170e:	d00c      	beq.n	800172a <HAL_RCC_ClockConfig+0xda>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001710:	68e2      	ldr	r2, [r4, #12]
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	429a      	cmp	r2, r3
 800171c:	d905      	bls.n	800172a <HAL_RCC_ClockConfig+0xda>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800171e:	496c      	ldr	r1, [pc, #432]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001720:	698b      	ldr	r3, [r1, #24]
 8001722:	f023 030f 	bic.w	r3, r3, #15
 8001726:	431a      	orrs	r2, r3
 8001728:	618a      	str	r2, [r1, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	f013 0f01 	tst.w	r3, #1
 8001730:	d041      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x166>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001732:	4a67      	ldr	r2, [pc, #412]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001734:	6993      	ldr	r3, [r2, #24]
 8001736:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800173a:	68a1      	ldr	r1, [r4, #8]
 800173c:	430b      	orrs	r3, r1
 800173e:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001740:	6863      	ldr	r3, [r4, #4]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d00a      	beq.n	800175c <HAL_RCC_ClockConfig+0x10c>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	2b03      	cmp	r3, #3
 8001748:	d027      	beq.n	800179a <HAL_RCC_ClockConfig+0x14a>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800174a:	2b01      	cmp	r3, #1
 800174c:	d02c      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x158>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800174e:	4a60      	ldr	r2, [pc, #384]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001750:	6812      	ldr	r2, [r2, #0]
 8001752:	f012 0f04 	tst.w	r2, #4
 8001756:	d106      	bne.n	8001766 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 8001758:	2001      	movs	r0, #1
 800175a:	e0ad      	b.n	80018b8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001762:	f000 80ae 	beq.w	80018c2 <HAL_RCC_ClockConfig+0x272>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001766:	495a      	ldr	r1, [pc, #360]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001768:	690a      	ldr	r2, [r1, #16]
 800176a:	f022 0207 	bic.w	r2, r2, #7
 800176e:	4313      	orrs	r3, r2
 8001770:	610b      	str	r3, [r1, #16]
      tickstart = HAL_GetTick();
 8001772:	f7ff f913 	bl	800099c <HAL_GetTick>
 8001776:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001778:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001780:	6862      	ldr	r2, [r4, #4]
 8001782:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8001786:	d016      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x166>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001788:	f7ff f908 	bl	800099c <HAL_GetTick>
 800178c:	1b80      	subs	r0, r0, r6
 800178e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001792:	4298      	cmp	r0, r3
 8001794:	d9f0      	bls.n	8001778 <HAL_RCC_ClockConfig+0x128>
            return HAL_TIMEOUT;
 8001796:	2003      	movs	r0, #3
 8001798:	e08e      	b.n	80018b8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800179a:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80017a2:	d1e0      	bne.n	8001766 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
 80017a6:	e087      	b.n	80018b8 <HAL_RCC_ClockConfig+0x268>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017a8:	4a49      	ldr	r2, [pc, #292]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	f412 7f80 	tst.w	r2, #256	; 0x100
 80017b0:	d1d9      	bne.n	8001766 <HAL_RCC_ClockConfig+0x116>
          return HAL_ERROR;
 80017b2:	2001      	movs	r0, #1
 80017b4:	e080      	b.n	80018b8 <HAL_RCC_ClockConfig+0x268>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b6:	6823      	ldr	r3, [r4, #0]
 80017b8:	f013 0f02 	tst.w	r3, #2
 80017bc:	d00c      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x188>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80017be:	68e2      	ldr	r2, [r4, #12]
 80017c0:	4b43      	ldr	r3, [pc, #268]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	f003 030f 	and.w	r3, r3, #15
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d205      	bcs.n	80017d8 <HAL_RCC_ClockConfig+0x188>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017cc:	4940      	ldr	r1, [pc, #256]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 80017ce:	698b      	ldr	r3, [r1, #24]
 80017d0:	f023 030f 	bic.w	r3, r3, #15
 80017d4:	431a      	orrs	r2, r3
 80017d6:	618a      	str	r2, [r1, #24]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017d8:	4b3c      	ldr	r3, [pc, #240]	; (80018cc <HAL_RCC_ClockConfig+0x27c>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	42ab      	cmp	r3, r5
 80017e2:	d90a      	bls.n	80017fa <HAL_RCC_ClockConfig+0x1aa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017e4:	4a39      	ldr	r2, [pc, #228]	; (80018cc <HAL_RCC_ClockConfig+0x27c>)
 80017e6:	6813      	ldr	r3, [r2, #0]
 80017e8:	f023 030f 	bic.w	r3, r3, #15
 80017ec:	432b      	orrs	r3, r5
 80017ee:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f0:	6813      	ldr	r3, [r2, #0]
 80017f2:	f003 030f 	and.w	r3, r3, #15
 80017f6:	42ab      	cmp	r3, r5
 80017f8:	d165      	bne.n	80018c6 <HAL_RCC_ClockConfig+0x276>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	f013 0f04 	tst.w	r3, #4
 8001800:	d00c      	beq.n	800181c <HAL_RCC_ClockConfig+0x1cc>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001802:	6922      	ldr	r2, [r4, #16]
 8001804:	4b32      	ldr	r3, [pc, #200]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800180c:	429a      	cmp	r2, r3
 800180e:	d205      	bcs.n	800181c <HAL_RCC_ClockConfig+0x1cc>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001810:	492f      	ldr	r1, [pc, #188]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001812:	698b      	ldr	r3, [r1, #24]
 8001814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001818:	431a      	orrs	r2, r3
 800181a:	618a      	str	r2, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	f013 0f08 	tst.w	r3, #8
 8001822:	d00c      	beq.n	800183e <HAL_RCC_ClockConfig+0x1ee>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001824:	6962      	ldr	r2, [r4, #20]
 8001826:	4b2a      	ldr	r3, [pc, #168]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800182e:	429a      	cmp	r2, r3
 8001830:	d205      	bcs.n	800183e <HAL_RCC_ClockConfig+0x1ee>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001832:	4927      	ldr	r1, [pc, #156]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001834:	69cb      	ldr	r3, [r1, #28]
 8001836:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183a:	431a      	orrs	r2, r3
 800183c:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183e:	6823      	ldr	r3, [r4, #0]
 8001840:	f013 0f10 	tst.w	r3, #16
 8001844:	d00c      	beq.n	8001860 <HAL_RCC_ClockConfig+0x210>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001846:	69a2      	ldr	r2, [r4, #24]
 8001848:	4b21      	ldr	r3, [pc, #132]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 800184a:	69db      	ldr	r3, [r3, #28]
 800184c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001850:	429a      	cmp	r2, r3
 8001852:	d205      	bcs.n	8001860 <HAL_RCC_ClockConfig+0x210>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001854:	491e      	ldr	r1, [pc, #120]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001856:	69cb      	ldr	r3, [r1, #28]
 8001858:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800185c:	431a      	orrs	r2, r3
 800185e:	61ca      	str	r2, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001860:	6823      	ldr	r3, [r4, #0]
 8001862:	f013 0f20 	tst.w	r3, #32
 8001866:	d00c      	beq.n	8001882 <HAL_RCC_ClockConfig+0x232>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001868:	69e2      	ldr	r2, [r4, #28]
 800186a:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 800186c:	6a1b      	ldr	r3, [r3, #32]
 800186e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001872:	429a      	cmp	r2, r3
 8001874:	d205      	bcs.n	8001882 <HAL_RCC_ClockConfig+0x232>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8001876:	4916      	ldr	r1, [pc, #88]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001878:	6a0b      	ldr	r3, [r1, #32]
 800187a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800187e:	431a      	orrs	r2, r3
 8001880:	620a      	str	r2, [r1, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001882:	f7ff fdeb 	bl	800145c <HAL_RCC_GetSysClockFreq>
 8001886:	4912      	ldr	r1, [pc, #72]	; (80018d0 <HAL_RCC_ClockConfig+0x280>)
 8001888:	698b      	ldr	r3, [r1, #24]
 800188a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800188e:	4a11      	ldr	r2, [pc, #68]	; (80018d4 <HAL_RCC_ClockConfig+0x284>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	f003 031f 	and.w	r3, r3, #31
 8001896:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001898:	698b      	ldr	r3, [r1, #24]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	5cd3      	ldrb	r3, [r2, r3]
 80018a0:	f003 031f 	and.w	r3, r3, #31
 80018a4:	fa20 f303 	lsr.w	r3, r0, r3
 80018a8:	4a0b      	ldr	r2, [pc, #44]	; (80018d8 <HAL_RCC_ClockConfig+0x288>)
 80018aa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 80018ac:	4b0b      	ldr	r3, [pc, #44]	; (80018dc <HAL_RCC_ClockConfig+0x28c>)
 80018ae:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick (uwTickPrio);
 80018b0:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <HAL_RCC_ClockConfig+0x290>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	f7ff f810 	bl	80008d8 <HAL_InitTick>
}
 80018b8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80018ba:	2001      	movs	r0, #1
}
 80018bc:	4770      	bx	lr
      return HAL_ERROR;
 80018be:	2001      	movs	r0, #1
 80018c0:	e7fa      	b.n	80018b8 <HAL_RCC_ClockConfig+0x268>
          return HAL_ERROR;
 80018c2:	2001      	movs	r0, #1
 80018c4:	e7f8      	b.n	80018b8 <HAL_RCC_ClockConfig+0x268>
      return HAL_ERROR;
 80018c6:	2001      	movs	r0, #1
 80018c8:	e7f6      	b.n	80018b8 <HAL_RCC_ClockConfig+0x268>
 80018ca:	bf00      	nop
 80018cc:	52002000 	.word	0x52002000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	08004dc0 	.word	0x08004dc0
 80018d8:	20000004 	.word	0x20000004
 80018dc:	20000000 	.word	0x20000000
 80018e0:	2000000c 	.word	0x2000000c

080018e4 <RCCEx_PLL2_Config>:
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80018e4:	4b40      	ldr	r3, [pc, #256]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 80018e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d079      	beq.n	80019e4 <RCCEx_PLL2_Config+0x100>
{
 80018f0:	b570      	push	{r4, r5, r6, lr}
 80018f2:	4605      	mov	r5, r0
 80018f4:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80018f6:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 80018f8:	6813      	ldr	r3, [r2, #0]
 80018fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80018fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001900:	f7ff f84c 	bl	800099c <HAL_GetTick>
 8001904:	4604      	mov	r4, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 800190e:	d006      	beq.n	800191e <RCCEx_PLL2_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8001910:	f7ff f844 	bl	800099c <HAL_GetTick>
 8001914:	1b03      	subs	r3, r0, r4
 8001916:	2b02      	cmp	r3, #2
 8001918:	d9f5      	bls.n	8001906 <RCCEx_PLL2_Config+0x22>
      {
        return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3

  }


  return status;
}
 800191c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800191e:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 8001920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001922:	f422 327c 	bic.w	r2, r2, #258048	; 0x3f000
 8001926:	6829      	ldr	r1, [r5, #0]
 8001928:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
 800192c:	629a      	str	r2, [r3, #40]	; 0x28
 800192e:	686a      	ldr	r2, [r5, #4]
 8001930:	3a01      	subs	r2, #1
 8001932:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001936:	68a9      	ldr	r1, [r5, #8]
 8001938:	3901      	subs	r1, #1
 800193a:	0249      	lsls	r1, r1, #9
 800193c:	b289      	uxth	r1, r1
 800193e:	430a      	orrs	r2, r1
 8001940:	68e9      	ldr	r1, [r5, #12]
 8001942:	3901      	subs	r1, #1
 8001944:	0409      	lsls	r1, r1, #16
 8001946:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 800194a:	430a      	orrs	r2, r1
 800194c:	6929      	ldr	r1, [r5, #16]
 800194e:	3901      	subs	r1, #1
 8001950:	0609      	lsls	r1, r1, #24
 8001952:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8001956:	430a      	orrs	r2, r1
 8001958:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800195a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800195c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001960:	6969      	ldr	r1, [r5, #20]
 8001962:	430a      	orrs	r2, r1
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	f022 0220 	bic.w	r2, r2, #32
 800196c:	69a9      	ldr	r1, [r5, #24]
 800196e:	430a      	orrs	r2, r1
 8001970:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8001972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001974:	f022 0210 	bic.w	r2, r2, #16
 8001978:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800197a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <RCCEx_PLL2_Config+0x108>)
 800197e:	400a      	ands	r2, r1
 8001980:	69e9      	ldr	r1, [r5, #28]
 8001982:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001986:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_RCC_PLL2FRACN_ENABLE();
 8001988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198a:	f042 0210 	orr.w	r2, r2, #16
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001990:	b9c6      	cbnz	r6, 80019c4 <RCCEx_PLL2_Config+0xe0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8001992:	461a      	mov	r2, r3
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800199a:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL2_ENABLE();
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 800199e:	6813      	ldr	r3, [r2, #0]
 80019a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80019a4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 80019a6:	f7fe fff9 	bl	800099c <HAL_GetTick>
 80019aa:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80019b4:	d114      	bne.n	80019e0 <RCCEx_PLL2_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80019b6:	f7fe fff1 	bl	800099c <HAL_GetTick>
 80019ba:	1b00      	subs	r0, r0, r4
 80019bc:	2802      	cmp	r0, #2
 80019be:	d9f5      	bls.n	80019ac <RCCEx_PLL2_Config+0xc8>
        return HAL_TIMEOUT;
 80019c0:	2003      	movs	r0, #3
 80019c2:	e7ab      	b.n	800191c <RCCEx_PLL2_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 80019c4:	2e01      	cmp	r6, #1
 80019c6:	d005      	beq.n	80019d4 <RCCEx_PLL2_Config+0xf0>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80019c8:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 80019ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019d2:	e7e3      	b.n	800199c <RCCEx_PLL2_Config+0xb8>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80019d4:	4a04      	ldr	r2, [pc, #16]	; (80019e8 <RCCEx_PLL2_Config+0x104>)
 80019d6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80019d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80019dc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80019de:	e7dd      	b.n	800199c <RCCEx_PLL2_Config+0xb8>
  return status;
 80019e0:	2000      	movs	r0, #0
 80019e2:	e79b      	b.n	800191c <RCCEx_PLL2_Config+0x38>
    return HAL_ERROR;
 80019e4:	2001      	movs	r0, #1
}
 80019e6:	4770      	bx	lr
 80019e8:	58024400 	.word	0x58024400
 80019ec:	ffff0007 	.word	0xffff0007

080019f0 <RCCEx_PLL3_Config>:
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80019f0:	4b40      	ldr	r3, [pc, #256]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b03      	cmp	r3, #3
 80019fa:	d079      	beq.n	8001af0 <RCCEx_PLL3_Config+0x100>
{
 80019fc:	b570      	push	{r4, r5, r6, lr}
 80019fe:	4605      	mov	r5, r0
 8001a00:	460e      	mov	r6, r1


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8001a02:	4a3c      	ldr	r2, [pc, #240]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a0c:	f7fe ffc6 	bl	800099c <HAL_GetTick>
 8001a10:	4604      	mov	r4, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8001a12:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001a1a:	d006      	beq.n	8001a2a <RCCEx_PLL3_Config+0x3a>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001a1c:	f7fe ffbe 	bl	800099c <HAL_GetTick>
 8001a20:	1b03      	subs	r3, r0, r4
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d9f5      	bls.n	8001a12 <RCCEx_PLL3_Config+0x22>
      {
        return HAL_TIMEOUT;
 8001a26:	2003      	movs	r0, #3

  }


  return status;
}
 8001a28:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8001a2a:	4b32      	ldr	r3, [pc, #200]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 8001a2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a2e:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8001a32:	6829      	ldr	r1, [r5, #0]
 8001a34:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8001a38:	629a      	str	r2, [r3, #40]	; 0x28
 8001a3a:	686a      	ldr	r2, [r5, #4]
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a42:	68a9      	ldr	r1, [r5, #8]
 8001a44:	3901      	subs	r1, #1
 8001a46:	0249      	lsls	r1, r1, #9
 8001a48:	b289      	uxth	r1, r1
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	68e9      	ldr	r1, [r5, #12]
 8001a4e:	3901      	subs	r1, #1
 8001a50:	0409      	lsls	r1, r1, #16
 8001a52:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
 8001a56:	430a      	orrs	r2, r1
 8001a58:	6929      	ldr	r1, [r5, #16]
 8001a5a:	3901      	subs	r1, #1
 8001a5c:	0609      	lsls	r1, r1, #24
 8001a5e:	f001 41fe 	and.w	r1, r1, #2130706432	; 0x7f000000
 8001a62:	430a      	orrs	r2, r1
 8001a64:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8001a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001a6c:	6969      	ldr	r1, [r5, #20]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8001a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a78:	69a9      	ldr	r1, [r5, #24]
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8001a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a84:	62da      	str	r2, [r3, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8001a86:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <RCCEx_PLL3_Config+0x108>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	69e9      	ldr	r1, [r5, #28]
 8001a8e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a92:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RCC_PLL3FRACN_ENABLE();
 8001a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8001a9c:	b9c6      	cbnz	r6, 8001ad0 <RCCEx_PLL3_Config+0xe0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aa6:	62d3      	str	r3, [r2, #44]	; 0x2c
    __HAL_RCC_PLL3_ENABLE();
 8001aa8:	4a12      	ldr	r2, [pc, #72]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 8001aaa:	6813      	ldr	r3, [r2, #0]
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001ab2:	f7fe ff73 	bl	800099c <HAL_GetTick>
 8001ab6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 8001ac0:	d114      	bne.n	8001aec <RCCEx_PLL3_Config+0xfc>
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8001ac2:	f7fe ff6b 	bl	800099c <HAL_GetTick>
 8001ac6:	1b00      	subs	r0, r0, r4
 8001ac8:	2802      	cmp	r0, #2
 8001aca:	d9f5      	bls.n	8001ab8 <RCCEx_PLL3_Config+0xc8>
        return HAL_TIMEOUT;
 8001acc:	2003      	movs	r0, #3
 8001ace:	e7ab      	b.n	8001a28 <RCCEx_PLL3_Config+0x38>
    else if(Divider == DIVIDER_Q_UPDATE)
 8001ad0:	2e01      	cmp	r6, #1
 8001ad2:	d005      	beq.n	8001ae0 <RCCEx_PLL3_Config+0xf0>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8001ad4:	4a07      	ldr	r2, [pc, #28]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 8001ad6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ad8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001adc:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001ade:	e7e3      	b.n	8001aa8 <RCCEx_PLL3_Config+0xb8>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8001ae0:	4a04      	ldr	r2, [pc, #16]	; (8001af4 <RCCEx_PLL3_Config+0x104>)
 8001ae2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ae8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001aea:	e7dd      	b.n	8001aa8 <RCCEx_PLL3_Config+0xb8>
  return status;
 8001aec:	2000      	movs	r0, #0
 8001aee:	e79b      	b.n	8001a28 <RCCEx_PLL3_Config+0x38>
    return HAL_ERROR;
 8001af0:	2001      	movs	r0, #1
}
 8001af2:	4770      	bx	lr
 8001af4:	58024400 	.word	0x58024400
 8001af8:	ffff0007 	.word	0xffff0007

08001afc <HAL_RCCEx_PeriphCLKConfig>:
{
 8001afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001afe:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b00:	6803      	ldr	r3, [r0, #0]
 8001b02:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8001b06:	d030      	beq.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001b08:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8001b0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b0e:	d026      	beq.n	8001b5e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8001b10:	d80e      	bhi.n	8001b30 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8001b12:	b1eb      	cbz	r3, 8001b50 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8001b14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b18:	d107      	bne.n	8001b2a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	3004      	adds	r0, #4
 8001b1e:	f7ff fee1 	bl	80018e4 <RCCEx_PLL2_Config>
 8001b22:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001b24:	b145      	cbz	r5, 8001b38 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8001b26:	462e      	mov	r6, r5
 8001b28:	e021      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001b2a:	2601      	movs	r6, #1
 8001b2c:	4635      	mov	r5, r6
 8001b2e:	e01e      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8001b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001b34:	d109      	bne.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001b36:	2500      	movs	r5, #0
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8001b38:	4a96      	ldr	r2, [pc, #600]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001b3a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001b3c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001b40:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001b42:	430b      	orrs	r3, r1
 8001b44:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b46:	2600      	movs	r6, #0
 8001b48:	e011      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8001b4a:	2601      	movs	r6, #1
 8001b4c:	4635      	mov	r5, r6
 8001b4e:	e00e      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b50:	4a90      	ldr	r2, [pc, #576]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001b52:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	62d3      	str	r3, [r2, #44]	; 0x2c
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b5a:	2500      	movs	r5, #0
 8001b5c:	e7ec      	b.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x3c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8001b5e:	2102      	movs	r1, #2
 8001b60:	3024      	adds	r0, #36	; 0x24
 8001b62:	f7ff ff45 	bl	80019f0 <RCCEx_PLL3_Config>
 8001b66:	4605      	mov	r5, r0
      break;
 8001b68:	e7dc      	b.n	8001b24 <HAL_RCCEx_PeriphCLKConfig+0x28>
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b6a:	2600      	movs	r6, #0
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001b6c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b74:	d014      	beq.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001b76:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d830      	bhi.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001b7c:	e8df f003 	tbb	[pc, r3]
 8001b80:	08282203 	.word	0x08282203
 8001b84:	08          	.byte	0x08
 8001b85:	00          	.byte	0x00
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b86:	4a83      	ldr	r2, [pc, #524]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001b88:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001b90:	bb45      	cbnz	r5, 8001be4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b92:	4a80      	ldr	r2, [pc, #512]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001b94:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001b96:	f023 0307 	bic.w	r3, r3, #7
 8001b9a:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8001ba0:	6823      	ldr	r3, [r4, #0]
 8001ba2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001ba6:	d02f      	beq.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001ba8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001baa:	2b80      	cmp	r3, #128	; 0x80
 8001bac:	d04a      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8001bae:	d81e      	bhi.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0xf2>
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d041      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001bb4:	2b40      	cmp	r3, #64	; 0x40
 8001bb6:	d117      	bne.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001bb8:	2100      	movs	r1, #0
 8001bba:	1d20      	adds	r0, r4, #4
 8001bbc:	f7ff fe92 	bl	80018e4 <RCCEx_PLL2_Config>
 8001bc0:	4605      	mov	r5, r0
      break;
 8001bc2:	e019      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	1d20      	adds	r0, r4, #4
 8001bc8:	f7ff fe8c 	bl	80018e4 <RCCEx_PLL2_Config>
 8001bcc:	4605      	mov	r5, r0
      break;
 8001bce:	e7df      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x94>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001bd6:	f7ff ff0b 	bl	80019f0 <RCCEx_PLL3_Config>
 8001bda:	4605      	mov	r5, r0
      break;
 8001bdc:	e7d8      	b.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001bde:	2601      	movs	r6, #1
 8001be0:	4635      	mov	r5, r6
 8001be2:	e7dd      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001be4:	462e      	mov	r6, r5
 8001be6:	e7db      	b.n	8001ba0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001be8:	2601      	movs	r6, #1
 8001bea:	4635      	mov	r5, r6
 8001bec:	e00c      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001bee:	2bc0      	cmp	r3, #192	; 0xc0
 8001bf0:	d002      	beq.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001bf6:	d11c      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x136>
    if(ret == HAL_OK)
 8001bf8:	bb5d      	cbnz	r5, 8001c52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8001bfa:	4a66      	ldr	r2, [pc, #408]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001bfc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001bfe:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8001c02:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001c04:	430b      	orrs	r3, r1
 8001c06:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c0e:	d034      	beq.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001c10:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 8001c14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c18:	d04d      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8001c1a:	d81f      	bhi.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d044      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8001c20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c24:	d117      	bne.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c26:	2100      	movs	r1, #0
 8001c28:	1d20      	adds	r0, r4, #4
 8001c2a:	f7ff fe5b 	bl	80018e4 <RCCEx_PLL2_Config>
 8001c2e:	4605      	mov	r5, r0
      break;
 8001c30:	e01a      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    switch(PeriphClkInit->Sai23ClockSelection)
 8001c32:	2601      	movs	r6, #1
 8001c34:	4635      	mov	r5, r6
 8001c36:	e7e7      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c38:	4a56      	ldr	r2, [pc, #344]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001c3a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001c42:	e7d9      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001c44:	2100      	movs	r1, #0
 8001c46:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001c4a:	f7ff fed1 	bl	80019f0 <RCCEx_PLL3_Config>
 8001c4e:	4605      	mov	r5, r0
      break;
 8001c50:	e7d2      	b.n	8001bf8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8001c52:	462e      	mov	r6, r5
 8001c54:	e7d8      	b.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001c56:	2601      	movs	r6, #1
 8001c58:	4635      	mov	r5, r6
 8001c5a:	e00e      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8001c5c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001c60:	d002      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001c62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001c66:	d11d      	bne.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    if(ret == HAL_OK)
 8001c68:	bb65      	cbnz	r5, 8001cc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8001c6a:	4a4a      	ldr	r2, [pc, #296]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001c6c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001c6e:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 8001c72:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8001c76:	430b      	orrs	r3, r1
 8001c78:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8001c80:	d035      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001c82:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 8001c86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c8a:	d053      	beq.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8001c8c:	d81f      	bhi.n	8001cce <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d04a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8001c92:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c96:	d117      	bne.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	1d20      	adds	r0, r4, #4
 8001c9c:	f7ff fe22 	bl	80018e4 <RCCEx_PLL2_Config>
 8001ca0:	4605      	mov	r5, r0
      break;
 8001ca2:	e01a      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1de>
    switch(PeriphClkInit->Sai4AClockSelection)
 8001ca4:	2601      	movs	r6, #1
 8001ca6:	4635      	mov	r5, r6
 8001ca8:	e7e7      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x17e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001caa:	4a3a      	ldr	r2, [pc, #232]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001cac:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001cae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cb2:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001cb4:	e7d8      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001cbc:	f7ff fe98 	bl	80019f0 <RCCEx_PLL3_Config>
 8001cc0:	4605      	mov	r5, r0
      break;
 8001cc2:	e7d1      	b.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8001cc4:	462e      	mov	r6, r5
 8001cc6:	e7d8      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001cc8:	2601      	movs	r6, #1
 8001cca:	4635      	mov	r5, r6
 8001ccc:	e00f      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 8001cce:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001cd2:	d002      	beq.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8001cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cd8:	d123      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x226>
    if(ret == HAL_OK)
 8001cda:	2d00      	cmp	r5, #0
 8001cdc:	d131      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x246>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8001cde:	4a2d      	ldr	r2, [pc, #180]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001ce0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001ce2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ce6:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8001cea:	430b      	orrs	r3, r1
 8001cec:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8001cee:	6823      	ldr	r3, [r4, #0]
 8001cf0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001cf4:	d02e      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->QspiClockSelection)
 8001cf6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001cf8:	2b20      	cmp	r3, #32
 8001cfa:	d03f      	beq.n	8001d7c <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001cfc:	d826      	bhi.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x250>
 8001cfe:	b133      	cbz	r3, 8001d0e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001d00:	2b10      	cmp	r3, #16
 8001d02:	d120      	bne.n	8001d46 <HAL_RCCEx_PeriphCLKConfig+0x24a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d04:	4a23      	ldr	r2, [pc, #140]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001d06:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001d0e:	2d00      	cmp	r5, #0
 8001d10:	d13a      	bne.n	8001d88 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8001d12:	4a20      	ldr	r2, [pc, #128]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001d14:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001d16:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001d1a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8001d1c:	430b      	orrs	r3, r1
 8001d1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d20:	e018      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Sai4BClockSelection)
 8001d22:	2601      	movs	r6, #1
 8001d24:	4635      	mov	r5, r6
 8001d26:	e7e2      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d28:	4a1a      	ldr	r2, [pc, #104]	; (8001d94 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001d2a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d30:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001d32:	e7d2      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8001d34:	2100      	movs	r1, #0
 8001d36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001d3a:	f7ff fe59 	bl	80019f0 <RCCEx_PLL3_Config>
 8001d3e:	4605      	mov	r5, r0
      break;
 8001d40:	e7cb      	b.n	8001cda <HAL_RCCEx_PeriphCLKConfig+0x1de>
 8001d42:	462e      	mov	r6, r5
 8001d44:	e7d3      	b.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    switch(PeriphClkInit->QspiClockSelection)
 8001d46:	2601      	movs	r6, #1
 8001d48:	4635      	mov	r5, r6
 8001d4a:	e003      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8001d4c:	2b30      	cmp	r3, #48	; 0x30
 8001d4e:	d0de      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001d50:	2601      	movs	r6, #1
 8001d52:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8001d54:	6823      	ldr	r3, [r4, #0]
 8001d56:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001d5a:	d02c      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001d5c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001d5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d62:	d04d      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8001d64:	d818      	bhi.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d044      	beq.n	8001df4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001d6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d6e:	d10d      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x290>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8001d70:	2100      	movs	r1, #0
 8001d72:	1d20      	adds	r0, r4, #4
 8001d74:	f7ff fdb6 	bl	80018e4 <RCCEx_PLL2_Config>
 8001d78:	4605      	mov	r5, r0
      break;
 8001d7a:	e013      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	1d20      	adds	r0, r4, #4
 8001d80:	f7ff fdb0 	bl	80018e4 <RCCEx_PLL2_Config>
 8001d84:	4605      	mov	r5, r0
      break;
 8001d86:	e7c2      	b.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x212>
 8001d88:	462e      	mov	r6, r5
 8001d8a:	e7e3      	b.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x258>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001d8c:	2601      	movs	r6, #1
 8001d8e:	4635      	mov	r5, r6
 8001d90:	e011      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8001d92:	bf00      	nop
 8001d94:	58024400 	.word	0x58024400
 8001d98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8001d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001da2:	d124      	bne.n	8001dee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    if(ret == HAL_OK)
 8001da4:	2d00      	cmp	r5, #0
 8001da6:	d132      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x312>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8001da8:	4a98      	ldr	r2, [pc, #608]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001daa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001db0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001db2:	430b      	orrs	r3, r1
 8001db4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 8001dbc:	d037      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001dbe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001dc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dc4:	d051      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8001dc6:	d827      	bhi.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8001dc8:	b13b      	cbz	r3, 8001dda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001dca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dce:	d120      	bne.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x316>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	1d20      	adds	r0, r4, #4
 8001dd4:	f7ff fd86 	bl	80018e4 <RCCEx_PLL2_Config>
 8001dd8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001dda:	2d00      	cmp	r5, #0
 8001ddc:	d14c      	bne.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8001dde:	4a8b      	ldr	r2, [pc, #556]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001de0:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001de2:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001de6:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8001de8:	430b      	orrs	r3, r1
 8001dea:	6513      	str	r3, [r2, #80]	; 0x50
 8001dec:	e01f      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi123ClockSelection)
 8001dee:	2601      	movs	r6, #1
 8001df0:	4635      	mov	r5, r6
 8001df2:	e7e0      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001df4:	4a85      	ldr	r2, [pc, #532]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001df6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8001dfe:	e7d1      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8001e00:	2100      	movs	r1, #0
 8001e02:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e06:	f7ff fdf3 	bl	80019f0 <RCCEx_PLL3_Config>
 8001e0a:	4605      	mov	r5, r0
      break;
 8001e0c:	e7ca      	b.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8001e0e:	462e      	mov	r6, r5
 8001e10:	e7d1      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    switch(PeriphClkInit->Spi45ClockSelection)
 8001e12:	2601      	movs	r6, #1
 8001e14:	4635      	mov	r5, r6
 8001e16:	e00a      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x332>
 8001e18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e1c:	d0dd      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001e1e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e22:	d0da      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001e24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001e28:	d0d7      	beq.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001e2a:	2601      	movs	r6, #1
 8001e2c:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001e34:	d030      	beq.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x39c>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e36:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 8001e3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e3e:	d044      	beq.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8001e40:	d81f      	bhi.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8001e42:	b13b      	cbz	r3, 8001e54 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8001e44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e48:	d118      	bne.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x380>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	1d20      	adds	r0, r4, #4
 8001e4e:	f7ff fd49 	bl	80018e4 <RCCEx_PLL2_Config>
 8001e52:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001e54:	2d00      	cmp	r5, #0
 8001e56:	d13f      	bne.n	8001ed8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8001e58:	4a6c      	ldr	r2, [pc, #432]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001e5a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001e5c:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8001e60:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	e016      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001e70:	f7ff fdbe 	bl	80019f0 <RCCEx_PLL3_Config>
 8001e74:	4605      	mov	r5, r0
      break;
 8001e76:	e7b0      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8001e78:	462e      	mov	r6, r5
 8001e7a:	e7d8      	b.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Spi6ClockSelection)
 8001e7c:	2601      	movs	r6, #1
 8001e7e:	4635      	mov	r5, r6
 8001e80:	e00a      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x39c>
 8001e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e86:	d0e5      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8001e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e8c:	d0e2      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8001e8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8001e92:	d0df      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8001e94:	2601      	movs	r6, #1
 8001e96:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001e9e:	d009      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    switch(PeriphClkInit->FdcanClockSelection)
 8001ea0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001ea2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ea6:	d019      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8001ea8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001eac:	d024      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8001eae:	b1d3      	cbz	r3, 8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001eb0:	2601      	movs	r6, #1
 8001eb2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8001eb4:	6823      	ldr	r3, [r4, #0]
 8001eb6:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001eba:	d03d      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch(PeriphClkInit->FmcClockSelection)
 8001ebc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d836      	bhi.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x434>
 8001ec2:	e8df f003 	tbb	[pc, r3]
 8001ec6:	2126      	.short	0x2126
 8001ec8:	262f      	.short	0x262f
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8001eca:	2101      	movs	r1, #1
 8001ecc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001ed0:	f7ff fd8e 	bl	80019f0 <RCCEx_PLL3_Config>
 8001ed4:	4605      	mov	r5, r0
      break;
 8001ed6:	e7bd      	b.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8001ed8:	462e      	mov	r6, r5
 8001eda:	e7dd      	b.n	8001e98 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001edc:	4a4b      	ldr	r2, [pc, #300]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001ede:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ee4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001ee6:	b96d      	cbnz	r5, 8001f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001ee8:	4a48      	ldr	r2, [pc, #288]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001eea:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8001eec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001ef0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	6513      	str	r3, [r2, #80]	; 0x50
 8001ef6:	e7dd      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8001ef8:	2101      	movs	r1, #1
 8001efa:	1d20      	adds	r0, r4, #4
 8001efc:	f7ff fcf2 	bl	80018e4 <RCCEx_PLL2_Config>
 8001f00:	4605      	mov	r5, r0
      break;
 8001f02:	e7f0      	b.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001f04:	462e      	mov	r6, r5
 8001f06:	e7d5      	b.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f08:	4a40      	ldr	r2, [pc, #256]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001f0a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f10:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8001f12:	b985      	cbnz	r5, 8001f36 <HAL_RCCEx_PeriphCLKConfig+0x43a>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8001f14:	4a3d      	ldr	r2, [pc, #244]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001f16:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8001f18:	f023 0303 	bic.w	r3, r3, #3
 8001f1c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001f1e:	430b      	orrs	r3, r1
 8001f20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f22:	e009      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x43c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8001f24:	2102      	movs	r1, #2
 8001f26:	1d20      	adds	r0, r4, #4
 8001f28:	f7ff fcdc 	bl	80018e4 <RCCEx_PLL2_Config>
 8001f2c:	4605      	mov	r5, r0
      break;
 8001f2e:	e7f0      	b.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x416>
    switch(PeriphClkInit->FmcClockSelection)
 8001f30:	2601      	movs	r6, #1
 8001f32:	4635      	mov	r5, r6
 8001f34:	e000      	b.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x43c>
 8001f36:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f38:	6823      	ldr	r3, [r4, #0]
 8001f3a:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f3e:	d11f      	bne.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x484>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	f013 0f01 	tst.w	r3, #1
 8001f46:	f000 809b 	beq.w	8002080 <HAL_RCCEx_PeriphCLKConfig+0x584>
    switch(PeriphClkInit->Usart16ClockSelection)
 8001f4a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001f4c:	2b28      	cmp	r3, #40	; 0x28
 8001f4e:	f200 8095 	bhi.w	800207c <HAL_RCCEx_PeriphCLKConfig+0x580>
 8001f52:	e8df f003 	tbb	[pc, r3]
 8001f56:	9383      	.short	0x9383
 8001f58:	93939393 	.word	0x93939393
 8001f5c:	937e9393 	.word	0x937e9393
 8001f60:	93939393 	.word	0x93939393
 8001f64:	938c9393 	.word	0x938c9393
 8001f68:	93939393 	.word	0x93939393
 8001f6c:	93839393 	.word	0x93839393
 8001f70:	93939393 	.word	0x93939393
 8001f74:	93839393 	.word	0x93839393
 8001f78:	93939393 	.word	0x93939393
 8001f7c:	9393      	.short	0x9393
 8001f7e:	83          	.byte	0x83
 8001f7f:	00          	.byte	0x00
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f80:	4a23      	ldr	r2, [pc, #140]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f88:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8001f8a:	f7fe fd07 	bl	800099c <HAL_GetTick>
 8001f8e:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001f90:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001f98:	d105      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9a:	f7fe fcff 	bl	800099c <HAL_GetTick>
 8001f9e:	1bc0      	subs	r0, r0, r7
 8001fa0:	2864      	cmp	r0, #100	; 0x64
 8001fa2:	d9f5      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x494>
        ret = HAL_TIMEOUT;
 8001fa4:	2503      	movs	r5, #3
    if(ret == HAL_OK)
 8001fa6:	2d00      	cmp	r5, #0
 8001fa8:	d14f      	bne.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x54e>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8001faa:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8001fb2:	4053      	eors	r3, r2
 8001fb4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001fba:	4b14      	ldr	r3, [pc, #80]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001fbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001fbe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fc2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001fc4:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8001fc8:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8001fcc:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8001fd0:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8001fd2:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8001fd4:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fdc:	d01a      	beq.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0x518>
      if(ret == HAL_OK)
 8001fde:	2d00      	cmp	r5, #0
 8001fe0:	d135      	bne.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x552>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fe2:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8001fe6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001fea:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001fee:	d022      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x53a>
 8001ff0:	4a06      	ldr	r2, [pc, #24]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001ff2:	6913      	ldr	r3, [r2, #16]
 8001ff4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001ff8:	6113      	str	r3, [r2, #16]
 8001ffa:	4904      	ldr	r1, [pc, #16]	; (800200c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001ffc:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8001ffe:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8002002:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8002006:	4313      	orrs	r3, r2
 8002008:	670b      	str	r3, [r1, #112]	; 0x70
 800200a:	e799      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800200c:	58024400 	.word	0x58024400
 8002010:	58024800 	.word	0x58024800
        tickstart = HAL_GetTick();
 8002014:	f7fe fcc2 	bl	800099c <HAL_GetTick>
 8002018:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800201a:	4b87      	ldr	r3, [pc, #540]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800201c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201e:	f013 0f02 	tst.w	r3, #2
 8002022:	d1dc      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe fcba 	bl	800099c <HAL_GetTick>
 8002028:	1bc0      	subs	r0, r0, r7
 800202a:	f241 3388 	movw	r3, #5000	; 0x1388
 800202e:	4298      	cmp	r0, r3
 8002030:	d9f3      	bls.n	800201a <HAL_RCCEx_PeriphCLKConfig+0x51e>
            ret = HAL_TIMEOUT;
 8002032:	2503      	movs	r5, #3
 8002034:	e7d3      	b.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x4e2>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002036:	4880      	ldr	r0, [pc, #512]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002038:	6902      	ldr	r2, [r0, #16]
 800203a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800203e:	497f      	ldr	r1, [pc, #508]	; (800223c <HAL_RCCEx_PeriphCLKConfig+0x740>)
 8002040:	ea01 1313 	and.w	r3, r1, r3, lsr #4
 8002044:	4313      	orrs	r3, r2
 8002046:	6103      	str	r3, [r0, #16]
 8002048:	e7d7      	b.n	8001ffa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      status = ret;
 800204a:	462e      	mov	r6, r5
 800204c:	e778      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x444>
        status = ret;
 800204e:	462e      	mov	r6, r5
 8002050:	e776      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x444>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002052:	2101      	movs	r1, #1
 8002054:	1d20      	adds	r0, r4, #4
 8002056:	f7ff fc45 	bl	80018e4 <RCCEx_PLL2_Config>
 800205a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800205c:	b9e5      	cbnz	r5, 8002098 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800205e:	4a76      	ldr	r2, [pc, #472]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002060:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002062:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8002066:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8002068:	430b      	orrs	r3, r1
 800206a:	6553      	str	r3, [r2, #84]	; 0x54
 800206c:	e008      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800206e:	2101      	movs	r1, #1
 8002070:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002074:	f7ff fcbc 	bl	80019f0 <RCCEx_PLL3_Config>
 8002078:	4605      	mov	r5, r0
      break;
 800207a:	e7ef      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x560>
    switch(PeriphClkInit->Usart16ClockSelection)
 800207c:	2601      	movs	r6, #1
 800207e:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	f013 0f02 	tst.w	r3, #2
 8002086:	d022      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x5d2>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002088:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800208a:	2b05      	cmp	r3, #5
 800208c:	d81b      	bhi.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800208e:	e8df f003 	tbb	[pc, r3]
 8002092:	050a      	.short	0x050a
 8002094:	0a0a0a13 	.word	0x0a0a0a13
 8002098:	462e      	mov	r6, r5
 800209a:	e7f1      	b.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x584>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800209c:	2101      	movs	r1, #1
 800209e:	1d20      	adds	r0, r4, #4
 80020a0:	f7ff fc20 	bl	80018e4 <RCCEx_PLL2_Config>
 80020a4:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80020a6:	b98d      	cbnz	r5, 80020cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80020a8:	4a63      	ldr	r2, [pc, #396]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80020aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80020ac:	f023 0307 	bic.w	r3, r3, #7
 80020b0:	6f61      	ldr	r1, [r4, #116]	; 0x74
 80020b2:	430b      	orrs	r3, r1
 80020b4:	6553      	str	r3, [r2, #84]	; 0x54
 80020b6:	e00a      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80020b8:	2101      	movs	r1, #1
 80020ba:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80020be:	f7ff fc97 	bl	80019f0 <RCCEx_PLL3_Config>
 80020c2:	4605      	mov	r5, r0
      break;
 80020c4:	e7ef      	b.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
    switch(PeriphClkInit->Usart234578ClockSelection)
 80020c6:	2601      	movs	r6, #1
 80020c8:	4635      	mov	r5, r6
 80020ca:	e000      	b.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x5d2>
 80020cc:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020ce:	6823      	ldr	r3, [r4, #0]
 80020d0:	f013 0f04 	tst.w	r3, #4
 80020d4:	d022      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x620>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80020d6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80020da:	2b05      	cmp	r3, #5
 80020dc:	d81a      	bhi.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80020de:	e8df f003 	tbb	[pc, r3]
 80020e2:	0308      	.short	0x0308
 80020e4:	08080812 	.word	0x08080812
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80020e8:	2101      	movs	r1, #1
 80020ea:	1d20      	adds	r0, r4, #4
 80020ec:	f7ff fbfa 	bl	80018e4 <RCCEx_PLL2_Config>
 80020f0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80020f2:	b995      	cbnz	r5, 800211a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f4:	4a50      	ldr	r2, [pc, #320]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80020f6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80020f8:	f023 0307 	bic.w	r3, r3, #7
 80020fc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8002100:	430b      	orrs	r3, r1
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	e00a      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x620>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002106:	2101      	movs	r1, #1
 8002108:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800210c:	f7ff fc70 	bl	80019f0 <RCCEx_PLL3_Config>
 8002110:	4605      	mov	r5, r0
      break;
 8002112:	e7ee      	b.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8002114:	2601      	movs	r6, #1
 8002116:	4635      	mov	r5, r6
 8002118:	e000      	b.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x620>
 800211a:	462e      	mov	r6, r5
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	f013 0f20 	tst.w	r3, #32
 8002122:	d027      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002124:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8002128:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800212c:	d040      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
 800212e:	d816      	bhi.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002130:	b13b      	cbz	r3, 8002142 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8002132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002136:	d10f      	bne.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002138:	2100      	movs	r1, #0
 800213a:	1d20      	adds	r0, r4, #4
 800213c:	f7ff fbd2 	bl	80018e4 <RCCEx_PLL2_Config>
 8002140:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002142:	2d00      	cmp	r5, #0
 8002144:	d13b      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x6c2>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002146:	4a3c      	ldr	r2, [pc, #240]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8002148:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800214a:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800214e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8002152:	430b      	orrs	r3, r1
 8002154:	6553      	str	r3, [r2, #84]	; 0x54
 8002156:	e00d      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim1ClockSelection)
 8002158:	2601      	movs	r6, #1
 800215a:	4635      	mov	r5, r6
 800215c:	e00a      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x678>
 800215e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002162:	d0ee      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8002164:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002168:	d0eb      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x646>
 800216a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800216e:	d0e8      	beq.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x646>
 8002170:	2601      	movs	r6, #1
 8002172:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	f013 0f40 	tst.w	r3, #64	; 0x40
 800217a:	d030      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800217c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002180:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002184:	d04b      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x722>
 8002186:	d81f      	bhi.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 8002188:	b13b      	cbz	r3, 800219a <HAL_RCCEx_PeriphCLKConfig+0x69e>
 800218a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218e:	d118      	bne.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002190:	2100      	movs	r1, #0
 8002192:	1d20      	adds	r0, r4, #4
 8002194:	f7ff fba6 	bl	80018e4 <RCCEx_PLL2_Config>
 8002198:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800219a:	2d00      	cmp	r5, #0
 800219c:	d146      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x730>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800219e:	4a26      	ldr	r2, [pc, #152]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80021a0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80021a2:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80021a6:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 80021aa:	430b      	orrs	r3, r1
 80021ac:	6593      	str	r3, [r2, #88]	; 0x58
 80021ae:	e016      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80021b0:	2102      	movs	r1, #2
 80021b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021b6:	f7ff fc1b 	bl	80019f0 <RCCEx_PLL3_Config>
 80021ba:	4605      	mov	r5, r0
      break;
 80021bc:	e7c1      	b.n	8002142 <HAL_RCCEx_PeriphCLKConfig+0x646>
 80021be:	462e      	mov	r6, r5
 80021c0:	e7d8      	b.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x678>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80021c2:	2601      	movs	r6, #1
 80021c4:	4635      	mov	r5, r6
 80021c6:	e00a      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80021c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021cc:	d0e5      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80021ce:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80021d2:	d0e2      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80021d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021d8:	d0df      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x69e>
 80021da:	2601      	movs	r6, #1
 80021dc:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80021de:	6823      	ldr	r3, [r4, #0]
 80021e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021e4:	d037      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x75a>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80021e6:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 80021ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021ee:	f000 80a2 	beq.w	8002336 <HAL_RCCEx_PeriphCLKConfig+0x83a>
 80021f2:	d825      	bhi.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x744>
 80021f4:	b13b      	cbz	r3, 8002206 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 80021f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fa:	d119      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x734>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80021fc:	2100      	movs	r1, #0
 80021fe:	1d20      	adds	r0, r4, #4
 8002200:	f7ff fb70 	bl	80018e4 <RCCEx_PLL2_Config>
 8002204:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002206:	2d00      	cmp	r5, #0
 8002208:	f040 809c 	bne.w	8002344 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800220c:	4a0a      	ldr	r2, [pc, #40]	; (8002238 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800220e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8002210:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002214:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8002218:	430b      	orrs	r3, r1
 800221a:	6593      	str	r3, [r2, #88]	; 0x58
 800221c:	e01b      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x75a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800221e:	2102      	movs	r1, #2
 8002220:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002224:	f7ff fbe4 	bl	80019f0 <RCCEx_PLL3_Config>
 8002228:	4605      	mov	r5, r0
      break;
 800222a:	e7b6      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x69e>
 800222c:	462e      	mov	r6, r5
 800222e:	e7d6      	b.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x6e2>
    switch(PeriphClkInit->Lptim345ClockSelection)
 8002230:	2601      	movs	r6, #1
 8002232:	4635      	mov	r5, r6
 8002234:	e00f      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8002236:	bf00      	nop
 8002238:	58024400 	.word	0x58024400
 800223c:	00ffffcf 	.word	0x00ffffcf
 8002240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002244:	d0df      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8002246:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800224a:	d0dc      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 800224c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8002250:	d0d9      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8002252:	2601      	movs	r6, #1
 8002254:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002256:	6823      	ldr	r3, [r4, #0]
 8002258:	f013 0f08 	tst.w	r3, #8
 800225c:	d00c      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x77c>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800225e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8002262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002266:	d06f      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x84c>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002268:	4a94      	ldr	r2, [pc, #592]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800226a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800226c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002270:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002274:	430b      	orrs	r3, r1
 8002276:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002278:	6823      	ldr	r3, [r4, #0]
 800227a:	f013 0f10 	tst.w	r3, #16
 800227e:	d00c      	beq.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8002280:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002288:	d067      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x85e>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800228a:	4a8c      	ldr	r2, [pc, #560]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800228c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002292:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8002296:	430b      	orrs	r3, r1
 8002298:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800229a:	6823      	ldr	r3, [r4, #0]
 800229c:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80022a0:	d00b      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x7be>
    switch(PeriphClkInit->AdcClockSelection)
 80022a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022aa:	d06e      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0x88e>
 80022ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80022b0:	d061      	beq.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d05a      	beq.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x870>
 80022b6:	2601      	movs	r6, #1
 80022b8:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80022c0:	d00c      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    switch(PeriphClkInit->UsbClockSelection)
 80022c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80022c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80022ca:	d076      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x8be>
 80022cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80022d0:	d069      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80022d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80022d6:	d061      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x8a0>
 80022d8:	2601      	movs	r6, #1
 80022da:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80022dc:	6823      	ldr	r3, [r4, #0]
 80022de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80022e2:	d007      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    switch(PeriphClkInit->SdmmcClockSelection)
 80022e4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d070      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x8d0>
 80022ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022ee:	d07b      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80022f0:	2601      	movs	r6, #1
 80022f2:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 80022fa:	d17d      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80022fc:	6823      	ldr	r3, [r4, #0]
 80022fe:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002302:	f000 8086 	beq.w	8002412 <HAL_RCCEx_PeriphCLKConfig+0x916>
    switch(PeriphClkInit->RngClockSelection)
 8002306:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002308:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800230c:	f000 80c6 	beq.w	800249c <HAL_RCCEx_PeriphCLKConfig+0x9a0>
 8002310:	d97c      	bls.n	800240c <HAL_RCCEx_PeriphCLKConfig+0x910>
 8002312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002316:	d003      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8002318:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800231c:	f040 80bc 	bne.w	8002498 <HAL_RCCEx_PeriphCLKConfig+0x99c>
    if(ret == HAL_OK)
 8002320:	2d00      	cmp	r5, #0
 8002322:	f040 80c1 	bne.w	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x9ac>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002326:	4a65      	ldr	r2, [pc, #404]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8002328:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800232a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800232e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002330:	430b      	orrs	r3, r1
 8002332:	6553      	str	r3, [r2, #84]	; 0x54
 8002334:	e06d      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x916>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8002336:	2102      	movs	r1, #2
 8002338:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800233c:	f7ff fb58 	bl	80019f0 <RCCEx_PLL3_Config>
 8002340:	4605      	mov	r5, r0
      break;
 8002342:	e760      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x70a>
 8002344:	462e      	mov	r6, r5
 8002346:	e786      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x75a>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8002348:	2102      	movs	r1, #2
 800234a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800234e:	f7ff fb4f 	bl	80019f0 <RCCEx_PLL3_Config>
 8002352:	2800      	cmp	r0, #0
 8002354:	d088      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x76c>
          status = HAL_ERROR;
 8002356:	2601      	movs	r6, #1
 8002358:	e786      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x76c>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800235a:	2102      	movs	r1, #2
 800235c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002360:	f7ff fb46 	bl	80019f0 <RCCEx_PLL3_Config>
 8002364:	2800      	cmp	r0, #0
 8002366:	d090      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x78e>
        status = HAL_ERROR;
 8002368:	2601      	movs	r6, #1
 800236a:	e78e      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x78e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800236c:	2100      	movs	r1, #0
 800236e:	1d20      	adds	r0, r4, #4
 8002370:	f7ff fab8 	bl	80018e4 <RCCEx_PLL2_Config>
 8002374:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002376:	b97d      	cbnz	r5, 8002398 <HAL_RCCEx_PeriphCLKConfig+0x89c>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002378:	4a50      	ldr	r2, [pc, #320]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800237a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800237c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002380:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8002384:	430b      	orrs	r3, r1
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
 8002388:	e797      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x7be>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800238a:	2102      	movs	r1, #2
 800238c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002390:	f7ff fb2e 	bl	80019f0 <RCCEx_PLL3_Config>
 8002394:	4605      	mov	r5, r0
      break;
 8002396:	e7ee      	b.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0x87a>
 8002398:	462e      	mov	r6, r5
 800239a:	e78e      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0x7be>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800239c:	4a47      	ldr	r2, [pc, #284]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800239e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80023a6:	b97d      	cbnz	r5, 80023c8 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023a8:	4a44      	ldr	r2, [pc, #272]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80023aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80023ac:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80023b0:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6553      	str	r3, [r2, #84]	; 0x54
 80023b8:	e790      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80023ba:	2101      	movs	r1, #1
 80023bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023c0:	f7ff fb16 	bl	80019f0 <RCCEx_PLL3_Config>
 80023c4:	4605      	mov	r5, r0
      break;
 80023c6:	e7ee      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
 80023c8:	462e      	mov	r6, r5
 80023ca:	e787      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x7e0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023cc:	4a3b      	ldr	r2, [pc, #236]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80023ce:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80023d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023d4:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80023d6:	b96d      	cbnz	r5, 80023f4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80023d8:	4a38      	ldr	r2, [pc, #224]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80023da:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80023dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80023e2:	430b      	orrs	r3, r1
 80023e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023e6:	e785      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80023e8:	2102      	movs	r1, #2
 80023ea:	1d20      	adds	r0, r4, #4
 80023ec:	f7ff fa7a 	bl	80018e4 <RCCEx_PLL2_Config>
 80023f0:	4605      	mov	r5, r0
      break;
 80023f2:	e7f0      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
 80023f4:	462e      	mov	r6, r5
 80023f6:	e77d      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80023f8:	2102      	movs	r1, #2
 80023fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80023fe:	f7ff faf7 	bl	80019f0 <RCCEx_PLL3_Config>
 8002402:	2800      	cmp	r0, #0
 8002404:	f43f af7a 	beq.w	80022fc <HAL_RCCEx_PeriphCLKConfig+0x800>
      status=HAL_ERROR;
 8002408:	2601      	movs	r6, #1
 800240a:	e777      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x800>
    switch(PeriphClkInit->RngClockSelection)
 800240c:	2b00      	cmp	r3, #0
 800240e:	d087      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x824>
 8002410:	2601      	movs	r6, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002418:	d006      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x92c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800241a:	4a28      	ldr	r2, [pc, #160]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800241c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800241e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002422:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002424:	430b      	orrs	r3, r1
 8002426:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800242e:	d007      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x944>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002430:	4a22      	ldr	r2, [pc, #136]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8002432:	6913      	ldr	r3, [r2, #16]
 8002434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002438:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 800243c:	430b      	orrs	r3, r1
 800243e:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002440:	6823      	ldr	r3, [r4, #0]
 8002442:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
 8002446:	d006      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x95a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800244a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800244c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002450:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002452:	430b      	orrs	r3, r1
 8002454:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800245c:	d009      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x976>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800245e:	4b17      	ldr	r3, [pc, #92]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002466:	611a      	str	r2, [r3, #16]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800246e:	430a      	orrs	r2, r1
 8002470:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8002472:	6823      	ldr	r3, [r4, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db19      	blt.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002478:	6823      	ldr	r3, [r4, #0]
 800247a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800247e:	d007      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x994>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8002482:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8002484:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002488:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800248c:	430b      	orrs	r3, r1
 800248e:	6553      	str	r3, [r2, #84]	; 0x54
  if (status == HAL_OK)
 8002490:	b106      	cbz	r6, 8002494 <HAL_RCCEx_PeriphCLKConfig+0x998>
  return HAL_ERROR;
 8002492:	2601      	movs	r6, #1
}
 8002494:	4630      	mov	r0, r6
 8002496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PeriphClkInit->RngClockSelection)
 8002498:	2601      	movs	r6, #1
 800249a:	e7ba      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x916>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800249c:	4a07      	ldr	r2, [pc, #28]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800249e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a4:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 80024a6:	e73b      	b.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x824>
 80024a8:	462e      	mov	r6, r5
 80024aa:	e7b2      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x916>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80024ac:	4a03      	ldr	r2, [pc, #12]	; (80024bc <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80024ae:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80024b0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80024b4:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80024b6:	430b      	orrs	r3, r1
 80024b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ba:	e7dd      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80024bc:	58024400 	.word	0x58024400

080024c0 <__errno>:
 80024c0:	4b01      	ldr	r3, [pc, #4]	; (80024c8 <__errno+0x8>)
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	20000010 	.word	0x20000010

080024cc <__libc_init_array>:
 80024cc:	b570      	push	{r4, r5, r6, lr}
 80024ce:	4d0d      	ldr	r5, [pc, #52]	; (8002504 <__libc_init_array+0x38>)
 80024d0:	4c0d      	ldr	r4, [pc, #52]	; (8002508 <__libc_init_array+0x3c>)
 80024d2:	1b64      	subs	r4, r4, r5
 80024d4:	10a4      	asrs	r4, r4, #2
 80024d6:	2600      	movs	r6, #0
 80024d8:	42a6      	cmp	r6, r4
 80024da:	d109      	bne.n	80024f0 <__libc_init_array+0x24>
 80024dc:	4d0b      	ldr	r5, [pc, #44]	; (800250c <__libc_init_array+0x40>)
 80024de:	4c0c      	ldr	r4, [pc, #48]	; (8002510 <__libc_init_array+0x44>)
 80024e0:	f002 fc62 	bl	8004da8 <_init>
 80024e4:	1b64      	subs	r4, r4, r5
 80024e6:	10a4      	asrs	r4, r4, #2
 80024e8:	2600      	movs	r6, #0
 80024ea:	42a6      	cmp	r6, r4
 80024ec:	d105      	bne.n	80024fa <__libc_init_array+0x2e>
 80024ee:	bd70      	pop	{r4, r5, r6, pc}
 80024f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80024f4:	4798      	blx	r3
 80024f6:	3601      	adds	r6, #1
 80024f8:	e7ee      	b.n	80024d8 <__libc_init_array+0xc>
 80024fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80024fe:	4798      	blx	r3
 8002500:	3601      	adds	r6, #1
 8002502:	e7f2      	b.n	80024ea <__libc_init_array+0x1e>
 8002504:	080051b4 	.word	0x080051b4
 8002508:	080051b4 	.word	0x080051b4
 800250c:	080051b4 	.word	0x080051b4
 8002510:	080051b8 	.word	0x080051b8

08002514 <memset>:
 8002514:	4402      	add	r2, r0
 8002516:	4603      	mov	r3, r0
 8002518:	4293      	cmp	r3, r2
 800251a:	d100      	bne.n	800251e <memset+0xa>
 800251c:	4770      	bx	lr
 800251e:	f803 1b01 	strb.w	r1, [r3], #1
 8002522:	e7f9      	b.n	8002518 <memset+0x4>

08002524 <__cvt>:
 8002524:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002526:	ed2d 8b02 	vpush	{d8}
 800252a:	eeb0 8b40 	vmov.f64	d8, d0
 800252e:	b085      	sub	sp, #20
 8002530:	4617      	mov	r7, r2
 8002532:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8002534:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8002536:	ee18 2a90 	vmov	r2, s17
 800253a:	f025 0520 	bic.w	r5, r5, #32
 800253e:	2a00      	cmp	r2, #0
 8002540:	bfb6      	itet	lt
 8002542:	222d      	movlt	r2, #45	; 0x2d
 8002544:	2200      	movge	r2, #0
 8002546:	eeb1 8b40 	vneglt.f64	d8, d0
 800254a:	2d46      	cmp	r5, #70	; 0x46
 800254c:	460c      	mov	r4, r1
 800254e:	701a      	strb	r2, [r3, #0]
 8002550:	d004      	beq.n	800255c <__cvt+0x38>
 8002552:	2d45      	cmp	r5, #69	; 0x45
 8002554:	d100      	bne.n	8002558 <__cvt+0x34>
 8002556:	3401      	adds	r4, #1
 8002558:	2102      	movs	r1, #2
 800255a:	e000      	b.n	800255e <__cvt+0x3a>
 800255c:	2103      	movs	r1, #3
 800255e:	ab03      	add	r3, sp, #12
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	ab02      	add	r3, sp, #8
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	4622      	mov	r2, r4
 8002568:	4633      	mov	r3, r6
 800256a:	eeb0 0b48 	vmov.f64	d0, d8
 800256e:	f000 fcab 	bl	8002ec8 <_dtoa_r>
 8002572:	2d47      	cmp	r5, #71	; 0x47
 8002574:	d109      	bne.n	800258a <__cvt+0x66>
 8002576:	07fb      	lsls	r3, r7, #31
 8002578:	d407      	bmi.n	800258a <__cvt+0x66>
 800257a:	9b03      	ldr	r3, [sp, #12]
 800257c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800257e:	1a1b      	subs	r3, r3, r0
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	b005      	add	sp, #20
 8002584:	ecbd 8b02 	vpop	{d8}
 8002588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800258a:	2d46      	cmp	r5, #70	; 0x46
 800258c:	eb00 0204 	add.w	r2, r0, r4
 8002590:	d10c      	bne.n	80025ac <__cvt+0x88>
 8002592:	7803      	ldrb	r3, [r0, #0]
 8002594:	2b30      	cmp	r3, #48	; 0x30
 8002596:	d107      	bne.n	80025a8 <__cvt+0x84>
 8002598:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800259c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025a0:	bf1c      	itt	ne
 80025a2:	f1c4 0401 	rsbne	r4, r4, #1
 80025a6:	6034      	strne	r4, [r6, #0]
 80025a8:	6833      	ldr	r3, [r6, #0]
 80025aa:	441a      	add	r2, r3
 80025ac:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80025b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b4:	bf08      	it	eq
 80025b6:	9203      	streq	r2, [sp, #12]
 80025b8:	2130      	movs	r1, #48	; 0x30
 80025ba:	9b03      	ldr	r3, [sp, #12]
 80025bc:	4293      	cmp	r3, r2
 80025be:	d2dc      	bcs.n	800257a <__cvt+0x56>
 80025c0:	1c5c      	adds	r4, r3, #1
 80025c2:	9403      	str	r4, [sp, #12]
 80025c4:	7019      	strb	r1, [r3, #0]
 80025c6:	e7f8      	b.n	80025ba <__cvt+0x96>

080025c8 <__exponent>:
 80025c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025ca:	4603      	mov	r3, r0
 80025cc:	2900      	cmp	r1, #0
 80025ce:	bfb8      	it	lt
 80025d0:	4249      	neglt	r1, r1
 80025d2:	f803 2b02 	strb.w	r2, [r3], #2
 80025d6:	bfb4      	ite	lt
 80025d8:	222d      	movlt	r2, #45	; 0x2d
 80025da:	222b      	movge	r2, #43	; 0x2b
 80025dc:	2909      	cmp	r1, #9
 80025de:	7042      	strb	r2, [r0, #1]
 80025e0:	dd2a      	ble.n	8002638 <__exponent+0x70>
 80025e2:	f10d 0407 	add.w	r4, sp, #7
 80025e6:	46a4      	mov	ip, r4
 80025e8:	270a      	movs	r7, #10
 80025ea:	46a6      	mov	lr, r4
 80025ec:	460a      	mov	r2, r1
 80025ee:	fb91 f6f7 	sdiv	r6, r1, r7
 80025f2:	fb07 1516 	mls	r5, r7, r6, r1
 80025f6:	3530      	adds	r5, #48	; 0x30
 80025f8:	2a63      	cmp	r2, #99	; 0x63
 80025fa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80025fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8002602:	4631      	mov	r1, r6
 8002604:	dcf1      	bgt.n	80025ea <__exponent+0x22>
 8002606:	3130      	adds	r1, #48	; 0x30
 8002608:	f1ae 0502 	sub.w	r5, lr, #2
 800260c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002610:	1c44      	adds	r4, r0, #1
 8002612:	4629      	mov	r1, r5
 8002614:	4561      	cmp	r1, ip
 8002616:	d30a      	bcc.n	800262e <__exponent+0x66>
 8002618:	f10d 0209 	add.w	r2, sp, #9
 800261c:	eba2 020e 	sub.w	r2, r2, lr
 8002620:	4565      	cmp	r5, ip
 8002622:	bf88      	it	hi
 8002624:	2200      	movhi	r2, #0
 8002626:	4413      	add	r3, r2
 8002628:	1a18      	subs	r0, r3, r0
 800262a:	b003      	add	sp, #12
 800262c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800262e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002632:	f804 2f01 	strb.w	r2, [r4, #1]!
 8002636:	e7ed      	b.n	8002614 <__exponent+0x4c>
 8002638:	2330      	movs	r3, #48	; 0x30
 800263a:	3130      	adds	r1, #48	; 0x30
 800263c:	7083      	strb	r3, [r0, #2]
 800263e:	70c1      	strb	r1, [r0, #3]
 8002640:	1d03      	adds	r3, r0, #4
 8002642:	e7f1      	b.n	8002628 <__exponent+0x60>
 8002644:	0000      	movs	r0, r0
	...

08002648 <_printf_float>:
 8002648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800264c:	b08b      	sub	sp, #44	; 0x2c
 800264e:	460c      	mov	r4, r1
 8002650:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8002654:	4616      	mov	r6, r2
 8002656:	461f      	mov	r7, r3
 8002658:	4605      	mov	r5, r0
 800265a:	f001 f9b7 	bl	80039cc <_localeconv_r>
 800265e:	f8d0 b000 	ldr.w	fp, [r0]
 8002662:	4658      	mov	r0, fp
 8002664:	f7fd fe3c 	bl	80002e0 <strlen>
 8002668:	2300      	movs	r3, #0
 800266a:	9308      	str	r3, [sp, #32]
 800266c:	f8d8 3000 	ldr.w	r3, [r8]
 8002670:	f894 9018 	ldrb.w	r9, [r4, #24]
 8002674:	6822      	ldr	r2, [r4, #0]
 8002676:	3307      	adds	r3, #7
 8002678:	f023 0307 	bic.w	r3, r3, #7
 800267c:	f103 0108 	add.w	r1, r3, #8
 8002680:	f8c8 1000 	str.w	r1, [r8]
 8002684:	4682      	mov	sl, r0
 8002686:	e9d3 0100 	ldrd	r0, r1, [r3]
 800268a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800268e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80028f0 <_printf_float+0x2a8>
 8002692:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8002696:	eeb0 6bc0 	vabs.f64	d6, d0
 800269a:	eeb4 6b47 	vcmp.f64	d6, d7
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	dd24      	ble.n	80026ee <_printf_float+0xa6>
 80026a4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	d502      	bpl.n	80026b4 <_printf_float+0x6c>
 80026ae:	232d      	movs	r3, #45	; 0x2d
 80026b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80026b4:	4b90      	ldr	r3, [pc, #576]	; (80028f8 <_printf_float+0x2b0>)
 80026b6:	4891      	ldr	r0, [pc, #580]	; (80028fc <_printf_float+0x2b4>)
 80026b8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80026bc:	bf94      	ite	ls
 80026be:	4698      	movls	r8, r3
 80026c0:	4680      	movhi	r8, r0
 80026c2:	2303      	movs	r3, #3
 80026c4:	6123      	str	r3, [r4, #16]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	2300      	movs	r3, #0
 80026cc:	6022      	str	r2, [r4, #0]
 80026ce:	9304      	str	r3, [sp, #16]
 80026d0:	9700      	str	r7, [sp, #0]
 80026d2:	4633      	mov	r3, r6
 80026d4:	aa09      	add	r2, sp, #36	; 0x24
 80026d6:	4621      	mov	r1, r4
 80026d8:	4628      	mov	r0, r5
 80026da:	f000 f9d3 	bl	8002a84 <_printf_common>
 80026de:	3001      	adds	r0, #1
 80026e0:	f040 808a 	bne.w	80027f8 <_printf_float+0x1b0>
 80026e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026e8:	b00b      	add	sp, #44	; 0x2c
 80026ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ee:	eeb4 0b40 	vcmp.f64	d0, d0
 80026f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f6:	d709      	bvc.n	800270c <_printf_float+0xc4>
 80026f8:	ee10 3a90 	vmov	r3, s1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bfbc      	itt	lt
 8002700:	232d      	movlt	r3, #45	; 0x2d
 8002702:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002706:	487e      	ldr	r0, [pc, #504]	; (8002900 <_printf_float+0x2b8>)
 8002708:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <_printf_float+0x2bc>)
 800270a:	e7d5      	b.n	80026b8 <_printf_float+0x70>
 800270c:	6863      	ldr	r3, [r4, #4]
 800270e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8002712:	9104      	str	r1, [sp, #16]
 8002714:	1c59      	adds	r1, r3, #1
 8002716:	d13c      	bne.n	8002792 <_printf_float+0x14a>
 8002718:	2306      	movs	r3, #6
 800271a:	6063      	str	r3, [r4, #4]
 800271c:	2300      	movs	r3, #0
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	ab08      	add	r3, sp, #32
 8002722:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002726:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800272a:	ab07      	add	r3, sp, #28
 800272c:	6861      	ldr	r1, [r4, #4]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	6022      	str	r2, [r4, #0]
 8002732:	f10d 031b 	add.w	r3, sp, #27
 8002736:	4628      	mov	r0, r5
 8002738:	f7ff fef4 	bl	8002524 <__cvt>
 800273c:	9b04      	ldr	r3, [sp, #16]
 800273e:	9907      	ldr	r1, [sp, #28]
 8002740:	2b47      	cmp	r3, #71	; 0x47
 8002742:	4680      	mov	r8, r0
 8002744:	d108      	bne.n	8002758 <_printf_float+0x110>
 8002746:	1cc8      	adds	r0, r1, #3
 8002748:	db02      	blt.n	8002750 <_printf_float+0x108>
 800274a:	6863      	ldr	r3, [r4, #4]
 800274c:	4299      	cmp	r1, r3
 800274e:	dd41      	ble.n	80027d4 <_printf_float+0x18c>
 8002750:	f1a9 0902 	sub.w	r9, r9, #2
 8002754:	fa5f f989 	uxtb.w	r9, r9
 8002758:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800275c:	d820      	bhi.n	80027a0 <_printf_float+0x158>
 800275e:	3901      	subs	r1, #1
 8002760:	464a      	mov	r2, r9
 8002762:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002766:	9107      	str	r1, [sp, #28]
 8002768:	f7ff ff2e 	bl	80025c8 <__exponent>
 800276c:	9a08      	ldr	r2, [sp, #32]
 800276e:	9004      	str	r0, [sp, #16]
 8002770:	1813      	adds	r3, r2, r0
 8002772:	2a01      	cmp	r2, #1
 8002774:	6123      	str	r3, [r4, #16]
 8002776:	dc02      	bgt.n	800277e <_printf_float+0x136>
 8002778:	6822      	ldr	r2, [r4, #0]
 800277a:	07d2      	lsls	r2, r2, #31
 800277c:	d501      	bpl.n	8002782 <_printf_float+0x13a>
 800277e:	3301      	adds	r3, #1
 8002780:	6123      	str	r3, [r4, #16]
 8002782:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0a2      	beq.n	80026d0 <_printf_float+0x88>
 800278a:	232d      	movs	r3, #45	; 0x2d
 800278c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002790:	e79e      	b.n	80026d0 <_printf_float+0x88>
 8002792:	9904      	ldr	r1, [sp, #16]
 8002794:	2947      	cmp	r1, #71	; 0x47
 8002796:	d1c1      	bne.n	800271c <_printf_float+0xd4>
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1bf      	bne.n	800271c <_printf_float+0xd4>
 800279c:	2301      	movs	r3, #1
 800279e:	e7bc      	b.n	800271a <_printf_float+0xd2>
 80027a0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80027a4:	d118      	bne.n	80027d8 <_printf_float+0x190>
 80027a6:	2900      	cmp	r1, #0
 80027a8:	6863      	ldr	r3, [r4, #4]
 80027aa:	dd0b      	ble.n	80027c4 <_printf_float+0x17c>
 80027ac:	6121      	str	r1, [r4, #16]
 80027ae:	b913      	cbnz	r3, 80027b6 <_printf_float+0x16e>
 80027b0:	6822      	ldr	r2, [r4, #0]
 80027b2:	07d0      	lsls	r0, r2, #31
 80027b4:	d502      	bpl.n	80027bc <_printf_float+0x174>
 80027b6:	3301      	adds	r3, #1
 80027b8:	440b      	add	r3, r1
 80027ba:	6123      	str	r3, [r4, #16]
 80027bc:	2300      	movs	r3, #0
 80027be:	65a1      	str	r1, [r4, #88]	; 0x58
 80027c0:	9304      	str	r3, [sp, #16]
 80027c2:	e7de      	b.n	8002782 <_printf_float+0x13a>
 80027c4:	b913      	cbnz	r3, 80027cc <_printf_float+0x184>
 80027c6:	6822      	ldr	r2, [r4, #0]
 80027c8:	07d2      	lsls	r2, r2, #31
 80027ca:	d501      	bpl.n	80027d0 <_printf_float+0x188>
 80027cc:	3302      	adds	r3, #2
 80027ce:	e7f4      	b.n	80027ba <_printf_float+0x172>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e7f2      	b.n	80027ba <_printf_float+0x172>
 80027d4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80027d8:	9b08      	ldr	r3, [sp, #32]
 80027da:	4299      	cmp	r1, r3
 80027dc:	db05      	blt.n	80027ea <_printf_float+0x1a2>
 80027de:	6823      	ldr	r3, [r4, #0]
 80027e0:	6121      	str	r1, [r4, #16]
 80027e2:	07d8      	lsls	r0, r3, #31
 80027e4:	d5ea      	bpl.n	80027bc <_printf_float+0x174>
 80027e6:	1c4b      	adds	r3, r1, #1
 80027e8:	e7e7      	b.n	80027ba <_printf_float+0x172>
 80027ea:	2900      	cmp	r1, #0
 80027ec:	bfd4      	ite	le
 80027ee:	f1c1 0202 	rsble	r2, r1, #2
 80027f2:	2201      	movgt	r2, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	e7e0      	b.n	80027ba <_printf_float+0x172>
 80027f8:	6823      	ldr	r3, [r4, #0]
 80027fa:	055a      	lsls	r2, r3, #21
 80027fc:	d407      	bmi.n	800280e <_printf_float+0x1c6>
 80027fe:	6923      	ldr	r3, [r4, #16]
 8002800:	4642      	mov	r2, r8
 8002802:	4631      	mov	r1, r6
 8002804:	4628      	mov	r0, r5
 8002806:	47b8      	blx	r7
 8002808:	3001      	adds	r0, #1
 800280a:	d12a      	bne.n	8002862 <_printf_float+0x21a>
 800280c:	e76a      	b.n	80026e4 <_printf_float+0x9c>
 800280e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8002812:	f240 80e2 	bls.w	80029da <_printf_float+0x392>
 8002816:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800281a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800281e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002822:	d133      	bne.n	800288c <_printf_float+0x244>
 8002824:	4a38      	ldr	r2, [pc, #224]	; (8002908 <_printf_float+0x2c0>)
 8002826:	2301      	movs	r3, #1
 8002828:	4631      	mov	r1, r6
 800282a:	4628      	mov	r0, r5
 800282c:	47b8      	blx	r7
 800282e:	3001      	adds	r0, #1
 8002830:	f43f af58 	beq.w	80026e4 <_printf_float+0x9c>
 8002834:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8002838:	429a      	cmp	r2, r3
 800283a:	db02      	blt.n	8002842 <_printf_float+0x1fa>
 800283c:	6823      	ldr	r3, [r4, #0]
 800283e:	07d8      	lsls	r0, r3, #31
 8002840:	d50f      	bpl.n	8002862 <_printf_float+0x21a>
 8002842:	4653      	mov	r3, sl
 8002844:	465a      	mov	r2, fp
 8002846:	4631      	mov	r1, r6
 8002848:	4628      	mov	r0, r5
 800284a:	47b8      	blx	r7
 800284c:	3001      	adds	r0, #1
 800284e:	f43f af49 	beq.w	80026e4 <_printf_float+0x9c>
 8002852:	f04f 0800 	mov.w	r8, #0
 8002856:	f104 091a 	add.w	r9, r4, #26
 800285a:	9b08      	ldr	r3, [sp, #32]
 800285c:	3b01      	subs	r3, #1
 800285e:	4543      	cmp	r3, r8
 8002860:	dc09      	bgt.n	8002876 <_printf_float+0x22e>
 8002862:	6823      	ldr	r3, [r4, #0]
 8002864:	079b      	lsls	r3, r3, #30
 8002866:	f100 8108 	bmi.w	8002a7a <_printf_float+0x432>
 800286a:	68e0      	ldr	r0, [r4, #12]
 800286c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800286e:	4298      	cmp	r0, r3
 8002870:	bfb8      	it	lt
 8002872:	4618      	movlt	r0, r3
 8002874:	e738      	b.n	80026e8 <_printf_float+0xa0>
 8002876:	2301      	movs	r3, #1
 8002878:	464a      	mov	r2, r9
 800287a:	4631      	mov	r1, r6
 800287c:	4628      	mov	r0, r5
 800287e:	47b8      	blx	r7
 8002880:	3001      	adds	r0, #1
 8002882:	f43f af2f 	beq.w	80026e4 <_printf_float+0x9c>
 8002886:	f108 0801 	add.w	r8, r8, #1
 800288a:	e7e6      	b.n	800285a <_printf_float+0x212>
 800288c:	9b07      	ldr	r3, [sp, #28]
 800288e:	2b00      	cmp	r3, #0
 8002890:	dc3c      	bgt.n	800290c <_printf_float+0x2c4>
 8002892:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <_printf_float+0x2c0>)
 8002894:	2301      	movs	r3, #1
 8002896:	4631      	mov	r1, r6
 8002898:	4628      	mov	r0, r5
 800289a:	47b8      	blx	r7
 800289c:	3001      	adds	r0, #1
 800289e:	f43f af21 	beq.w	80026e4 <_printf_float+0x9c>
 80028a2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	d102      	bne.n	80028b0 <_printf_float+0x268>
 80028aa:	6823      	ldr	r3, [r4, #0]
 80028ac:	07d9      	lsls	r1, r3, #31
 80028ae:	d5d8      	bpl.n	8002862 <_printf_float+0x21a>
 80028b0:	4653      	mov	r3, sl
 80028b2:	465a      	mov	r2, fp
 80028b4:	4631      	mov	r1, r6
 80028b6:	4628      	mov	r0, r5
 80028b8:	47b8      	blx	r7
 80028ba:	3001      	adds	r0, #1
 80028bc:	f43f af12 	beq.w	80026e4 <_printf_float+0x9c>
 80028c0:	f04f 0900 	mov.w	r9, #0
 80028c4:	f104 0a1a 	add.w	sl, r4, #26
 80028c8:	9b07      	ldr	r3, [sp, #28]
 80028ca:	425b      	negs	r3, r3
 80028cc:	454b      	cmp	r3, r9
 80028ce:	dc01      	bgt.n	80028d4 <_printf_float+0x28c>
 80028d0:	9b08      	ldr	r3, [sp, #32]
 80028d2:	e795      	b.n	8002800 <_printf_float+0x1b8>
 80028d4:	2301      	movs	r3, #1
 80028d6:	4652      	mov	r2, sl
 80028d8:	4631      	mov	r1, r6
 80028da:	4628      	mov	r0, r5
 80028dc:	47b8      	blx	r7
 80028de:	3001      	adds	r0, #1
 80028e0:	f43f af00 	beq.w	80026e4 <_printf_float+0x9c>
 80028e4:	f109 0901 	add.w	r9, r9, #1
 80028e8:	e7ee      	b.n	80028c8 <_printf_float+0x280>
 80028ea:	bf00      	nop
 80028ec:	f3af 8000 	nop.w
 80028f0:	ffffffff 	.word	0xffffffff
 80028f4:	7fefffff 	.word	0x7fefffff
 80028f8:	08004dd4 	.word	0x08004dd4
 80028fc:	08004dd8 	.word	0x08004dd8
 8002900:	08004de0 	.word	0x08004de0
 8002904:	08004ddc 	.word	0x08004ddc
 8002908:	08004de4 	.word	0x08004de4
 800290c:	9a08      	ldr	r2, [sp, #32]
 800290e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002910:	429a      	cmp	r2, r3
 8002912:	bfa8      	it	ge
 8002914:	461a      	movge	r2, r3
 8002916:	2a00      	cmp	r2, #0
 8002918:	4691      	mov	r9, r2
 800291a:	dc38      	bgt.n	800298e <_printf_float+0x346>
 800291c:	2300      	movs	r3, #0
 800291e:	9305      	str	r3, [sp, #20]
 8002920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002924:	f104 021a 	add.w	r2, r4, #26
 8002928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800292a:	9905      	ldr	r1, [sp, #20]
 800292c:	9304      	str	r3, [sp, #16]
 800292e:	eba3 0309 	sub.w	r3, r3, r9
 8002932:	428b      	cmp	r3, r1
 8002934:	dc33      	bgt.n	800299e <_printf_float+0x356>
 8002936:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800293a:	429a      	cmp	r2, r3
 800293c:	db3c      	blt.n	80029b8 <_printf_float+0x370>
 800293e:	6823      	ldr	r3, [r4, #0]
 8002940:	07da      	lsls	r2, r3, #31
 8002942:	d439      	bmi.n	80029b8 <_printf_float+0x370>
 8002944:	9a08      	ldr	r2, [sp, #32]
 8002946:	9b04      	ldr	r3, [sp, #16]
 8002948:	9907      	ldr	r1, [sp, #28]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	eba2 0901 	sub.w	r9, r2, r1
 8002950:	4599      	cmp	r9, r3
 8002952:	bfa8      	it	ge
 8002954:	4699      	movge	r9, r3
 8002956:	f1b9 0f00 	cmp.w	r9, #0
 800295a:	dc35      	bgt.n	80029c8 <_printf_float+0x380>
 800295c:	f04f 0800 	mov.w	r8, #0
 8002960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002964:	f104 0a1a 	add.w	sl, r4, #26
 8002968:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	eba3 0309 	sub.w	r3, r3, r9
 8002972:	4543      	cmp	r3, r8
 8002974:	f77f af75 	ble.w	8002862 <_printf_float+0x21a>
 8002978:	2301      	movs	r3, #1
 800297a:	4652      	mov	r2, sl
 800297c:	4631      	mov	r1, r6
 800297e:	4628      	mov	r0, r5
 8002980:	47b8      	blx	r7
 8002982:	3001      	adds	r0, #1
 8002984:	f43f aeae 	beq.w	80026e4 <_printf_float+0x9c>
 8002988:	f108 0801 	add.w	r8, r8, #1
 800298c:	e7ec      	b.n	8002968 <_printf_float+0x320>
 800298e:	4613      	mov	r3, r2
 8002990:	4631      	mov	r1, r6
 8002992:	4642      	mov	r2, r8
 8002994:	4628      	mov	r0, r5
 8002996:	47b8      	blx	r7
 8002998:	3001      	adds	r0, #1
 800299a:	d1bf      	bne.n	800291c <_printf_float+0x2d4>
 800299c:	e6a2      	b.n	80026e4 <_printf_float+0x9c>
 800299e:	2301      	movs	r3, #1
 80029a0:	4631      	mov	r1, r6
 80029a2:	4628      	mov	r0, r5
 80029a4:	9204      	str	r2, [sp, #16]
 80029a6:	47b8      	blx	r7
 80029a8:	3001      	adds	r0, #1
 80029aa:	f43f ae9b 	beq.w	80026e4 <_printf_float+0x9c>
 80029ae:	9b05      	ldr	r3, [sp, #20]
 80029b0:	9a04      	ldr	r2, [sp, #16]
 80029b2:	3301      	adds	r3, #1
 80029b4:	9305      	str	r3, [sp, #20]
 80029b6:	e7b7      	b.n	8002928 <_printf_float+0x2e0>
 80029b8:	4653      	mov	r3, sl
 80029ba:	465a      	mov	r2, fp
 80029bc:	4631      	mov	r1, r6
 80029be:	4628      	mov	r0, r5
 80029c0:	47b8      	blx	r7
 80029c2:	3001      	adds	r0, #1
 80029c4:	d1be      	bne.n	8002944 <_printf_float+0x2fc>
 80029c6:	e68d      	b.n	80026e4 <_printf_float+0x9c>
 80029c8:	9a04      	ldr	r2, [sp, #16]
 80029ca:	464b      	mov	r3, r9
 80029cc:	4442      	add	r2, r8
 80029ce:	4631      	mov	r1, r6
 80029d0:	4628      	mov	r0, r5
 80029d2:	47b8      	blx	r7
 80029d4:	3001      	adds	r0, #1
 80029d6:	d1c1      	bne.n	800295c <_printf_float+0x314>
 80029d8:	e684      	b.n	80026e4 <_printf_float+0x9c>
 80029da:	9a08      	ldr	r2, [sp, #32]
 80029dc:	2a01      	cmp	r2, #1
 80029de:	dc01      	bgt.n	80029e4 <_printf_float+0x39c>
 80029e0:	07db      	lsls	r3, r3, #31
 80029e2:	d537      	bpl.n	8002a54 <_printf_float+0x40c>
 80029e4:	2301      	movs	r3, #1
 80029e6:	4642      	mov	r2, r8
 80029e8:	4631      	mov	r1, r6
 80029ea:	4628      	mov	r0, r5
 80029ec:	47b8      	blx	r7
 80029ee:	3001      	adds	r0, #1
 80029f0:	f43f ae78 	beq.w	80026e4 <_printf_float+0x9c>
 80029f4:	4653      	mov	r3, sl
 80029f6:	465a      	mov	r2, fp
 80029f8:	4631      	mov	r1, r6
 80029fa:	4628      	mov	r0, r5
 80029fc:	47b8      	blx	r7
 80029fe:	3001      	adds	r0, #1
 8002a00:	f43f ae70 	beq.w	80026e4 <_printf_float+0x9c>
 8002a04:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002a08:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a10:	d01b      	beq.n	8002a4a <_printf_float+0x402>
 8002a12:	9b08      	ldr	r3, [sp, #32]
 8002a14:	f108 0201 	add.w	r2, r8, #1
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	4631      	mov	r1, r6
 8002a1c:	4628      	mov	r0, r5
 8002a1e:	47b8      	blx	r7
 8002a20:	3001      	adds	r0, #1
 8002a22:	d10e      	bne.n	8002a42 <_printf_float+0x3fa>
 8002a24:	e65e      	b.n	80026e4 <_printf_float+0x9c>
 8002a26:	2301      	movs	r3, #1
 8002a28:	464a      	mov	r2, r9
 8002a2a:	4631      	mov	r1, r6
 8002a2c:	4628      	mov	r0, r5
 8002a2e:	47b8      	blx	r7
 8002a30:	3001      	adds	r0, #1
 8002a32:	f43f ae57 	beq.w	80026e4 <_printf_float+0x9c>
 8002a36:	f108 0801 	add.w	r8, r8, #1
 8002a3a:	9b08      	ldr	r3, [sp, #32]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	4543      	cmp	r3, r8
 8002a40:	dcf1      	bgt.n	8002a26 <_printf_float+0x3de>
 8002a42:	9b04      	ldr	r3, [sp, #16]
 8002a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002a48:	e6db      	b.n	8002802 <_printf_float+0x1ba>
 8002a4a:	f04f 0800 	mov.w	r8, #0
 8002a4e:	f104 091a 	add.w	r9, r4, #26
 8002a52:	e7f2      	b.n	8002a3a <_printf_float+0x3f2>
 8002a54:	2301      	movs	r3, #1
 8002a56:	4642      	mov	r2, r8
 8002a58:	e7df      	b.n	8002a1a <_printf_float+0x3d2>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	464a      	mov	r2, r9
 8002a5e:	4631      	mov	r1, r6
 8002a60:	4628      	mov	r0, r5
 8002a62:	47b8      	blx	r7
 8002a64:	3001      	adds	r0, #1
 8002a66:	f43f ae3d 	beq.w	80026e4 <_printf_float+0x9c>
 8002a6a:	f108 0801 	add.w	r8, r8, #1
 8002a6e:	68e3      	ldr	r3, [r4, #12]
 8002a70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002a72:	1a5b      	subs	r3, r3, r1
 8002a74:	4543      	cmp	r3, r8
 8002a76:	dcf0      	bgt.n	8002a5a <_printf_float+0x412>
 8002a78:	e6f7      	b.n	800286a <_printf_float+0x222>
 8002a7a:	f04f 0800 	mov.w	r8, #0
 8002a7e:	f104 0919 	add.w	r9, r4, #25
 8002a82:	e7f4      	b.n	8002a6e <_printf_float+0x426>

08002a84 <_printf_common>:
 8002a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a88:	4616      	mov	r6, r2
 8002a8a:	4699      	mov	r9, r3
 8002a8c:	688a      	ldr	r2, [r1, #8]
 8002a8e:	690b      	ldr	r3, [r1, #16]
 8002a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a94:	4293      	cmp	r3, r2
 8002a96:	bfb8      	it	lt
 8002a98:	4613      	movlt	r3, r2
 8002a9a:	6033      	str	r3, [r6, #0]
 8002a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002aa0:	4607      	mov	r7, r0
 8002aa2:	460c      	mov	r4, r1
 8002aa4:	b10a      	cbz	r2, 8002aaa <_printf_common+0x26>
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	6033      	str	r3, [r6, #0]
 8002aaa:	6823      	ldr	r3, [r4, #0]
 8002aac:	0699      	lsls	r1, r3, #26
 8002aae:	bf42      	ittt	mi
 8002ab0:	6833      	ldrmi	r3, [r6, #0]
 8002ab2:	3302      	addmi	r3, #2
 8002ab4:	6033      	strmi	r3, [r6, #0]
 8002ab6:	6825      	ldr	r5, [r4, #0]
 8002ab8:	f015 0506 	ands.w	r5, r5, #6
 8002abc:	d106      	bne.n	8002acc <_printf_common+0x48>
 8002abe:	f104 0a19 	add.w	sl, r4, #25
 8002ac2:	68e3      	ldr	r3, [r4, #12]
 8002ac4:	6832      	ldr	r2, [r6, #0]
 8002ac6:	1a9b      	subs	r3, r3, r2
 8002ac8:	42ab      	cmp	r3, r5
 8002aca:	dc26      	bgt.n	8002b1a <_printf_common+0x96>
 8002acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002ad0:	1e13      	subs	r3, r2, #0
 8002ad2:	6822      	ldr	r2, [r4, #0]
 8002ad4:	bf18      	it	ne
 8002ad6:	2301      	movne	r3, #1
 8002ad8:	0692      	lsls	r2, r2, #26
 8002ada:	d42b      	bmi.n	8002b34 <_printf_common+0xb0>
 8002adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	4638      	mov	r0, r7
 8002ae4:	47c0      	blx	r8
 8002ae6:	3001      	adds	r0, #1
 8002ae8:	d01e      	beq.n	8002b28 <_printf_common+0xa4>
 8002aea:	6823      	ldr	r3, [r4, #0]
 8002aec:	68e5      	ldr	r5, [r4, #12]
 8002aee:	6832      	ldr	r2, [r6, #0]
 8002af0:	f003 0306 	and.w	r3, r3, #6
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	bf08      	it	eq
 8002af8:	1aad      	subeq	r5, r5, r2
 8002afa:	68a3      	ldr	r3, [r4, #8]
 8002afc:	6922      	ldr	r2, [r4, #16]
 8002afe:	bf0c      	ite	eq
 8002b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b04:	2500      	movne	r5, #0
 8002b06:	4293      	cmp	r3, r2
 8002b08:	bfc4      	itt	gt
 8002b0a:	1a9b      	subgt	r3, r3, r2
 8002b0c:	18ed      	addgt	r5, r5, r3
 8002b0e:	2600      	movs	r6, #0
 8002b10:	341a      	adds	r4, #26
 8002b12:	42b5      	cmp	r5, r6
 8002b14:	d11a      	bne.n	8002b4c <_printf_common+0xc8>
 8002b16:	2000      	movs	r0, #0
 8002b18:	e008      	b.n	8002b2c <_printf_common+0xa8>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	4652      	mov	r2, sl
 8002b1e:	4649      	mov	r1, r9
 8002b20:	4638      	mov	r0, r7
 8002b22:	47c0      	blx	r8
 8002b24:	3001      	adds	r0, #1
 8002b26:	d103      	bne.n	8002b30 <_printf_common+0xac>
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b30:	3501      	adds	r5, #1
 8002b32:	e7c6      	b.n	8002ac2 <_printf_common+0x3e>
 8002b34:	18e1      	adds	r1, r4, r3
 8002b36:	1c5a      	adds	r2, r3, #1
 8002b38:	2030      	movs	r0, #48	; 0x30
 8002b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b3e:	4422      	add	r2, r4
 8002b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b48:	3302      	adds	r3, #2
 8002b4a:	e7c7      	b.n	8002adc <_printf_common+0x58>
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	4622      	mov	r2, r4
 8002b50:	4649      	mov	r1, r9
 8002b52:	4638      	mov	r0, r7
 8002b54:	47c0      	blx	r8
 8002b56:	3001      	adds	r0, #1
 8002b58:	d0e6      	beq.n	8002b28 <_printf_common+0xa4>
 8002b5a:	3601      	adds	r6, #1
 8002b5c:	e7d9      	b.n	8002b12 <_printf_common+0x8e>
	...

08002b60 <_printf_i>:
 8002b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b64:	460c      	mov	r4, r1
 8002b66:	4691      	mov	r9, r2
 8002b68:	7e27      	ldrb	r7, [r4, #24]
 8002b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b6c:	2f78      	cmp	r7, #120	; 0x78
 8002b6e:	4680      	mov	r8, r0
 8002b70:	469a      	mov	sl, r3
 8002b72:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002b76:	d807      	bhi.n	8002b88 <_printf_i+0x28>
 8002b78:	2f62      	cmp	r7, #98	; 0x62
 8002b7a:	d80a      	bhi.n	8002b92 <_printf_i+0x32>
 8002b7c:	2f00      	cmp	r7, #0
 8002b7e:	f000 80d8 	beq.w	8002d32 <_printf_i+0x1d2>
 8002b82:	2f58      	cmp	r7, #88	; 0x58
 8002b84:	f000 80a3 	beq.w	8002cce <_printf_i+0x16e>
 8002b88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002b90:	e03a      	b.n	8002c08 <_printf_i+0xa8>
 8002b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002b96:	2b15      	cmp	r3, #21
 8002b98:	d8f6      	bhi.n	8002b88 <_printf_i+0x28>
 8002b9a:	a001      	add	r0, pc, #4	; (adr r0, 8002ba0 <_printf_i+0x40>)
 8002b9c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002ba0:	08002bf9 	.word	0x08002bf9
 8002ba4:	08002c0d 	.word	0x08002c0d
 8002ba8:	08002b89 	.word	0x08002b89
 8002bac:	08002b89 	.word	0x08002b89
 8002bb0:	08002b89 	.word	0x08002b89
 8002bb4:	08002b89 	.word	0x08002b89
 8002bb8:	08002c0d 	.word	0x08002c0d
 8002bbc:	08002b89 	.word	0x08002b89
 8002bc0:	08002b89 	.word	0x08002b89
 8002bc4:	08002b89 	.word	0x08002b89
 8002bc8:	08002b89 	.word	0x08002b89
 8002bcc:	08002d19 	.word	0x08002d19
 8002bd0:	08002c3d 	.word	0x08002c3d
 8002bd4:	08002cfb 	.word	0x08002cfb
 8002bd8:	08002b89 	.word	0x08002b89
 8002bdc:	08002b89 	.word	0x08002b89
 8002be0:	08002d3b 	.word	0x08002d3b
 8002be4:	08002b89 	.word	0x08002b89
 8002be8:	08002c3d 	.word	0x08002c3d
 8002bec:	08002b89 	.word	0x08002b89
 8002bf0:	08002b89 	.word	0x08002b89
 8002bf4:	08002d03 	.word	0x08002d03
 8002bf8:	680b      	ldr	r3, [r1, #0]
 8002bfa:	1d1a      	adds	r2, r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	600a      	str	r2, [r1, #0]
 8002c00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0a3      	b.n	8002d54 <_printf_i+0x1f4>
 8002c0c:	6825      	ldr	r5, [r4, #0]
 8002c0e:	6808      	ldr	r0, [r1, #0]
 8002c10:	062e      	lsls	r6, r5, #24
 8002c12:	f100 0304 	add.w	r3, r0, #4
 8002c16:	d50a      	bpl.n	8002c2e <_printf_i+0xce>
 8002c18:	6805      	ldr	r5, [r0, #0]
 8002c1a:	600b      	str	r3, [r1, #0]
 8002c1c:	2d00      	cmp	r5, #0
 8002c1e:	da03      	bge.n	8002c28 <_printf_i+0xc8>
 8002c20:	232d      	movs	r3, #45	; 0x2d
 8002c22:	426d      	negs	r5, r5
 8002c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c28:	485e      	ldr	r0, [pc, #376]	; (8002da4 <_printf_i+0x244>)
 8002c2a:	230a      	movs	r3, #10
 8002c2c:	e019      	b.n	8002c62 <_printf_i+0x102>
 8002c2e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002c32:	6805      	ldr	r5, [r0, #0]
 8002c34:	600b      	str	r3, [r1, #0]
 8002c36:	bf18      	it	ne
 8002c38:	b22d      	sxthne	r5, r5
 8002c3a:	e7ef      	b.n	8002c1c <_printf_i+0xbc>
 8002c3c:	680b      	ldr	r3, [r1, #0]
 8002c3e:	6825      	ldr	r5, [r4, #0]
 8002c40:	1d18      	adds	r0, r3, #4
 8002c42:	6008      	str	r0, [r1, #0]
 8002c44:	0628      	lsls	r0, r5, #24
 8002c46:	d501      	bpl.n	8002c4c <_printf_i+0xec>
 8002c48:	681d      	ldr	r5, [r3, #0]
 8002c4a:	e002      	b.n	8002c52 <_printf_i+0xf2>
 8002c4c:	0669      	lsls	r1, r5, #25
 8002c4e:	d5fb      	bpl.n	8002c48 <_printf_i+0xe8>
 8002c50:	881d      	ldrh	r5, [r3, #0]
 8002c52:	4854      	ldr	r0, [pc, #336]	; (8002da4 <_printf_i+0x244>)
 8002c54:	2f6f      	cmp	r7, #111	; 0x6f
 8002c56:	bf0c      	ite	eq
 8002c58:	2308      	moveq	r3, #8
 8002c5a:	230a      	movne	r3, #10
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c62:	6866      	ldr	r6, [r4, #4]
 8002c64:	60a6      	str	r6, [r4, #8]
 8002c66:	2e00      	cmp	r6, #0
 8002c68:	bfa2      	ittt	ge
 8002c6a:	6821      	ldrge	r1, [r4, #0]
 8002c6c:	f021 0104 	bicge.w	r1, r1, #4
 8002c70:	6021      	strge	r1, [r4, #0]
 8002c72:	b90d      	cbnz	r5, 8002c78 <_printf_i+0x118>
 8002c74:	2e00      	cmp	r6, #0
 8002c76:	d04d      	beq.n	8002d14 <_printf_i+0x1b4>
 8002c78:	4616      	mov	r6, r2
 8002c7a:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c7e:	fb03 5711 	mls	r7, r3, r1, r5
 8002c82:	5dc7      	ldrb	r7, [r0, r7]
 8002c84:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c88:	462f      	mov	r7, r5
 8002c8a:	42bb      	cmp	r3, r7
 8002c8c:	460d      	mov	r5, r1
 8002c8e:	d9f4      	bls.n	8002c7a <_printf_i+0x11a>
 8002c90:	2b08      	cmp	r3, #8
 8002c92:	d10b      	bne.n	8002cac <_printf_i+0x14c>
 8002c94:	6823      	ldr	r3, [r4, #0]
 8002c96:	07df      	lsls	r7, r3, #31
 8002c98:	d508      	bpl.n	8002cac <_printf_i+0x14c>
 8002c9a:	6923      	ldr	r3, [r4, #16]
 8002c9c:	6861      	ldr	r1, [r4, #4]
 8002c9e:	4299      	cmp	r1, r3
 8002ca0:	bfde      	ittt	le
 8002ca2:	2330      	movle	r3, #48	; 0x30
 8002ca4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002ca8:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002cac:	1b92      	subs	r2, r2, r6
 8002cae:	6122      	str	r2, [r4, #16]
 8002cb0:	f8cd a000 	str.w	sl, [sp]
 8002cb4:	464b      	mov	r3, r9
 8002cb6:	aa03      	add	r2, sp, #12
 8002cb8:	4621      	mov	r1, r4
 8002cba:	4640      	mov	r0, r8
 8002cbc:	f7ff fee2 	bl	8002a84 <_printf_common>
 8002cc0:	3001      	adds	r0, #1
 8002cc2:	d14c      	bne.n	8002d5e <_printf_i+0x1fe>
 8002cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cc8:	b004      	add	sp, #16
 8002cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002cce:	4835      	ldr	r0, [pc, #212]	; (8002da4 <_printf_i+0x244>)
 8002cd0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002cd4:	6823      	ldr	r3, [r4, #0]
 8002cd6:	680e      	ldr	r6, [r1, #0]
 8002cd8:	061f      	lsls	r7, r3, #24
 8002cda:	f856 5b04 	ldr.w	r5, [r6], #4
 8002cde:	600e      	str	r6, [r1, #0]
 8002ce0:	d514      	bpl.n	8002d0c <_printf_i+0x1ac>
 8002ce2:	07d9      	lsls	r1, r3, #31
 8002ce4:	bf44      	itt	mi
 8002ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8002cea:	6023      	strmi	r3, [r4, #0]
 8002cec:	b91d      	cbnz	r5, 8002cf6 <_printf_i+0x196>
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	f023 0320 	bic.w	r3, r3, #32
 8002cf4:	6023      	str	r3, [r4, #0]
 8002cf6:	2310      	movs	r3, #16
 8002cf8:	e7b0      	b.n	8002c5c <_printf_i+0xfc>
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	f043 0320 	orr.w	r3, r3, #32
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	2378      	movs	r3, #120	; 0x78
 8002d04:	4828      	ldr	r0, [pc, #160]	; (8002da8 <_printf_i+0x248>)
 8002d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002d0a:	e7e3      	b.n	8002cd4 <_printf_i+0x174>
 8002d0c:	065e      	lsls	r6, r3, #25
 8002d0e:	bf48      	it	mi
 8002d10:	b2ad      	uxthmi	r5, r5
 8002d12:	e7e6      	b.n	8002ce2 <_printf_i+0x182>
 8002d14:	4616      	mov	r6, r2
 8002d16:	e7bb      	b.n	8002c90 <_printf_i+0x130>
 8002d18:	680b      	ldr	r3, [r1, #0]
 8002d1a:	6826      	ldr	r6, [r4, #0]
 8002d1c:	6960      	ldr	r0, [r4, #20]
 8002d1e:	1d1d      	adds	r5, r3, #4
 8002d20:	600d      	str	r5, [r1, #0]
 8002d22:	0635      	lsls	r5, r6, #24
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	d501      	bpl.n	8002d2c <_printf_i+0x1cc>
 8002d28:	6018      	str	r0, [r3, #0]
 8002d2a:	e002      	b.n	8002d32 <_printf_i+0x1d2>
 8002d2c:	0671      	lsls	r1, r6, #25
 8002d2e:	d5fb      	bpl.n	8002d28 <_printf_i+0x1c8>
 8002d30:	8018      	strh	r0, [r3, #0]
 8002d32:	2300      	movs	r3, #0
 8002d34:	6123      	str	r3, [r4, #16]
 8002d36:	4616      	mov	r6, r2
 8002d38:	e7ba      	b.n	8002cb0 <_printf_i+0x150>
 8002d3a:	680b      	ldr	r3, [r1, #0]
 8002d3c:	1d1a      	adds	r2, r3, #4
 8002d3e:	600a      	str	r2, [r1, #0]
 8002d40:	681e      	ldr	r6, [r3, #0]
 8002d42:	6862      	ldr	r2, [r4, #4]
 8002d44:	2100      	movs	r1, #0
 8002d46:	4630      	mov	r0, r6
 8002d48:	f7fd fad2 	bl	80002f0 <memchr>
 8002d4c:	b108      	cbz	r0, 8002d52 <_printf_i+0x1f2>
 8002d4e:	1b80      	subs	r0, r0, r6
 8002d50:	6060      	str	r0, [r4, #4]
 8002d52:	6863      	ldr	r3, [r4, #4]
 8002d54:	6123      	str	r3, [r4, #16]
 8002d56:	2300      	movs	r3, #0
 8002d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d5c:	e7a8      	b.n	8002cb0 <_printf_i+0x150>
 8002d5e:	6923      	ldr	r3, [r4, #16]
 8002d60:	4632      	mov	r2, r6
 8002d62:	4649      	mov	r1, r9
 8002d64:	4640      	mov	r0, r8
 8002d66:	47d0      	blx	sl
 8002d68:	3001      	adds	r0, #1
 8002d6a:	d0ab      	beq.n	8002cc4 <_printf_i+0x164>
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	079b      	lsls	r3, r3, #30
 8002d70:	d413      	bmi.n	8002d9a <_printf_i+0x23a>
 8002d72:	68e0      	ldr	r0, [r4, #12]
 8002d74:	9b03      	ldr	r3, [sp, #12]
 8002d76:	4298      	cmp	r0, r3
 8002d78:	bfb8      	it	lt
 8002d7a:	4618      	movlt	r0, r3
 8002d7c:	e7a4      	b.n	8002cc8 <_printf_i+0x168>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	4632      	mov	r2, r6
 8002d82:	4649      	mov	r1, r9
 8002d84:	4640      	mov	r0, r8
 8002d86:	47d0      	blx	sl
 8002d88:	3001      	adds	r0, #1
 8002d8a:	d09b      	beq.n	8002cc4 <_printf_i+0x164>
 8002d8c:	3501      	adds	r5, #1
 8002d8e:	68e3      	ldr	r3, [r4, #12]
 8002d90:	9903      	ldr	r1, [sp, #12]
 8002d92:	1a5b      	subs	r3, r3, r1
 8002d94:	42ab      	cmp	r3, r5
 8002d96:	dcf2      	bgt.n	8002d7e <_printf_i+0x21e>
 8002d98:	e7eb      	b.n	8002d72 <_printf_i+0x212>
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	f104 0619 	add.w	r6, r4, #25
 8002da0:	e7f5      	b.n	8002d8e <_printf_i+0x22e>
 8002da2:	bf00      	nop
 8002da4:	08004de6 	.word	0x08004de6
 8002da8:	08004df7 	.word	0x08004df7

08002dac <quorem>:
 8002dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002db0:	6903      	ldr	r3, [r0, #16]
 8002db2:	690c      	ldr	r4, [r1, #16]
 8002db4:	42a3      	cmp	r3, r4
 8002db6:	4607      	mov	r7, r0
 8002db8:	f2c0 8081 	blt.w	8002ebe <quorem+0x112>
 8002dbc:	3c01      	subs	r4, #1
 8002dbe:	f101 0814 	add.w	r8, r1, #20
 8002dc2:	f100 0514 	add.w	r5, r0, #20
 8002dc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8002dd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8002ddc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002de0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002de4:	d331      	bcc.n	8002e4a <quorem+0x9e>
 8002de6:	f04f 0e00 	mov.w	lr, #0
 8002dea:	4640      	mov	r0, r8
 8002dec:	46ac      	mov	ip, r5
 8002dee:	46f2      	mov	sl, lr
 8002df0:	f850 2b04 	ldr.w	r2, [r0], #4
 8002df4:	b293      	uxth	r3, r2
 8002df6:	fb06 e303 	mla	r3, r6, r3, lr
 8002dfa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	ebaa 0303 	sub.w	r3, sl, r3
 8002e04:	0c12      	lsrs	r2, r2, #16
 8002e06:	f8dc a000 	ldr.w	sl, [ip]
 8002e0a:	fb06 e202 	mla	r2, r6, r2, lr
 8002e0e:	fa13 f38a 	uxtah	r3, r3, sl
 8002e12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8002e16:	fa1f fa82 	uxth.w	sl, r2
 8002e1a:	f8dc 2000 	ldr.w	r2, [ip]
 8002e1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8002e22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e2c:	4581      	cmp	r9, r0
 8002e2e:	f84c 3b04 	str.w	r3, [ip], #4
 8002e32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8002e36:	d2db      	bcs.n	8002df0 <quorem+0x44>
 8002e38:	f855 300b 	ldr.w	r3, [r5, fp]
 8002e3c:	b92b      	cbnz	r3, 8002e4a <quorem+0x9e>
 8002e3e:	9b01      	ldr	r3, [sp, #4]
 8002e40:	3b04      	subs	r3, #4
 8002e42:	429d      	cmp	r5, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	d32e      	bcc.n	8002ea6 <quorem+0xfa>
 8002e48:	613c      	str	r4, [r7, #16]
 8002e4a:	4638      	mov	r0, r7
 8002e4c:	f001 f856 	bl	8003efc <__mcmp>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	db24      	blt.n	8002e9e <quorem+0xf2>
 8002e54:	3601      	adds	r6, #1
 8002e56:	4628      	mov	r0, r5
 8002e58:	f04f 0c00 	mov.w	ip, #0
 8002e5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8002e60:	f8d0 e000 	ldr.w	lr, [r0]
 8002e64:	b293      	uxth	r3, r2
 8002e66:	ebac 0303 	sub.w	r3, ip, r3
 8002e6a:	0c12      	lsrs	r2, r2, #16
 8002e6c:	fa13 f38e 	uxtah	r3, r3, lr
 8002e70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8002e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002e7e:	45c1      	cmp	r9, r8
 8002e80:	f840 3b04 	str.w	r3, [r0], #4
 8002e84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8002e88:	d2e8      	bcs.n	8002e5c <quorem+0xb0>
 8002e8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002e8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8002e92:	b922      	cbnz	r2, 8002e9e <quorem+0xf2>
 8002e94:	3b04      	subs	r3, #4
 8002e96:	429d      	cmp	r5, r3
 8002e98:	461a      	mov	r2, r3
 8002e9a:	d30a      	bcc.n	8002eb2 <quorem+0x106>
 8002e9c:	613c      	str	r4, [r7, #16]
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	b003      	add	sp, #12
 8002ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	3b04      	subs	r3, #4
 8002eaa:	2a00      	cmp	r2, #0
 8002eac:	d1cc      	bne.n	8002e48 <quorem+0x9c>
 8002eae:	3c01      	subs	r4, #1
 8002eb0:	e7c7      	b.n	8002e42 <quorem+0x96>
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	3b04      	subs	r3, #4
 8002eb6:	2a00      	cmp	r2, #0
 8002eb8:	d1f0      	bne.n	8002e9c <quorem+0xf0>
 8002eba:	3c01      	subs	r4, #1
 8002ebc:	e7eb      	b.n	8002e96 <quorem+0xea>
 8002ebe:	2000      	movs	r0, #0
 8002ec0:	e7ee      	b.n	8002ea0 <quorem+0xf4>
 8002ec2:	0000      	movs	r0, r0
 8002ec4:	0000      	movs	r0, r0
	...

08002ec8 <_dtoa_r>:
 8002ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ecc:	ec59 8b10 	vmov	r8, r9, d0
 8002ed0:	b095      	sub	sp, #84	; 0x54
 8002ed2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002ed4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8002ed6:	9107      	str	r1, [sp, #28]
 8002ed8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002edc:	4606      	mov	r6, r0
 8002ede:	9209      	str	r2, [sp, #36]	; 0x24
 8002ee0:	9310      	str	r3, [sp, #64]	; 0x40
 8002ee2:	b975      	cbnz	r5, 8002f02 <_dtoa_r+0x3a>
 8002ee4:	2010      	movs	r0, #16
 8002ee6:	f000 fd75 	bl	80039d4 <malloc>
 8002eea:	4602      	mov	r2, r0
 8002eec:	6270      	str	r0, [r6, #36]	; 0x24
 8002eee:	b920      	cbnz	r0, 8002efa <_dtoa_r+0x32>
 8002ef0:	4bab      	ldr	r3, [pc, #684]	; (80031a0 <_dtoa_r+0x2d8>)
 8002ef2:	21ea      	movs	r1, #234	; 0xea
 8002ef4:	48ab      	ldr	r0, [pc, #684]	; (80031a4 <_dtoa_r+0x2dc>)
 8002ef6:	f001 f9cb 	bl	8004290 <__assert_func>
 8002efa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002efe:	6005      	str	r5, [r0, #0]
 8002f00:	60c5      	str	r5, [r0, #12]
 8002f02:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002f04:	6819      	ldr	r1, [r3, #0]
 8002f06:	b151      	cbz	r1, 8002f1e <_dtoa_r+0x56>
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	604a      	str	r2, [r1, #4]
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4093      	lsls	r3, r2
 8002f10:	608b      	str	r3, [r1, #8]
 8002f12:	4630      	mov	r0, r6
 8002f14:	f000 fdb4 	bl	8003a80 <_Bfree>
 8002f18:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f1b9 0300 	subs.w	r3, r9, #0
 8002f22:	bfbb      	ittet	lt
 8002f24:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002f28:	9303      	strlt	r3, [sp, #12]
 8002f2a:	2300      	movge	r3, #0
 8002f2c:	2201      	movlt	r2, #1
 8002f2e:	bfac      	ite	ge
 8002f30:	6023      	strge	r3, [r4, #0]
 8002f32:	6022      	strlt	r2, [r4, #0]
 8002f34:	4b9c      	ldr	r3, [pc, #624]	; (80031a8 <_dtoa_r+0x2e0>)
 8002f36:	9c03      	ldr	r4, [sp, #12]
 8002f38:	43a3      	bics	r3, r4
 8002f3a:	d11a      	bne.n	8002f72 <_dtoa_r+0xaa>
 8002f3c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f3e:	f242 730f 	movw	r3, #9999	; 0x270f
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8002f48:	ea53 0308 	orrs.w	r3, r3, r8
 8002f4c:	f000 8512 	beq.w	8003974 <_dtoa_r+0xaac>
 8002f50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f52:	b953      	cbnz	r3, 8002f6a <_dtoa_r+0xa2>
 8002f54:	4b95      	ldr	r3, [pc, #596]	; (80031ac <_dtoa_r+0x2e4>)
 8002f56:	e01f      	b.n	8002f98 <_dtoa_r+0xd0>
 8002f58:	4b95      	ldr	r3, [pc, #596]	; (80031b0 <_dtoa_r+0x2e8>)
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	3308      	adds	r3, #8
 8002f5e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	9800      	ldr	r0, [sp, #0]
 8002f64:	b015      	add	sp, #84	; 0x54
 8002f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f6a:	4b90      	ldr	r3, [pc, #576]	; (80031ac <_dtoa_r+0x2e4>)
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	3303      	adds	r3, #3
 8002f70:	e7f5      	b.n	8002f5e <_dtoa_r+0x96>
 8002f72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002f76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8002f82:	d10b      	bne.n	8002f9c <_dtoa_r+0xd4>
 8002f84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002f86:	2301      	movs	r3, #1
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 84ee 	beq.w	800396e <_dtoa_r+0xaa6>
 8002f92:	4888      	ldr	r0, [pc, #544]	; (80031b4 <_dtoa_r+0x2ec>)
 8002f94:	6018      	str	r0, [r3, #0]
 8002f96:	1e43      	subs	r3, r0, #1
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	e7e2      	b.n	8002f62 <_dtoa_r+0x9a>
 8002f9c:	a913      	add	r1, sp, #76	; 0x4c
 8002f9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8002fa2:	aa12      	add	r2, sp, #72	; 0x48
 8002fa4:	4630      	mov	r0, r6
 8002fa6:	f001 f84d 	bl	8004044 <__d2b>
 8002faa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8002fae:	4605      	mov	r5, r0
 8002fb0:	9812      	ldr	r0, [sp, #72]	; 0x48
 8002fb2:	2900      	cmp	r1, #0
 8002fb4:	d047      	beq.n	8003046 <_dtoa_r+0x17e>
 8002fb6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8002fb8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8002fbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002fc0:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8002fc4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002fc8:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8002fcc:	2400      	movs	r4, #0
 8002fce:	ec43 2b16 	vmov	d6, r2, r3
 8002fd2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8002fd6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8003188 <_dtoa_r+0x2c0>
 8002fda:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002fde:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8003190 <_dtoa_r+0x2c8>
 8002fe2:	eea7 6b05 	vfma.f64	d6, d7, d5
 8002fe6:	eeb0 7b46 	vmov.f64	d7, d6
 8002fea:	ee06 1a90 	vmov	s13, r1
 8002fee:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8002ff2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8003198 <_dtoa_r+0x2d0>
 8002ff6:	eea5 7b06 	vfma.f64	d7, d5, d6
 8002ffa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8002ffe:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8003002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003006:	ee16 ba90 	vmov	fp, s13
 800300a:	9411      	str	r4, [sp, #68]	; 0x44
 800300c:	d508      	bpl.n	8003020 <_dtoa_r+0x158>
 800300e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8003012:	eeb4 6b47 	vcmp.f64	d6, d7
 8003016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301a:	bf18      	it	ne
 800301c:	f10b 3bff 	addne.w	fp, fp, #4294967295	; 0xffffffff
 8003020:	f1bb 0f16 	cmp.w	fp, #22
 8003024:	d832      	bhi.n	800308c <_dtoa_r+0x1c4>
 8003026:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <_dtoa_r+0x2f0>)
 8003028:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800302c:	ed93 7b00 	vldr	d7, [r3]
 8003030:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8003034:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800303c:	d501      	bpl.n	8003042 <_dtoa_r+0x17a>
 800303e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003042:	2300      	movs	r3, #0
 8003044:	e023      	b.n	800308e <_dtoa_r+0x1c6>
 8003046:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8003048:	4401      	add	r1, r0
 800304a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800304e:	2b20      	cmp	r3, #32
 8003050:	bfc3      	ittte	gt
 8003052:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8003056:	fa04 f303 	lslgt.w	r3, r4, r3
 800305a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800305e:	f1c3 0320 	rsble	r3, r3, #32
 8003062:	bfc6      	itte	gt
 8003064:	fa28 f804 	lsrgt.w	r8, r8, r4
 8003068:	ea43 0308 	orrgt.w	r3, r3, r8
 800306c:	fa08 f303 	lslle.w	r3, r8, r3
 8003070:	ee07 3a90 	vmov	s15, r3
 8003074:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8003078:	3901      	subs	r1, #1
 800307a:	ed8d 7b00 	vstr	d7, [sp]
 800307e:	9c01      	ldr	r4, [sp, #4]
 8003080:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003084:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8003088:	2401      	movs	r4, #1
 800308a:	e7a0      	b.n	8002fce <_dtoa_r+0x106>
 800308c:	2301      	movs	r3, #1
 800308e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003090:	1a43      	subs	r3, r0, r1
 8003092:	1e5a      	subs	r2, r3, #1
 8003094:	bf45      	ittet	mi
 8003096:	f1c3 0301 	rsbmi	r3, r3, #1
 800309a:	9305      	strmi	r3, [sp, #20]
 800309c:	2300      	movpl	r3, #0
 800309e:	2300      	movmi	r3, #0
 80030a0:	9206      	str	r2, [sp, #24]
 80030a2:	bf54      	ite	pl
 80030a4:	9305      	strpl	r3, [sp, #20]
 80030a6:	9306      	strmi	r3, [sp, #24]
 80030a8:	f1bb 0f00 	cmp.w	fp, #0
 80030ac:	db18      	blt.n	80030e0 <_dtoa_r+0x218>
 80030ae:	9b06      	ldr	r3, [sp, #24]
 80030b0:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80030b4:	445b      	add	r3, fp
 80030b6:	9306      	str	r3, [sp, #24]
 80030b8:	2300      	movs	r3, #0
 80030ba:	9a07      	ldr	r2, [sp, #28]
 80030bc:	2a09      	cmp	r2, #9
 80030be:	d849      	bhi.n	8003154 <_dtoa_r+0x28c>
 80030c0:	2a05      	cmp	r2, #5
 80030c2:	bfc4      	itt	gt
 80030c4:	3a04      	subgt	r2, #4
 80030c6:	9207      	strgt	r2, [sp, #28]
 80030c8:	9a07      	ldr	r2, [sp, #28]
 80030ca:	f1a2 0202 	sub.w	r2, r2, #2
 80030ce:	bfcc      	ite	gt
 80030d0:	2400      	movgt	r4, #0
 80030d2:	2401      	movle	r4, #1
 80030d4:	2a03      	cmp	r2, #3
 80030d6:	d848      	bhi.n	800316a <_dtoa_r+0x2a2>
 80030d8:	e8df f002 	tbb	[pc, r2]
 80030dc:	3a2c2e0b 	.word	0x3a2c2e0b
 80030e0:	9b05      	ldr	r3, [sp, #20]
 80030e2:	2200      	movs	r2, #0
 80030e4:	eba3 030b 	sub.w	r3, r3, fp
 80030e8:	9305      	str	r3, [sp, #20]
 80030ea:	920e      	str	r2, [sp, #56]	; 0x38
 80030ec:	f1cb 0300 	rsb	r3, fp, #0
 80030f0:	e7e3      	b.n	80030ba <_dtoa_r+0x1f2>
 80030f2:	2200      	movs	r2, #0
 80030f4:	9208      	str	r2, [sp, #32]
 80030f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80030f8:	2a00      	cmp	r2, #0
 80030fa:	dc39      	bgt.n	8003170 <_dtoa_r+0x2a8>
 80030fc:	f04f 0a01 	mov.w	sl, #1
 8003100:	46d1      	mov	r9, sl
 8003102:	4652      	mov	r2, sl
 8003104:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8003108:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800310a:	2100      	movs	r1, #0
 800310c:	6079      	str	r1, [r7, #4]
 800310e:	2004      	movs	r0, #4
 8003110:	f100 0c14 	add.w	ip, r0, #20
 8003114:	4594      	cmp	ip, r2
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	d92f      	bls.n	800317a <_dtoa_r+0x2b2>
 800311a:	4630      	mov	r0, r6
 800311c:	930c      	str	r3, [sp, #48]	; 0x30
 800311e:	f000 fc6f 	bl	8003a00 <_Balloc>
 8003122:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003124:	9000      	str	r0, [sp, #0]
 8003126:	4602      	mov	r2, r0
 8003128:	2800      	cmp	r0, #0
 800312a:	d149      	bne.n	80031c0 <_dtoa_r+0x2f8>
 800312c:	4b23      	ldr	r3, [pc, #140]	; (80031bc <_dtoa_r+0x2f4>)
 800312e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003132:	e6df      	b.n	8002ef4 <_dtoa_r+0x2c>
 8003134:	2201      	movs	r2, #1
 8003136:	e7dd      	b.n	80030f4 <_dtoa_r+0x22c>
 8003138:	2200      	movs	r2, #0
 800313a:	9208      	str	r2, [sp, #32]
 800313c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800313e:	eb0b 0a02 	add.w	sl, fp, r2
 8003142:	f10a 0901 	add.w	r9, sl, #1
 8003146:	464a      	mov	r2, r9
 8003148:	2a01      	cmp	r2, #1
 800314a:	bfb8      	it	lt
 800314c:	2201      	movlt	r2, #1
 800314e:	e7db      	b.n	8003108 <_dtoa_r+0x240>
 8003150:	2201      	movs	r2, #1
 8003152:	e7f2      	b.n	800313a <_dtoa_r+0x272>
 8003154:	2401      	movs	r4, #1
 8003156:	2200      	movs	r2, #0
 8003158:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800315c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8003160:	2100      	movs	r1, #0
 8003162:	46d1      	mov	r9, sl
 8003164:	2212      	movs	r2, #18
 8003166:	9109      	str	r1, [sp, #36]	; 0x24
 8003168:	e7ce      	b.n	8003108 <_dtoa_r+0x240>
 800316a:	2201      	movs	r2, #1
 800316c:	9208      	str	r2, [sp, #32]
 800316e:	e7f5      	b.n	800315c <_dtoa_r+0x294>
 8003170:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8003174:	46d1      	mov	r9, sl
 8003176:	4652      	mov	r2, sl
 8003178:	e7c6      	b.n	8003108 <_dtoa_r+0x240>
 800317a:	3101      	adds	r1, #1
 800317c:	6079      	str	r1, [r7, #4]
 800317e:	0040      	lsls	r0, r0, #1
 8003180:	e7c6      	b.n	8003110 <_dtoa_r+0x248>
 8003182:	bf00      	nop
 8003184:	f3af 8000 	nop.w
 8003188:	636f4361 	.word	0x636f4361
 800318c:	3fd287a7 	.word	0x3fd287a7
 8003190:	8b60c8b3 	.word	0x8b60c8b3
 8003194:	3fc68a28 	.word	0x3fc68a28
 8003198:	509f79fb 	.word	0x509f79fb
 800319c:	3fd34413 	.word	0x3fd34413
 80031a0:	08004e15 	.word	0x08004e15
 80031a4:	08004e2c 	.word	0x08004e2c
 80031a8:	7ff00000 	.word	0x7ff00000
 80031ac:	08004e11 	.word	0x08004e11
 80031b0:	08004e08 	.word	0x08004e08
 80031b4:	08004de5 	.word	0x08004de5
 80031b8:	08004f28 	.word	0x08004f28
 80031bc:	08004e8b 	.word	0x08004e8b
 80031c0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80031c2:	9900      	ldr	r1, [sp, #0]
 80031c4:	6011      	str	r1, [r2, #0]
 80031c6:	f1b9 0f0e 	cmp.w	r9, #14
 80031ca:	d872      	bhi.n	80032b2 <_dtoa_r+0x3ea>
 80031cc:	2c00      	cmp	r4, #0
 80031ce:	d070      	beq.n	80032b2 <_dtoa_r+0x3ea>
 80031d0:	f1bb 0f00 	cmp.w	fp, #0
 80031d4:	f340 80a6 	ble.w	8003324 <_dtoa_r+0x45c>
 80031d8:	49ca      	ldr	r1, [pc, #808]	; (8003504 <_dtoa_r+0x63c>)
 80031da:	f00b 020f 	and.w	r2, fp, #15
 80031de:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 80031e2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80031e6:	ed92 7b00 	vldr	d7, [r2]
 80031ea:	ea4f 112b 	mov.w	r1, fp, asr #4
 80031ee:	f000 808d 	beq.w	800330c <_dtoa_r+0x444>
 80031f2:	4ac5      	ldr	r2, [pc, #788]	; (8003508 <_dtoa_r+0x640>)
 80031f4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 80031f8:	ed92 6b08 	vldr	d6, [r2, #32]
 80031fc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8003200:	ed8d 6b02 	vstr	d6, [sp, #8]
 8003204:	f001 010f 	and.w	r1, r1, #15
 8003208:	2203      	movs	r2, #3
 800320a:	48bf      	ldr	r0, [pc, #764]	; (8003508 <_dtoa_r+0x640>)
 800320c:	2900      	cmp	r1, #0
 800320e:	d17f      	bne.n	8003310 <_dtoa_r+0x448>
 8003210:	ed9d 6b02 	vldr	d6, [sp, #8]
 8003214:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8003218:	ed8d 7b02 	vstr	d7, [sp, #8]
 800321c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800321e:	2900      	cmp	r1, #0
 8003220:	f000 80b2 	beq.w	8003388 <_dtoa_r+0x4c0>
 8003224:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003228:	ed9d 7b02 	vldr	d7, [sp, #8]
 800322c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	f140 80a8 	bpl.w	8003388 <_dtoa_r+0x4c0>
 8003238:	f1b9 0f00 	cmp.w	r9, #0
 800323c:	f000 80a4 	beq.w	8003388 <_dtoa_r+0x4c0>
 8003240:	f1ba 0f00 	cmp.w	sl, #0
 8003244:	dd31      	ble.n	80032aa <_dtoa_r+0x3e2>
 8003246:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800324a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800324e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003252:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8003256:	3201      	adds	r2, #1
 8003258:	4650      	mov	r0, sl
 800325a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800325e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8003262:	ee07 2a90 	vmov	s15, r2
 8003266:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800326a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800326e:	ed8d 5b02 	vstr	d5, [sp, #8]
 8003272:	9c03      	ldr	r4, [sp, #12]
 8003274:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8003278:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800327c:	2800      	cmp	r0, #0
 800327e:	f040 8086 	bne.w	800338e <_dtoa_r+0x4c6>
 8003282:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8003286:	ee36 6b47 	vsub.f64	d6, d6, d7
 800328a:	ec42 1b17 	vmov	d7, r1, r2
 800328e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8003292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003296:	f300 8272 	bgt.w	800377e <_dtoa_r+0x8b6>
 800329a:	eeb1 7b47 	vneg.f64	d7, d7
 800329e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	f100 8267 	bmi.w	8003778 <_dtoa_r+0x8b0>
 80032aa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 80032ae:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80032b2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80032b4:	2a00      	cmp	r2, #0
 80032b6:	f2c0 8129 	blt.w	800350c <_dtoa_r+0x644>
 80032ba:	f1bb 0f0e 	cmp.w	fp, #14
 80032be:	f300 8125 	bgt.w	800350c <_dtoa_r+0x644>
 80032c2:	4b90      	ldr	r3, [pc, #576]	; (8003504 <_dtoa_r+0x63c>)
 80032c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80032c8:	ed93 6b00 	vldr	d6, [r3]
 80032cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f280 80c3 	bge.w	800345a <_dtoa_r+0x592>
 80032d4:	f1b9 0f00 	cmp.w	r9, #0
 80032d8:	f300 80bf 	bgt.w	800345a <_dtoa_r+0x592>
 80032dc:	f040 824c 	bne.w	8003778 <_dtoa_r+0x8b0>
 80032e0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80032e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 80032e8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80032ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	464c      	mov	r4, r9
 80032f6:	464f      	mov	r7, r9
 80032f8:	f280 8222 	bge.w	8003740 <_dtoa_r+0x878>
 80032fc:	f8dd 8000 	ldr.w	r8, [sp]
 8003300:	2331      	movs	r3, #49	; 0x31
 8003302:	f808 3b01 	strb.w	r3, [r8], #1
 8003306:	f10b 0b01 	add.w	fp, fp, #1
 800330a:	e21e      	b.n	800374a <_dtoa_r+0x882>
 800330c:	2202      	movs	r2, #2
 800330e:	e77c      	b.n	800320a <_dtoa_r+0x342>
 8003310:	07cc      	lsls	r4, r1, #31
 8003312:	d504      	bpl.n	800331e <_dtoa_r+0x456>
 8003314:	ed90 6b00 	vldr	d6, [r0]
 8003318:	3201      	adds	r2, #1
 800331a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800331e:	1049      	asrs	r1, r1, #1
 8003320:	3008      	adds	r0, #8
 8003322:	e773      	b.n	800320c <_dtoa_r+0x344>
 8003324:	d02e      	beq.n	8003384 <_dtoa_r+0x4bc>
 8003326:	f1cb 0100 	rsb	r1, fp, #0
 800332a:	4a76      	ldr	r2, [pc, #472]	; (8003504 <_dtoa_r+0x63c>)
 800332c:	f001 000f 	and.w	r0, r1, #15
 8003330:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003334:	ed92 7b00 	vldr	d7, [r2]
 8003338:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800333c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003340:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003344:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8003348:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800334c:	486e      	ldr	r0, [pc, #440]	; (8003508 <_dtoa_r+0x640>)
 800334e:	1109      	asrs	r1, r1, #4
 8003350:	2400      	movs	r4, #0
 8003352:	2202      	movs	r2, #2
 8003354:	b939      	cbnz	r1, 8003366 <_dtoa_r+0x49e>
 8003356:	2c00      	cmp	r4, #0
 8003358:	f43f af60 	beq.w	800321c <_dtoa_r+0x354>
 800335c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003364:	e75a      	b.n	800321c <_dtoa_r+0x354>
 8003366:	07cf      	lsls	r7, r1, #31
 8003368:	d509      	bpl.n	800337e <_dtoa_r+0x4b6>
 800336a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800336e:	ed90 7b00 	vldr	d7, [r0]
 8003372:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003376:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800337a:	3201      	adds	r2, #1
 800337c:	2401      	movs	r4, #1
 800337e:	1049      	asrs	r1, r1, #1
 8003380:	3008      	adds	r0, #8
 8003382:	e7e7      	b.n	8003354 <_dtoa_r+0x48c>
 8003384:	2202      	movs	r2, #2
 8003386:	e749      	b.n	800321c <_dtoa_r+0x354>
 8003388:	465f      	mov	r7, fp
 800338a:	4648      	mov	r0, r9
 800338c:	e765      	b.n	800325a <_dtoa_r+0x392>
 800338e:	ec42 1b17 	vmov	d7, r1, r2
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <_dtoa_r+0x63c>)
 8003394:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8003398:	ed12 4b02 	vldr	d4, [r2, #-8]
 800339c:	9a00      	ldr	r2, [sp, #0]
 800339e:	1814      	adds	r4, r2, r0
 80033a0:	9a08      	ldr	r2, [sp, #32]
 80033a2:	b352      	cbz	r2, 80033fa <_dtoa_r+0x532>
 80033a4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80033a8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80033ac:	f8dd 8000 	ldr.w	r8, [sp]
 80033b0:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80033b4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80033b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80033bc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80033c0:	ee14 2a90 	vmov	r2, s9
 80033c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80033c8:	3230      	adds	r2, #48	; 0x30
 80033ca:	ee36 6b45 	vsub.f64	d6, d6, d5
 80033ce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	f808 2b01 	strb.w	r2, [r8], #1
 80033da:	d439      	bmi.n	8003450 <_dtoa_r+0x588>
 80033dc:	ee32 5b46 	vsub.f64	d5, d2, d6
 80033e0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	d472      	bmi.n	80034d0 <_dtoa_r+0x608>
 80033ea:	45a0      	cmp	r8, r4
 80033ec:	f43f af5d 	beq.w	80032aa <_dtoa_r+0x3e2>
 80033f0:	ee27 7b03 	vmul.f64	d7, d7, d3
 80033f4:	ee26 6b03 	vmul.f64	d6, d6, d3
 80033f8:	e7e0      	b.n	80033bc <_dtoa_r+0x4f4>
 80033fa:	f8dd 8000 	ldr.w	r8, [sp]
 80033fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8003402:	4621      	mov	r1, r4
 8003404:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8003408:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800340c:	ee14 2a90 	vmov	r2, s9
 8003410:	3230      	adds	r2, #48	; 0x30
 8003412:	f808 2b01 	strb.w	r2, [r8], #1
 8003416:	45a0      	cmp	r8, r4
 8003418:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800341c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8003420:	d118      	bne.n	8003454 <_dtoa_r+0x58c>
 8003422:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8003426:	ee37 4b05 	vadd.f64	d4, d7, d5
 800342a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800342e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003432:	dc4d      	bgt.n	80034d0 <_dtoa_r+0x608>
 8003434:	ee35 7b47 	vsub.f64	d7, d5, d7
 8003438:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003440:	f57f af33 	bpl.w	80032aa <_dtoa_r+0x3e2>
 8003444:	4688      	mov	r8, r1
 8003446:	3901      	subs	r1, #1
 8003448:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d0f9      	beq.n	8003444 <_dtoa_r+0x57c>
 8003450:	46bb      	mov	fp, r7
 8003452:	e02a      	b.n	80034aa <_dtoa_r+0x5e2>
 8003454:	ee26 6b03 	vmul.f64	d6, d6, d3
 8003458:	e7d6      	b.n	8003408 <_dtoa_r+0x540>
 800345a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800345e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8003462:	f8dd 8000 	ldr.w	r8, [sp]
 8003466:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800346a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800346e:	ee15 3a10 	vmov	r3, s10
 8003472:	3330      	adds	r3, #48	; 0x30
 8003474:	f808 3b01 	strb.w	r3, [r8], #1
 8003478:	9b00      	ldr	r3, [sp, #0]
 800347a:	eba8 0303 	sub.w	r3, r8, r3
 800347e:	4599      	cmp	r9, r3
 8003480:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8003484:	eea3 7b46 	vfms.f64	d7, d3, d6
 8003488:	d133      	bne.n	80034f2 <_dtoa_r+0x62a>
 800348a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800348e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8003492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003496:	dc1a      	bgt.n	80034ce <_dtoa_r+0x606>
 8003498:	eeb4 7b46 	vcmp.f64	d7, d6
 800349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a0:	d103      	bne.n	80034aa <_dtoa_r+0x5e2>
 80034a2:	ee15 3a10 	vmov	r3, s10
 80034a6:	07d9      	lsls	r1, r3, #31
 80034a8:	d411      	bmi.n	80034ce <_dtoa_r+0x606>
 80034aa:	4629      	mov	r1, r5
 80034ac:	4630      	mov	r0, r6
 80034ae:	f000 fae7 	bl	8003a80 <_Bfree>
 80034b2:	2300      	movs	r3, #0
 80034b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80034b6:	f888 3000 	strb.w	r3, [r8]
 80034ba:	f10b 0301 	add.w	r3, fp, #1
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f43f ad4d 	beq.w	8002f62 <_dtoa_r+0x9a>
 80034c8:	f8c3 8000 	str.w	r8, [r3]
 80034cc:	e549      	b.n	8002f62 <_dtoa_r+0x9a>
 80034ce:	465f      	mov	r7, fp
 80034d0:	4643      	mov	r3, r8
 80034d2:	4698      	mov	r8, r3
 80034d4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80034d8:	2a39      	cmp	r2, #57	; 0x39
 80034da:	d106      	bne.n	80034ea <_dtoa_r+0x622>
 80034dc:	9a00      	ldr	r2, [sp, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d1f7      	bne.n	80034d2 <_dtoa_r+0x60a>
 80034e2:	9900      	ldr	r1, [sp, #0]
 80034e4:	2230      	movs	r2, #48	; 0x30
 80034e6:	3701      	adds	r7, #1
 80034e8:	700a      	strb	r2, [r1, #0]
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	3201      	adds	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
 80034f0:	e7ae      	b.n	8003450 <_dtoa_r+0x588>
 80034f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80034f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80034fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034fe:	d1b2      	bne.n	8003466 <_dtoa_r+0x59e>
 8003500:	e7d3      	b.n	80034aa <_dtoa_r+0x5e2>
 8003502:	bf00      	nop
 8003504:	08004f28 	.word	0x08004f28
 8003508:	08004f00 	.word	0x08004f00
 800350c:	9908      	ldr	r1, [sp, #32]
 800350e:	2900      	cmp	r1, #0
 8003510:	f000 80d1 	beq.w	80036b6 <_dtoa_r+0x7ee>
 8003514:	9907      	ldr	r1, [sp, #28]
 8003516:	2901      	cmp	r1, #1
 8003518:	f300 80b4 	bgt.w	8003684 <_dtoa_r+0x7bc>
 800351c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800351e:	2900      	cmp	r1, #0
 8003520:	f000 80ac 	beq.w	800367c <_dtoa_r+0x7b4>
 8003524:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003528:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800352c:	461c      	mov	r4, r3
 800352e:	930a      	str	r3, [sp, #40]	; 0x28
 8003530:	9b05      	ldr	r3, [sp, #20]
 8003532:	4413      	add	r3, r2
 8003534:	9305      	str	r3, [sp, #20]
 8003536:	9b06      	ldr	r3, [sp, #24]
 8003538:	2101      	movs	r1, #1
 800353a:	4413      	add	r3, r2
 800353c:	4630      	mov	r0, r6
 800353e:	9306      	str	r3, [sp, #24]
 8003540:	f000 fb5a 	bl	8003bf8 <__i2b>
 8003544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003546:	4607      	mov	r7, r0
 8003548:	f1b8 0f00 	cmp.w	r8, #0
 800354c:	dd0d      	ble.n	800356a <_dtoa_r+0x6a2>
 800354e:	9a06      	ldr	r2, [sp, #24]
 8003550:	2a00      	cmp	r2, #0
 8003552:	dd0a      	ble.n	800356a <_dtoa_r+0x6a2>
 8003554:	4542      	cmp	r2, r8
 8003556:	9905      	ldr	r1, [sp, #20]
 8003558:	bfa8      	it	ge
 800355a:	4642      	movge	r2, r8
 800355c:	1a89      	subs	r1, r1, r2
 800355e:	9105      	str	r1, [sp, #20]
 8003560:	9906      	ldr	r1, [sp, #24]
 8003562:	eba8 0802 	sub.w	r8, r8, r2
 8003566:	1a8a      	subs	r2, r1, r2
 8003568:	9206      	str	r2, [sp, #24]
 800356a:	b303      	cbz	r3, 80035ae <_dtoa_r+0x6e6>
 800356c:	9a08      	ldr	r2, [sp, #32]
 800356e:	2a00      	cmp	r2, #0
 8003570:	f000 80a6 	beq.w	80036c0 <_dtoa_r+0x7f8>
 8003574:	2c00      	cmp	r4, #0
 8003576:	dd13      	ble.n	80035a0 <_dtoa_r+0x6d8>
 8003578:	4639      	mov	r1, r7
 800357a:	4622      	mov	r2, r4
 800357c:	4630      	mov	r0, r6
 800357e:	930c      	str	r3, [sp, #48]	; 0x30
 8003580:	f000 fbf6 	bl	8003d70 <__pow5mult>
 8003584:	462a      	mov	r2, r5
 8003586:	4601      	mov	r1, r0
 8003588:	4607      	mov	r7, r0
 800358a:	4630      	mov	r0, r6
 800358c:	f000 fb4a 	bl	8003c24 <__multiply>
 8003590:	4629      	mov	r1, r5
 8003592:	900a      	str	r0, [sp, #40]	; 0x28
 8003594:	4630      	mov	r0, r6
 8003596:	f000 fa73 	bl	8003a80 <_Bfree>
 800359a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800359c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800359e:	4615      	mov	r5, r2
 80035a0:	1b1a      	subs	r2, r3, r4
 80035a2:	d004      	beq.n	80035ae <_dtoa_r+0x6e6>
 80035a4:	4629      	mov	r1, r5
 80035a6:	4630      	mov	r0, r6
 80035a8:	f000 fbe2 	bl	8003d70 <__pow5mult>
 80035ac:	4605      	mov	r5, r0
 80035ae:	2101      	movs	r1, #1
 80035b0:	4630      	mov	r0, r6
 80035b2:	f000 fb21 	bl	8003bf8 <__i2b>
 80035b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	4604      	mov	r4, r0
 80035bc:	f340 8082 	ble.w	80036c4 <_dtoa_r+0x7fc>
 80035c0:	461a      	mov	r2, r3
 80035c2:	4601      	mov	r1, r0
 80035c4:	4630      	mov	r0, r6
 80035c6:	f000 fbd3 	bl	8003d70 <__pow5mult>
 80035ca:	9b07      	ldr	r3, [sp, #28]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	4604      	mov	r4, r0
 80035d0:	dd7b      	ble.n	80036ca <_dtoa_r+0x802>
 80035d2:	2300      	movs	r3, #0
 80035d4:	930a      	str	r3, [sp, #40]	; 0x28
 80035d6:	6922      	ldr	r2, [r4, #16]
 80035d8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80035dc:	6910      	ldr	r0, [r2, #16]
 80035de:	f000 fabb 	bl	8003b58 <__hi0bits>
 80035e2:	f1c0 0020 	rsb	r0, r0, #32
 80035e6:	9b06      	ldr	r3, [sp, #24]
 80035e8:	4418      	add	r0, r3
 80035ea:	f010 001f 	ands.w	r0, r0, #31
 80035ee:	f000 808d 	beq.w	800370c <_dtoa_r+0x844>
 80035f2:	f1c0 0220 	rsb	r2, r0, #32
 80035f6:	2a04      	cmp	r2, #4
 80035f8:	f340 8086 	ble.w	8003708 <_dtoa_r+0x840>
 80035fc:	f1c0 001c 	rsb	r0, r0, #28
 8003600:	9b05      	ldr	r3, [sp, #20]
 8003602:	4403      	add	r3, r0
 8003604:	9305      	str	r3, [sp, #20]
 8003606:	9b06      	ldr	r3, [sp, #24]
 8003608:	4403      	add	r3, r0
 800360a:	4480      	add	r8, r0
 800360c:	9306      	str	r3, [sp, #24]
 800360e:	9b05      	ldr	r3, [sp, #20]
 8003610:	2b00      	cmp	r3, #0
 8003612:	dd05      	ble.n	8003620 <_dtoa_r+0x758>
 8003614:	4629      	mov	r1, r5
 8003616:	461a      	mov	r2, r3
 8003618:	4630      	mov	r0, r6
 800361a:	f000 fc03 	bl	8003e24 <__lshift>
 800361e:	4605      	mov	r5, r0
 8003620:	9b06      	ldr	r3, [sp, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	dd05      	ble.n	8003632 <_dtoa_r+0x76a>
 8003626:	4621      	mov	r1, r4
 8003628:	461a      	mov	r2, r3
 800362a:	4630      	mov	r0, r6
 800362c:	f000 fbfa 	bl	8003e24 <__lshift>
 8003630:	4604      	mov	r4, r0
 8003632:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d06b      	beq.n	8003710 <_dtoa_r+0x848>
 8003638:	4621      	mov	r1, r4
 800363a:	4628      	mov	r0, r5
 800363c:	f000 fc5e 	bl	8003efc <__mcmp>
 8003640:	2800      	cmp	r0, #0
 8003642:	da65      	bge.n	8003710 <_dtoa_r+0x848>
 8003644:	2300      	movs	r3, #0
 8003646:	4629      	mov	r1, r5
 8003648:	220a      	movs	r2, #10
 800364a:	4630      	mov	r0, r6
 800364c:	f000 fa3a 	bl	8003ac4 <__multadd>
 8003650:	9b08      	ldr	r3, [sp, #32]
 8003652:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8003656:	4605      	mov	r5, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8192 	beq.w	8003982 <_dtoa_r+0xaba>
 800365e:	4639      	mov	r1, r7
 8003660:	2300      	movs	r3, #0
 8003662:	220a      	movs	r2, #10
 8003664:	4630      	mov	r0, r6
 8003666:	f000 fa2d 	bl	8003ac4 <__multadd>
 800366a:	f1ba 0f00 	cmp.w	sl, #0
 800366e:	4607      	mov	r7, r0
 8003670:	f300 808e 	bgt.w	8003790 <_dtoa_r+0x8c8>
 8003674:	9b07      	ldr	r3, [sp, #28]
 8003676:	2b02      	cmp	r3, #2
 8003678:	dc51      	bgt.n	800371e <_dtoa_r+0x856>
 800367a:	e089      	b.n	8003790 <_dtoa_r+0x8c8>
 800367c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800367e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8003682:	e751      	b.n	8003528 <_dtoa_r+0x660>
 8003684:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8003688:	42a3      	cmp	r3, r4
 800368a:	bfbf      	itttt	lt
 800368c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800368e:	1ae3      	sublt	r3, r4, r3
 8003690:	18d2      	addlt	r2, r2, r3
 8003692:	4613      	movlt	r3, r2
 8003694:	bfb7      	itett	lt
 8003696:	930e      	strlt	r3, [sp, #56]	; 0x38
 8003698:	1b1c      	subge	r4, r3, r4
 800369a:	4623      	movlt	r3, r4
 800369c:	2400      	movlt	r4, #0
 800369e:	f1b9 0f00 	cmp.w	r9, #0
 80036a2:	bfb5      	itete	lt
 80036a4:	9a05      	ldrlt	r2, [sp, #20]
 80036a6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 80036aa:	eba2 0809 	sublt.w	r8, r2, r9
 80036ae:	464a      	movge	r2, r9
 80036b0:	bfb8      	it	lt
 80036b2:	2200      	movlt	r2, #0
 80036b4:	e73b      	b.n	800352e <_dtoa_r+0x666>
 80036b6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80036ba:	9f08      	ldr	r7, [sp, #32]
 80036bc:	461c      	mov	r4, r3
 80036be:	e743      	b.n	8003548 <_dtoa_r+0x680>
 80036c0:	461a      	mov	r2, r3
 80036c2:	e76f      	b.n	80035a4 <_dtoa_r+0x6dc>
 80036c4:	9b07      	ldr	r3, [sp, #28]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	dc18      	bgt.n	80036fc <_dtoa_r+0x834>
 80036ca:	9b02      	ldr	r3, [sp, #8]
 80036cc:	b9b3      	cbnz	r3, 80036fc <_dtoa_r+0x834>
 80036ce:	9b03      	ldr	r3, [sp, #12]
 80036d0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80036d4:	b9a2      	cbnz	r2, 8003700 <_dtoa_r+0x838>
 80036d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036da:	0d12      	lsrs	r2, r2, #20
 80036dc:	0512      	lsls	r2, r2, #20
 80036de:	b18a      	cbz	r2, 8003704 <_dtoa_r+0x83c>
 80036e0:	9b05      	ldr	r3, [sp, #20]
 80036e2:	3301      	adds	r3, #1
 80036e4:	9305      	str	r3, [sp, #20]
 80036e6:	9b06      	ldr	r3, [sp, #24]
 80036e8:	3301      	adds	r3, #1
 80036ea:	9306      	str	r3, [sp, #24]
 80036ec:	2301      	movs	r3, #1
 80036ee:	930a      	str	r3, [sp, #40]	; 0x28
 80036f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f47f af6f 	bne.w	80035d6 <_dtoa_r+0x70e>
 80036f8:	2001      	movs	r0, #1
 80036fa:	e774      	b.n	80035e6 <_dtoa_r+0x71e>
 80036fc:	2300      	movs	r3, #0
 80036fe:	e7f6      	b.n	80036ee <_dtoa_r+0x826>
 8003700:	9b02      	ldr	r3, [sp, #8]
 8003702:	e7f4      	b.n	80036ee <_dtoa_r+0x826>
 8003704:	920a      	str	r2, [sp, #40]	; 0x28
 8003706:	e7f3      	b.n	80036f0 <_dtoa_r+0x828>
 8003708:	d081      	beq.n	800360e <_dtoa_r+0x746>
 800370a:	4610      	mov	r0, r2
 800370c:	301c      	adds	r0, #28
 800370e:	e777      	b.n	8003600 <_dtoa_r+0x738>
 8003710:	f1b9 0f00 	cmp.w	r9, #0
 8003714:	dc37      	bgt.n	8003786 <_dtoa_r+0x8be>
 8003716:	9b07      	ldr	r3, [sp, #28]
 8003718:	2b02      	cmp	r3, #2
 800371a:	dd34      	ble.n	8003786 <_dtoa_r+0x8be>
 800371c:	46ca      	mov	sl, r9
 800371e:	f1ba 0f00 	cmp.w	sl, #0
 8003722:	d10d      	bne.n	8003740 <_dtoa_r+0x878>
 8003724:	4621      	mov	r1, r4
 8003726:	4653      	mov	r3, sl
 8003728:	2205      	movs	r2, #5
 800372a:	4630      	mov	r0, r6
 800372c:	f000 f9ca 	bl	8003ac4 <__multadd>
 8003730:	4601      	mov	r1, r0
 8003732:	4604      	mov	r4, r0
 8003734:	4628      	mov	r0, r5
 8003736:	f000 fbe1 	bl	8003efc <__mcmp>
 800373a:	2800      	cmp	r0, #0
 800373c:	f73f adde 	bgt.w	80032fc <_dtoa_r+0x434>
 8003740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003742:	f8dd 8000 	ldr.w	r8, [sp]
 8003746:	ea6f 0b03 	mvn.w	fp, r3
 800374a:	f04f 0900 	mov.w	r9, #0
 800374e:	4621      	mov	r1, r4
 8003750:	4630      	mov	r0, r6
 8003752:	f000 f995 	bl	8003a80 <_Bfree>
 8003756:	2f00      	cmp	r7, #0
 8003758:	f43f aea7 	beq.w	80034aa <_dtoa_r+0x5e2>
 800375c:	f1b9 0f00 	cmp.w	r9, #0
 8003760:	d005      	beq.n	800376e <_dtoa_r+0x8a6>
 8003762:	45b9      	cmp	r9, r7
 8003764:	d003      	beq.n	800376e <_dtoa_r+0x8a6>
 8003766:	4649      	mov	r1, r9
 8003768:	4630      	mov	r0, r6
 800376a:	f000 f989 	bl	8003a80 <_Bfree>
 800376e:	4639      	mov	r1, r7
 8003770:	4630      	mov	r0, r6
 8003772:	f000 f985 	bl	8003a80 <_Bfree>
 8003776:	e698      	b.n	80034aa <_dtoa_r+0x5e2>
 8003778:	2400      	movs	r4, #0
 800377a:	4627      	mov	r7, r4
 800377c:	e7e0      	b.n	8003740 <_dtoa_r+0x878>
 800377e:	46bb      	mov	fp, r7
 8003780:	4604      	mov	r4, r0
 8003782:	4607      	mov	r7, r0
 8003784:	e5ba      	b.n	80032fc <_dtoa_r+0x434>
 8003786:	9b08      	ldr	r3, [sp, #32]
 8003788:	46ca      	mov	sl, r9
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8100 	beq.w	8003990 <_dtoa_r+0xac8>
 8003790:	f1b8 0f00 	cmp.w	r8, #0
 8003794:	dd05      	ble.n	80037a2 <_dtoa_r+0x8da>
 8003796:	4639      	mov	r1, r7
 8003798:	4642      	mov	r2, r8
 800379a:	4630      	mov	r0, r6
 800379c:	f000 fb42 	bl	8003e24 <__lshift>
 80037a0:	4607      	mov	r7, r0
 80037a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d05d      	beq.n	8003864 <_dtoa_r+0x99c>
 80037a8:	6879      	ldr	r1, [r7, #4]
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 f928 	bl	8003a00 <_Balloc>
 80037b0:	4680      	mov	r8, r0
 80037b2:	b928      	cbnz	r0, 80037c0 <_dtoa_r+0x8f8>
 80037b4:	4b82      	ldr	r3, [pc, #520]	; (80039c0 <_dtoa_r+0xaf8>)
 80037b6:	4602      	mov	r2, r0
 80037b8:	f240 21ea 	movw	r1, #746	; 0x2ea
 80037bc:	f7ff bb9a 	b.w	8002ef4 <_dtoa_r+0x2c>
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	3202      	adds	r2, #2
 80037c4:	0092      	lsls	r2, r2, #2
 80037c6:	f107 010c 	add.w	r1, r7, #12
 80037ca:	300c      	adds	r0, #12
 80037cc:	f000 f90a 	bl	80039e4 <memcpy>
 80037d0:	2201      	movs	r2, #1
 80037d2:	4641      	mov	r1, r8
 80037d4:	4630      	mov	r0, r6
 80037d6:	f000 fb25 	bl	8003e24 <__lshift>
 80037da:	9b00      	ldr	r3, [sp, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	9305      	str	r3, [sp, #20]
 80037e0:	9b00      	ldr	r3, [sp, #0]
 80037e2:	4453      	add	r3, sl
 80037e4:	9309      	str	r3, [sp, #36]	; 0x24
 80037e6:	9b02      	ldr	r3, [sp, #8]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	46b9      	mov	r9, r7
 80037ee:	9308      	str	r3, [sp, #32]
 80037f0:	4607      	mov	r7, r0
 80037f2:	9b05      	ldr	r3, [sp, #20]
 80037f4:	4621      	mov	r1, r4
 80037f6:	3b01      	subs	r3, #1
 80037f8:	4628      	mov	r0, r5
 80037fa:	9302      	str	r3, [sp, #8]
 80037fc:	f7ff fad6 	bl	8002dac <quorem>
 8003800:	4603      	mov	r3, r0
 8003802:	3330      	adds	r3, #48	; 0x30
 8003804:	9006      	str	r0, [sp, #24]
 8003806:	4649      	mov	r1, r9
 8003808:	4628      	mov	r0, r5
 800380a:	930a      	str	r3, [sp, #40]	; 0x28
 800380c:	f000 fb76 	bl	8003efc <__mcmp>
 8003810:	463a      	mov	r2, r7
 8003812:	4682      	mov	sl, r0
 8003814:	4621      	mov	r1, r4
 8003816:	4630      	mov	r0, r6
 8003818:	f000 fb8c 	bl	8003f34 <__mdiff>
 800381c:	68c2      	ldr	r2, [r0, #12]
 800381e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003820:	4680      	mov	r8, r0
 8003822:	bb0a      	cbnz	r2, 8003868 <_dtoa_r+0x9a0>
 8003824:	4601      	mov	r1, r0
 8003826:	4628      	mov	r0, r5
 8003828:	f000 fb68 	bl	8003efc <__mcmp>
 800382c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800382e:	4602      	mov	r2, r0
 8003830:	4641      	mov	r1, r8
 8003832:	4630      	mov	r0, r6
 8003834:	920e      	str	r2, [sp, #56]	; 0x38
 8003836:	930a      	str	r3, [sp, #40]	; 0x28
 8003838:	f000 f922 	bl	8003a80 <_Bfree>
 800383c:	9b07      	ldr	r3, [sp, #28]
 800383e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003840:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8003844:	ea43 0102 	orr.w	r1, r3, r2
 8003848:	9b08      	ldr	r3, [sp, #32]
 800384a:	430b      	orrs	r3, r1
 800384c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800384e:	d10d      	bne.n	800386c <_dtoa_r+0x9a4>
 8003850:	2b39      	cmp	r3, #57	; 0x39
 8003852:	d029      	beq.n	80038a8 <_dtoa_r+0x9e0>
 8003854:	f1ba 0f00 	cmp.w	sl, #0
 8003858:	dd01      	ble.n	800385e <_dtoa_r+0x996>
 800385a:	9b06      	ldr	r3, [sp, #24]
 800385c:	3331      	adds	r3, #49	; 0x31
 800385e:	9a02      	ldr	r2, [sp, #8]
 8003860:	7013      	strb	r3, [r2, #0]
 8003862:	e774      	b.n	800374e <_dtoa_r+0x886>
 8003864:	4638      	mov	r0, r7
 8003866:	e7b8      	b.n	80037da <_dtoa_r+0x912>
 8003868:	2201      	movs	r2, #1
 800386a:	e7e1      	b.n	8003830 <_dtoa_r+0x968>
 800386c:	f1ba 0f00 	cmp.w	sl, #0
 8003870:	db06      	blt.n	8003880 <_dtoa_r+0x9b8>
 8003872:	9907      	ldr	r1, [sp, #28]
 8003874:	ea41 0a0a 	orr.w	sl, r1, sl
 8003878:	9908      	ldr	r1, [sp, #32]
 800387a:	ea5a 0101 	orrs.w	r1, sl, r1
 800387e:	d120      	bne.n	80038c2 <_dtoa_r+0x9fa>
 8003880:	2a00      	cmp	r2, #0
 8003882:	ddec      	ble.n	800385e <_dtoa_r+0x996>
 8003884:	4629      	mov	r1, r5
 8003886:	2201      	movs	r2, #1
 8003888:	4630      	mov	r0, r6
 800388a:	9305      	str	r3, [sp, #20]
 800388c:	f000 faca 	bl	8003e24 <__lshift>
 8003890:	4621      	mov	r1, r4
 8003892:	4605      	mov	r5, r0
 8003894:	f000 fb32 	bl	8003efc <__mcmp>
 8003898:	2800      	cmp	r0, #0
 800389a:	9b05      	ldr	r3, [sp, #20]
 800389c:	dc02      	bgt.n	80038a4 <_dtoa_r+0x9dc>
 800389e:	d1de      	bne.n	800385e <_dtoa_r+0x996>
 80038a0:	07da      	lsls	r2, r3, #31
 80038a2:	d5dc      	bpl.n	800385e <_dtoa_r+0x996>
 80038a4:	2b39      	cmp	r3, #57	; 0x39
 80038a6:	d1d8      	bne.n	800385a <_dtoa_r+0x992>
 80038a8:	9a02      	ldr	r2, [sp, #8]
 80038aa:	2339      	movs	r3, #57	; 0x39
 80038ac:	7013      	strb	r3, [r2, #0]
 80038ae:	4643      	mov	r3, r8
 80038b0:	4698      	mov	r8, r3
 80038b2:	3b01      	subs	r3, #1
 80038b4:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80038b8:	2a39      	cmp	r2, #57	; 0x39
 80038ba:	d051      	beq.n	8003960 <_dtoa_r+0xa98>
 80038bc:	3201      	adds	r2, #1
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	e745      	b.n	800374e <_dtoa_r+0x886>
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	dd03      	ble.n	80038ce <_dtoa_r+0xa06>
 80038c6:	2b39      	cmp	r3, #57	; 0x39
 80038c8:	d0ee      	beq.n	80038a8 <_dtoa_r+0x9e0>
 80038ca:	3301      	adds	r3, #1
 80038cc:	e7c7      	b.n	800385e <_dtoa_r+0x996>
 80038ce:	9a05      	ldr	r2, [sp, #20]
 80038d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80038d2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80038d6:	428a      	cmp	r2, r1
 80038d8:	d02b      	beq.n	8003932 <_dtoa_r+0xa6a>
 80038da:	4629      	mov	r1, r5
 80038dc:	2300      	movs	r3, #0
 80038de:	220a      	movs	r2, #10
 80038e0:	4630      	mov	r0, r6
 80038e2:	f000 f8ef 	bl	8003ac4 <__multadd>
 80038e6:	45b9      	cmp	r9, r7
 80038e8:	4605      	mov	r5, r0
 80038ea:	f04f 0300 	mov.w	r3, #0
 80038ee:	f04f 020a 	mov.w	r2, #10
 80038f2:	4649      	mov	r1, r9
 80038f4:	4630      	mov	r0, r6
 80038f6:	d107      	bne.n	8003908 <_dtoa_r+0xa40>
 80038f8:	f000 f8e4 	bl	8003ac4 <__multadd>
 80038fc:	4681      	mov	r9, r0
 80038fe:	4607      	mov	r7, r0
 8003900:	9b05      	ldr	r3, [sp, #20]
 8003902:	3301      	adds	r3, #1
 8003904:	9305      	str	r3, [sp, #20]
 8003906:	e774      	b.n	80037f2 <_dtoa_r+0x92a>
 8003908:	f000 f8dc 	bl	8003ac4 <__multadd>
 800390c:	4639      	mov	r1, r7
 800390e:	4681      	mov	r9, r0
 8003910:	2300      	movs	r3, #0
 8003912:	220a      	movs	r2, #10
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f8d5 	bl	8003ac4 <__multadd>
 800391a:	4607      	mov	r7, r0
 800391c:	e7f0      	b.n	8003900 <_dtoa_r+0xa38>
 800391e:	f1ba 0f00 	cmp.w	sl, #0
 8003922:	9a00      	ldr	r2, [sp, #0]
 8003924:	bfcc      	ite	gt
 8003926:	46d0      	movgt	r8, sl
 8003928:	f04f 0801 	movle.w	r8, #1
 800392c:	4490      	add	r8, r2
 800392e:	f04f 0900 	mov.w	r9, #0
 8003932:	4629      	mov	r1, r5
 8003934:	2201      	movs	r2, #1
 8003936:	4630      	mov	r0, r6
 8003938:	9302      	str	r3, [sp, #8]
 800393a:	f000 fa73 	bl	8003e24 <__lshift>
 800393e:	4621      	mov	r1, r4
 8003940:	4605      	mov	r5, r0
 8003942:	f000 fadb 	bl	8003efc <__mcmp>
 8003946:	2800      	cmp	r0, #0
 8003948:	dcb1      	bgt.n	80038ae <_dtoa_r+0x9e6>
 800394a:	d102      	bne.n	8003952 <_dtoa_r+0xa8a>
 800394c:	9b02      	ldr	r3, [sp, #8]
 800394e:	07db      	lsls	r3, r3, #31
 8003950:	d4ad      	bmi.n	80038ae <_dtoa_r+0x9e6>
 8003952:	4643      	mov	r3, r8
 8003954:	4698      	mov	r8, r3
 8003956:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800395a:	2a30      	cmp	r2, #48	; 0x30
 800395c:	d0fa      	beq.n	8003954 <_dtoa_r+0xa8c>
 800395e:	e6f6      	b.n	800374e <_dtoa_r+0x886>
 8003960:	9a00      	ldr	r2, [sp, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d1a4      	bne.n	80038b0 <_dtoa_r+0x9e8>
 8003966:	f10b 0b01 	add.w	fp, fp, #1
 800396a:	2331      	movs	r3, #49	; 0x31
 800396c:	e778      	b.n	8003860 <_dtoa_r+0x998>
 800396e:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <_dtoa_r+0xafc>)
 8003970:	f7ff bb12 	b.w	8002f98 <_dtoa_r+0xd0>
 8003974:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003976:	2b00      	cmp	r3, #0
 8003978:	f47f aaee 	bne.w	8002f58 <_dtoa_r+0x90>
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <_dtoa_r+0xb00>)
 800397e:	f7ff bb0b 	b.w	8002f98 <_dtoa_r+0xd0>
 8003982:	f1ba 0f00 	cmp.w	sl, #0
 8003986:	dc03      	bgt.n	8003990 <_dtoa_r+0xac8>
 8003988:	9b07      	ldr	r3, [sp, #28]
 800398a:	2b02      	cmp	r3, #2
 800398c:	f73f aec7 	bgt.w	800371e <_dtoa_r+0x856>
 8003990:	f8dd 8000 	ldr.w	r8, [sp]
 8003994:	4621      	mov	r1, r4
 8003996:	4628      	mov	r0, r5
 8003998:	f7ff fa08 	bl	8002dac <quorem>
 800399c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80039a0:	f808 3b01 	strb.w	r3, [r8], #1
 80039a4:	9a00      	ldr	r2, [sp, #0]
 80039a6:	eba8 0202 	sub.w	r2, r8, r2
 80039aa:	4592      	cmp	sl, r2
 80039ac:	ddb7      	ble.n	800391e <_dtoa_r+0xa56>
 80039ae:	4629      	mov	r1, r5
 80039b0:	2300      	movs	r3, #0
 80039b2:	220a      	movs	r2, #10
 80039b4:	4630      	mov	r0, r6
 80039b6:	f000 f885 	bl	8003ac4 <__multadd>
 80039ba:	4605      	mov	r5, r0
 80039bc:	e7ea      	b.n	8003994 <_dtoa_r+0xacc>
 80039be:	bf00      	nop
 80039c0:	08004e8b 	.word	0x08004e8b
 80039c4:	08004de4 	.word	0x08004de4
 80039c8:	08004e08 	.word	0x08004e08

080039cc <_localeconv_r>:
 80039cc:	4800      	ldr	r0, [pc, #0]	; (80039d0 <_localeconv_r+0x4>)
 80039ce:	4770      	bx	lr
 80039d0:	20000164 	.word	0x20000164

080039d4 <malloc>:
 80039d4:	4b02      	ldr	r3, [pc, #8]	; (80039e0 <malloc+0xc>)
 80039d6:	4601      	mov	r1, r0
 80039d8:	6818      	ldr	r0, [r3, #0]
 80039da:	f000 bbef 	b.w	80041bc <_malloc_r>
 80039de:	bf00      	nop
 80039e0:	20000010 	.word	0x20000010

080039e4 <memcpy>:
 80039e4:	440a      	add	r2, r1
 80039e6:	4291      	cmp	r1, r2
 80039e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80039ec:	d100      	bne.n	80039f0 <memcpy+0xc>
 80039ee:	4770      	bx	lr
 80039f0:	b510      	push	{r4, lr}
 80039f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039fa:	4291      	cmp	r1, r2
 80039fc:	d1f9      	bne.n	80039f2 <memcpy+0xe>
 80039fe:	bd10      	pop	{r4, pc}

08003a00 <_Balloc>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a04:	4604      	mov	r4, r0
 8003a06:	460d      	mov	r5, r1
 8003a08:	b976      	cbnz	r6, 8003a28 <_Balloc+0x28>
 8003a0a:	2010      	movs	r0, #16
 8003a0c:	f7ff ffe2 	bl	80039d4 <malloc>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6260      	str	r0, [r4, #36]	; 0x24
 8003a14:	b920      	cbnz	r0, 8003a20 <_Balloc+0x20>
 8003a16:	4b18      	ldr	r3, [pc, #96]	; (8003a78 <_Balloc+0x78>)
 8003a18:	4818      	ldr	r0, [pc, #96]	; (8003a7c <_Balloc+0x7c>)
 8003a1a:	2166      	movs	r1, #102	; 0x66
 8003a1c:	f000 fc38 	bl	8004290 <__assert_func>
 8003a20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003a24:	6006      	str	r6, [r0, #0]
 8003a26:	60c6      	str	r6, [r0, #12]
 8003a28:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003a2a:	68f3      	ldr	r3, [r6, #12]
 8003a2c:	b183      	cbz	r3, 8003a50 <_Balloc+0x50>
 8003a2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003a36:	b9b8      	cbnz	r0, 8003a68 <_Balloc+0x68>
 8003a38:	2101      	movs	r1, #1
 8003a3a:	fa01 f605 	lsl.w	r6, r1, r5
 8003a3e:	1d72      	adds	r2, r6, #5
 8003a40:	0092      	lsls	r2, r2, #2
 8003a42:	4620      	mov	r0, r4
 8003a44:	f000 fb5a 	bl	80040fc <_calloc_r>
 8003a48:	b160      	cbz	r0, 8003a64 <_Balloc+0x64>
 8003a4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8003a4e:	e00e      	b.n	8003a6e <_Balloc+0x6e>
 8003a50:	2221      	movs	r2, #33	; 0x21
 8003a52:	2104      	movs	r1, #4
 8003a54:	4620      	mov	r0, r4
 8003a56:	f000 fb51 	bl	80040fc <_calloc_r>
 8003a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a5c:	60f0      	str	r0, [r6, #12]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e4      	bne.n	8003a2e <_Balloc+0x2e>
 8003a64:	2000      	movs	r0, #0
 8003a66:	bd70      	pop	{r4, r5, r6, pc}
 8003a68:	6802      	ldr	r2, [r0, #0]
 8003a6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003a74:	e7f7      	b.n	8003a66 <_Balloc+0x66>
 8003a76:	bf00      	nop
 8003a78:	08004e15 	.word	0x08004e15
 8003a7c:	08004e9c 	.word	0x08004e9c

08003a80 <_Bfree>:
 8003a80:	b570      	push	{r4, r5, r6, lr}
 8003a82:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003a84:	4605      	mov	r5, r0
 8003a86:	460c      	mov	r4, r1
 8003a88:	b976      	cbnz	r6, 8003aa8 <_Bfree+0x28>
 8003a8a:	2010      	movs	r0, #16
 8003a8c:	f7ff ffa2 	bl	80039d4 <malloc>
 8003a90:	4602      	mov	r2, r0
 8003a92:	6268      	str	r0, [r5, #36]	; 0x24
 8003a94:	b920      	cbnz	r0, 8003aa0 <_Bfree+0x20>
 8003a96:	4b09      	ldr	r3, [pc, #36]	; (8003abc <_Bfree+0x3c>)
 8003a98:	4809      	ldr	r0, [pc, #36]	; (8003ac0 <_Bfree+0x40>)
 8003a9a:	218a      	movs	r1, #138	; 0x8a
 8003a9c:	f000 fbf8 	bl	8004290 <__assert_func>
 8003aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8003aa4:	6006      	str	r6, [r0, #0]
 8003aa6:	60c6      	str	r6, [r0, #12]
 8003aa8:	b13c      	cbz	r4, 8003aba <_Bfree+0x3a>
 8003aaa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003aac:	6862      	ldr	r2, [r4, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ab4:	6021      	str	r1, [r4, #0]
 8003ab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003aba:	bd70      	pop	{r4, r5, r6, pc}
 8003abc:	08004e15 	.word	0x08004e15
 8003ac0:	08004e9c 	.word	0x08004e9c

08003ac4 <__multadd>:
 8003ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ac8:	690e      	ldr	r6, [r1, #16]
 8003aca:	4607      	mov	r7, r0
 8003acc:	4698      	mov	r8, r3
 8003ace:	460c      	mov	r4, r1
 8003ad0:	f101 0014 	add.w	r0, r1, #20
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6805      	ldr	r5, [r0, #0]
 8003ad8:	b2a9      	uxth	r1, r5
 8003ada:	fb02 8101 	mla	r1, r2, r1, r8
 8003ade:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8003ae2:	0c2d      	lsrs	r5, r5, #16
 8003ae4:	fb02 c505 	mla	r5, r2, r5, ip
 8003ae8:	b289      	uxth	r1, r1
 8003aea:	3301      	adds	r3, #1
 8003aec:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8003af0:	429e      	cmp	r6, r3
 8003af2:	f840 1b04 	str.w	r1, [r0], #4
 8003af6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8003afa:	dcec      	bgt.n	8003ad6 <__multadd+0x12>
 8003afc:	f1b8 0f00 	cmp.w	r8, #0
 8003b00:	d022      	beq.n	8003b48 <__multadd+0x84>
 8003b02:	68a3      	ldr	r3, [r4, #8]
 8003b04:	42b3      	cmp	r3, r6
 8003b06:	dc19      	bgt.n	8003b3c <__multadd+0x78>
 8003b08:	6861      	ldr	r1, [r4, #4]
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	3101      	adds	r1, #1
 8003b0e:	f7ff ff77 	bl	8003a00 <_Balloc>
 8003b12:	4605      	mov	r5, r0
 8003b14:	b928      	cbnz	r0, 8003b22 <__multadd+0x5e>
 8003b16:	4602      	mov	r2, r0
 8003b18:	4b0d      	ldr	r3, [pc, #52]	; (8003b50 <__multadd+0x8c>)
 8003b1a:	480e      	ldr	r0, [pc, #56]	; (8003b54 <__multadd+0x90>)
 8003b1c:	21b5      	movs	r1, #181	; 0xb5
 8003b1e:	f000 fbb7 	bl	8004290 <__assert_func>
 8003b22:	6922      	ldr	r2, [r4, #16]
 8003b24:	3202      	adds	r2, #2
 8003b26:	f104 010c 	add.w	r1, r4, #12
 8003b2a:	0092      	lsls	r2, r2, #2
 8003b2c:	300c      	adds	r0, #12
 8003b2e:	f7ff ff59 	bl	80039e4 <memcpy>
 8003b32:	4621      	mov	r1, r4
 8003b34:	4638      	mov	r0, r7
 8003b36:	f7ff ffa3 	bl	8003a80 <_Bfree>
 8003b3a:	462c      	mov	r4, r5
 8003b3c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8003b40:	3601      	adds	r6, #1
 8003b42:	f8c3 8014 	str.w	r8, [r3, #20]
 8003b46:	6126      	str	r6, [r4, #16]
 8003b48:	4620      	mov	r0, r4
 8003b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b4e:	bf00      	nop
 8003b50:	08004e8b 	.word	0x08004e8b
 8003b54:	08004e9c 	.word	0x08004e9c

08003b58 <__hi0bits>:
 8003b58:	0c03      	lsrs	r3, r0, #16
 8003b5a:	041b      	lsls	r3, r3, #16
 8003b5c:	b9d3      	cbnz	r3, 8003b94 <__hi0bits+0x3c>
 8003b5e:	0400      	lsls	r0, r0, #16
 8003b60:	2310      	movs	r3, #16
 8003b62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8003b66:	bf04      	itt	eq
 8003b68:	0200      	lsleq	r0, r0, #8
 8003b6a:	3308      	addeq	r3, #8
 8003b6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8003b70:	bf04      	itt	eq
 8003b72:	0100      	lsleq	r0, r0, #4
 8003b74:	3304      	addeq	r3, #4
 8003b76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8003b7a:	bf04      	itt	eq
 8003b7c:	0080      	lsleq	r0, r0, #2
 8003b7e:	3302      	addeq	r3, #2
 8003b80:	2800      	cmp	r0, #0
 8003b82:	db05      	blt.n	8003b90 <__hi0bits+0x38>
 8003b84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8003b88:	f103 0301 	add.w	r3, r3, #1
 8003b8c:	bf08      	it	eq
 8003b8e:	2320      	moveq	r3, #32
 8003b90:	4618      	mov	r0, r3
 8003b92:	4770      	bx	lr
 8003b94:	2300      	movs	r3, #0
 8003b96:	e7e4      	b.n	8003b62 <__hi0bits+0xa>

08003b98 <__lo0bits>:
 8003b98:	6803      	ldr	r3, [r0, #0]
 8003b9a:	f013 0207 	ands.w	r2, r3, #7
 8003b9e:	4601      	mov	r1, r0
 8003ba0:	d00b      	beq.n	8003bba <__lo0bits+0x22>
 8003ba2:	07da      	lsls	r2, r3, #31
 8003ba4:	d424      	bmi.n	8003bf0 <__lo0bits+0x58>
 8003ba6:	0798      	lsls	r0, r3, #30
 8003ba8:	bf49      	itett	mi
 8003baa:	085b      	lsrmi	r3, r3, #1
 8003bac:	089b      	lsrpl	r3, r3, #2
 8003bae:	2001      	movmi	r0, #1
 8003bb0:	600b      	strmi	r3, [r1, #0]
 8003bb2:	bf5c      	itt	pl
 8003bb4:	600b      	strpl	r3, [r1, #0]
 8003bb6:	2002      	movpl	r0, #2
 8003bb8:	4770      	bx	lr
 8003bba:	b298      	uxth	r0, r3
 8003bbc:	b9b0      	cbnz	r0, 8003bec <__lo0bits+0x54>
 8003bbe:	0c1b      	lsrs	r3, r3, #16
 8003bc0:	2010      	movs	r0, #16
 8003bc2:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003bc6:	bf04      	itt	eq
 8003bc8:	0a1b      	lsreq	r3, r3, #8
 8003bca:	3008      	addeq	r0, #8
 8003bcc:	071a      	lsls	r2, r3, #28
 8003bce:	bf04      	itt	eq
 8003bd0:	091b      	lsreq	r3, r3, #4
 8003bd2:	3004      	addeq	r0, #4
 8003bd4:	079a      	lsls	r2, r3, #30
 8003bd6:	bf04      	itt	eq
 8003bd8:	089b      	lsreq	r3, r3, #2
 8003bda:	3002      	addeq	r0, #2
 8003bdc:	07da      	lsls	r2, r3, #31
 8003bde:	d403      	bmi.n	8003be8 <__lo0bits+0x50>
 8003be0:	085b      	lsrs	r3, r3, #1
 8003be2:	f100 0001 	add.w	r0, r0, #1
 8003be6:	d005      	beq.n	8003bf4 <__lo0bits+0x5c>
 8003be8:	600b      	str	r3, [r1, #0]
 8003bea:	4770      	bx	lr
 8003bec:	4610      	mov	r0, r2
 8003bee:	e7e8      	b.n	8003bc2 <__lo0bits+0x2a>
 8003bf0:	2000      	movs	r0, #0
 8003bf2:	4770      	bx	lr
 8003bf4:	2020      	movs	r0, #32
 8003bf6:	4770      	bx	lr

08003bf8 <__i2b>:
 8003bf8:	b510      	push	{r4, lr}
 8003bfa:	460c      	mov	r4, r1
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	f7ff feff 	bl	8003a00 <_Balloc>
 8003c02:	4602      	mov	r2, r0
 8003c04:	b928      	cbnz	r0, 8003c12 <__i2b+0x1a>
 8003c06:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <__i2b+0x24>)
 8003c08:	4805      	ldr	r0, [pc, #20]	; (8003c20 <__i2b+0x28>)
 8003c0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003c0e:	f000 fb3f 	bl	8004290 <__assert_func>
 8003c12:	2301      	movs	r3, #1
 8003c14:	6144      	str	r4, [r0, #20]
 8003c16:	6103      	str	r3, [r0, #16]
 8003c18:	bd10      	pop	{r4, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08004e8b 	.word	0x08004e8b
 8003c20:	08004e9c 	.word	0x08004e9c

08003c24 <__multiply>:
 8003c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c28:	4614      	mov	r4, r2
 8003c2a:	690a      	ldr	r2, [r1, #16]
 8003c2c:	6923      	ldr	r3, [r4, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	bfb8      	it	lt
 8003c32:	460b      	movlt	r3, r1
 8003c34:	460d      	mov	r5, r1
 8003c36:	bfbc      	itt	lt
 8003c38:	4625      	movlt	r5, r4
 8003c3a:	461c      	movlt	r4, r3
 8003c3c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8003c40:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003c44:	68ab      	ldr	r3, [r5, #8]
 8003c46:	6869      	ldr	r1, [r5, #4]
 8003c48:	eb0a 0709 	add.w	r7, sl, r9
 8003c4c:	42bb      	cmp	r3, r7
 8003c4e:	b085      	sub	sp, #20
 8003c50:	bfb8      	it	lt
 8003c52:	3101      	addlt	r1, #1
 8003c54:	f7ff fed4 	bl	8003a00 <_Balloc>
 8003c58:	b930      	cbnz	r0, 8003c68 <__multiply+0x44>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b42      	ldr	r3, [pc, #264]	; (8003d68 <__multiply+0x144>)
 8003c5e:	4843      	ldr	r0, [pc, #268]	; (8003d6c <__multiply+0x148>)
 8003c60:	f240 115d 	movw	r1, #349	; 0x15d
 8003c64:	f000 fb14 	bl	8004290 <__assert_func>
 8003c68:	f100 0614 	add.w	r6, r0, #20
 8003c6c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8003c70:	4633      	mov	r3, r6
 8003c72:	2200      	movs	r2, #0
 8003c74:	4543      	cmp	r3, r8
 8003c76:	d31e      	bcc.n	8003cb6 <__multiply+0x92>
 8003c78:	f105 0c14 	add.w	ip, r5, #20
 8003c7c:	f104 0314 	add.w	r3, r4, #20
 8003c80:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8003c84:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8003c88:	9202      	str	r2, [sp, #8]
 8003c8a:	ebac 0205 	sub.w	r2, ip, r5
 8003c8e:	3a15      	subs	r2, #21
 8003c90:	f022 0203 	bic.w	r2, r2, #3
 8003c94:	3204      	adds	r2, #4
 8003c96:	f105 0115 	add.w	r1, r5, #21
 8003c9a:	458c      	cmp	ip, r1
 8003c9c:	bf38      	it	cc
 8003c9e:	2204      	movcc	r2, #4
 8003ca0:	9201      	str	r2, [sp, #4]
 8003ca2:	9a02      	ldr	r2, [sp, #8]
 8003ca4:	9303      	str	r3, [sp, #12]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d808      	bhi.n	8003cbc <__multiply+0x98>
 8003caa:	2f00      	cmp	r7, #0
 8003cac:	dc55      	bgt.n	8003d5a <__multiply+0x136>
 8003cae:	6107      	str	r7, [r0, #16]
 8003cb0:	b005      	add	sp, #20
 8003cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cb6:	f843 2b04 	str.w	r2, [r3], #4
 8003cba:	e7db      	b.n	8003c74 <__multiply+0x50>
 8003cbc:	f8b3 a000 	ldrh.w	sl, [r3]
 8003cc0:	f1ba 0f00 	cmp.w	sl, #0
 8003cc4:	d020      	beq.n	8003d08 <__multiply+0xe4>
 8003cc6:	f105 0e14 	add.w	lr, r5, #20
 8003cca:	46b1      	mov	r9, r6
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f85e 4b04 	ldr.w	r4, [lr], #4
 8003cd2:	f8d9 b000 	ldr.w	fp, [r9]
 8003cd6:	b2a1      	uxth	r1, r4
 8003cd8:	fa1f fb8b 	uxth.w	fp, fp
 8003cdc:	fb0a b101 	mla	r1, sl, r1, fp
 8003ce0:	4411      	add	r1, r2
 8003ce2:	f8d9 2000 	ldr.w	r2, [r9]
 8003ce6:	0c24      	lsrs	r4, r4, #16
 8003ce8:	0c12      	lsrs	r2, r2, #16
 8003cea:	fb0a 2404 	mla	r4, sl, r4, r2
 8003cee:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8003cf2:	b289      	uxth	r1, r1
 8003cf4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8003cf8:	45f4      	cmp	ip, lr
 8003cfa:	f849 1b04 	str.w	r1, [r9], #4
 8003cfe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8003d02:	d8e4      	bhi.n	8003cce <__multiply+0xaa>
 8003d04:	9901      	ldr	r1, [sp, #4]
 8003d06:	5072      	str	r2, [r6, r1]
 8003d08:	9a03      	ldr	r2, [sp, #12]
 8003d0a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	f1b9 0f00 	cmp.w	r9, #0
 8003d14:	d01f      	beq.n	8003d56 <__multiply+0x132>
 8003d16:	6834      	ldr	r4, [r6, #0]
 8003d18:	f105 0114 	add.w	r1, r5, #20
 8003d1c:	46b6      	mov	lr, r6
 8003d1e:	f04f 0a00 	mov.w	sl, #0
 8003d22:	880a      	ldrh	r2, [r1, #0]
 8003d24:	f8be b002 	ldrh.w	fp, [lr, #2]
 8003d28:	fb09 b202 	mla	r2, r9, r2, fp
 8003d2c:	4492      	add	sl, r2
 8003d2e:	b2a4      	uxth	r4, r4
 8003d30:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8003d34:	f84e 4b04 	str.w	r4, [lr], #4
 8003d38:	f851 4b04 	ldr.w	r4, [r1], #4
 8003d3c:	f8be 2000 	ldrh.w	r2, [lr]
 8003d40:	0c24      	lsrs	r4, r4, #16
 8003d42:	fb09 2404 	mla	r4, r9, r4, r2
 8003d46:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8003d4a:	458c      	cmp	ip, r1
 8003d4c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8003d50:	d8e7      	bhi.n	8003d22 <__multiply+0xfe>
 8003d52:	9a01      	ldr	r2, [sp, #4]
 8003d54:	50b4      	str	r4, [r6, r2]
 8003d56:	3604      	adds	r6, #4
 8003d58:	e7a3      	b.n	8003ca2 <__multiply+0x7e>
 8003d5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1a5      	bne.n	8003cae <__multiply+0x8a>
 8003d62:	3f01      	subs	r7, #1
 8003d64:	e7a1      	b.n	8003caa <__multiply+0x86>
 8003d66:	bf00      	nop
 8003d68:	08004e8b 	.word	0x08004e8b
 8003d6c:	08004e9c 	.word	0x08004e9c

08003d70 <__pow5mult>:
 8003d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	4615      	mov	r5, r2
 8003d76:	f012 0203 	ands.w	r2, r2, #3
 8003d7a:	4606      	mov	r6, r0
 8003d7c:	460f      	mov	r7, r1
 8003d7e:	d007      	beq.n	8003d90 <__pow5mult+0x20>
 8003d80:	4c25      	ldr	r4, [pc, #148]	; (8003e18 <__pow5mult+0xa8>)
 8003d82:	3a01      	subs	r2, #1
 8003d84:	2300      	movs	r3, #0
 8003d86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003d8a:	f7ff fe9b 	bl	8003ac4 <__multadd>
 8003d8e:	4607      	mov	r7, r0
 8003d90:	10ad      	asrs	r5, r5, #2
 8003d92:	d03d      	beq.n	8003e10 <__pow5mult+0xa0>
 8003d94:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003d96:	b97c      	cbnz	r4, 8003db8 <__pow5mult+0x48>
 8003d98:	2010      	movs	r0, #16
 8003d9a:	f7ff fe1b 	bl	80039d4 <malloc>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	6270      	str	r0, [r6, #36]	; 0x24
 8003da2:	b928      	cbnz	r0, 8003db0 <__pow5mult+0x40>
 8003da4:	4b1d      	ldr	r3, [pc, #116]	; (8003e1c <__pow5mult+0xac>)
 8003da6:	481e      	ldr	r0, [pc, #120]	; (8003e20 <__pow5mult+0xb0>)
 8003da8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8003dac:	f000 fa70 	bl	8004290 <__assert_func>
 8003db0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003db4:	6004      	str	r4, [r0, #0]
 8003db6:	60c4      	str	r4, [r0, #12]
 8003db8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003dbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003dc0:	b94c      	cbnz	r4, 8003dd6 <__pow5mult+0x66>
 8003dc2:	f240 2171 	movw	r1, #625	; 0x271
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	f7ff ff16 	bl	8003bf8 <__i2b>
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f8c8 0008 	str.w	r0, [r8, #8]
 8003dd2:	4604      	mov	r4, r0
 8003dd4:	6003      	str	r3, [r0, #0]
 8003dd6:	f04f 0900 	mov.w	r9, #0
 8003dda:	07eb      	lsls	r3, r5, #31
 8003ddc:	d50a      	bpl.n	8003df4 <__pow5mult+0x84>
 8003dde:	4639      	mov	r1, r7
 8003de0:	4622      	mov	r2, r4
 8003de2:	4630      	mov	r0, r6
 8003de4:	f7ff ff1e 	bl	8003c24 <__multiply>
 8003de8:	4639      	mov	r1, r7
 8003dea:	4680      	mov	r8, r0
 8003dec:	4630      	mov	r0, r6
 8003dee:	f7ff fe47 	bl	8003a80 <_Bfree>
 8003df2:	4647      	mov	r7, r8
 8003df4:	106d      	asrs	r5, r5, #1
 8003df6:	d00b      	beq.n	8003e10 <__pow5mult+0xa0>
 8003df8:	6820      	ldr	r0, [r4, #0]
 8003dfa:	b938      	cbnz	r0, 8003e0c <__pow5mult+0x9c>
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4621      	mov	r1, r4
 8003e00:	4630      	mov	r0, r6
 8003e02:	f7ff ff0f 	bl	8003c24 <__multiply>
 8003e06:	6020      	str	r0, [r4, #0]
 8003e08:	f8c0 9000 	str.w	r9, [r0]
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	e7e4      	b.n	8003dda <__pow5mult+0x6a>
 8003e10:	4638      	mov	r0, r7
 8003e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e16:	bf00      	nop
 8003e18:	08004ff0 	.word	0x08004ff0
 8003e1c:	08004e15 	.word	0x08004e15
 8003e20:	08004e9c 	.word	0x08004e9c

08003e24 <__lshift>:
 8003e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e28:	460c      	mov	r4, r1
 8003e2a:	6849      	ldr	r1, [r1, #4]
 8003e2c:	6923      	ldr	r3, [r4, #16]
 8003e2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003e32:	68a3      	ldr	r3, [r4, #8]
 8003e34:	4607      	mov	r7, r0
 8003e36:	4691      	mov	r9, r2
 8003e38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003e3c:	f108 0601 	add.w	r6, r8, #1
 8003e40:	42b3      	cmp	r3, r6
 8003e42:	db0b      	blt.n	8003e5c <__lshift+0x38>
 8003e44:	4638      	mov	r0, r7
 8003e46:	f7ff fddb 	bl	8003a00 <_Balloc>
 8003e4a:	4605      	mov	r5, r0
 8003e4c:	b948      	cbnz	r0, 8003e62 <__lshift+0x3e>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	4b28      	ldr	r3, [pc, #160]	; (8003ef4 <__lshift+0xd0>)
 8003e52:	4829      	ldr	r0, [pc, #164]	; (8003ef8 <__lshift+0xd4>)
 8003e54:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003e58:	f000 fa1a 	bl	8004290 <__assert_func>
 8003e5c:	3101      	adds	r1, #1
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	e7ee      	b.n	8003e40 <__lshift+0x1c>
 8003e62:	2300      	movs	r3, #0
 8003e64:	f100 0114 	add.w	r1, r0, #20
 8003e68:	f100 0210 	add.w	r2, r0, #16
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	4553      	cmp	r3, sl
 8003e70:	db33      	blt.n	8003eda <__lshift+0xb6>
 8003e72:	6920      	ldr	r0, [r4, #16]
 8003e74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003e78:	f104 0314 	add.w	r3, r4, #20
 8003e7c:	f019 091f 	ands.w	r9, r9, #31
 8003e80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003e84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003e88:	d02b      	beq.n	8003ee2 <__lshift+0xbe>
 8003e8a:	f1c9 0e20 	rsb	lr, r9, #32
 8003e8e:	468a      	mov	sl, r1
 8003e90:	2200      	movs	r2, #0
 8003e92:	6818      	ldr	r0, [r3, #0]
 8003e94:	fa00 f009 	lsl.w	r0, r0, r9
 8003e98:	4302      	orrs	r2, r0
 8003e9a:	f84a 2b04 	str.w	r2, [sl], #4
 8003e9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ea2:	459c      	cmp	ip, r3
 8003ea4:	fa22 f20e 	lsr.w	r2, r2, lr
 8003ea8:	d8f3      	bhi.n	8003e92 <__lshift+0x6e>
 8003eaa:	ebac 0304 	sub.w	r3, ip, r4
 8003eae:	3b15      	subs	r3, #21
 8003eb0:	f023 0303 	bic.w	r3, r3, #3
 8003eb4:	3304      	adds	r3, #4
 8003eb6:	f104 0015 	add.w	r0, r4, #21
 8003eba:	4584      	cmp	ip, r0
 8003ebc:	bf38      	it	cc
 8003ebe:	2304      	movcc	r3, #4
 8003ec0:	50ca      	str	r2, [r1, r3]
 8003ec2:	b10a      	cbz	r2, 8003ec8 <__lshift+0xa4>
 8003ec4:	f108 0602 	add.w	r6, r8, #2
 8003ec8:	3e01      	subs	r6, #1
 8003eca:	4638      	mov	r0, r7
 8003ecc:	612e      	str	r6, [r5, #16]
 8003ece:	4621      	mov	r1, r4
 8003ed0:	f7ff fdd6 	bl	8003a80 <_Bfree>
 8003ed4:	4628      	mov	r0, r5
 8003ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eda:	f842 0f04 	str.w	r0, [r2, #4]!
 8003ede:	3301      	adds	r3, #1
 8003ee0:	e7c5      	b.n	8003e6e <__lshift+0x4a>
 8003ee2:	3904      	subs	r1, #4
 8003ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee8:	f841 2f04 	str.w	r2, [r1, #4]!
 8003eec:	459c      	cmp	ip, r3
 8003eee:	d8f9      	bhi.n	8003ee4 <__lshift+0xc0>
 8003ef0:	e7ea      	b.n	8003ec8 <__lshift+0xa4>
 8003ef2:	bf00      	nop
 8003ef4:	08004e8b 	.word	0x08004e8b
 8003ef8:	08004e9c 	.word	0x08004e9c

08003efc <__mcmp>:
 8003efc:	b530      	push	{r4, r5, lr}
 8003efe:	6902      	ldr	r2, [r0, #16]
 8003f00:	690c      	ldr	r4, [r1, #16]
 8003f02:	1b12      	subs	r2, r2, r4
 8003f04:	d10e      	bne.n	8003f24 <__mcmp+0x28>
 8003f06:	f100 0314 	add.w	r3, r0, #20
 8003f0a:	3114      	adds	r1, #20
 8003f0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8003f10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8003f14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8003f18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8003f1c:	42a5      	cmp	r5, r4
 8003f1e:	d003      	beq.n	8003f28 <__mcmp+0x2c>
 8003f20:	d305      	bcc.n	8003f2e <__mcmp+0x32>
 8003f22:	2201      	movs	r2, #1
 8003f24:	4610      	mov	r0, r2
 8003f26:	bd30      	pop	{r4, r5, pc}
 8003f28:	4283      	cmp	r3, r0
 8003f2a:	d3f3      	bcc.n	8003f14 <__mcmp+0x18>
 8003f2c:	e7fa      	b.n	8003f24 <__mcmp+0x28>
 8003f2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f32:	e7f7      	b.n	8003f24 <__mcmp+0x28>

08003f34 <__mdiff>:
 8003f34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f38:	460c      	mov	r4, r1
 8003f3a:	4606      	mov	r6, r0
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4620      	mov	r0, r4
 8003f40:	4617      	mov	r7, r2
 8003f42:	f7ff ffdb 	bl	8003efc <__mcmp>
 8003f46:	1e05      	subs	r5, r0, #0
 8003f48:	d110      	bne.n	8003f6c <__mdiff+0x38>
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	4630      	mov	r0, r6
 8003f4e:	f7ff fd57 	bl	8003a00 <_Balloc>
 8003f52:	b930      	cbnz	r0, 8003f62 <__mdiff+0x2e>
 8003f54:	4b39      	ldr	r3, [pc, #228]	; (800403c <__mdiff+0x108>)
 8003f56:	4602      	mov	r2, r0
 8003f58:	f240 2132 	movw	r1, #562	; 0x232
 8003f5c:	4838      	ldr	r0, [pc, #224]	; (8004040 <__mdiff+0x10c>)
 8003f5e:	f000 f997 	bl	8004290 <__assert_func>
 8003f62:	2301      	movs	r3, #1
 8003f64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6c:	bfa4      	itt	ge
 8003f6e:	463b      	movge	r3, r7
 8003f70:	4627      	movge	r7, r4
 8003f72:	4630      	mov	r0, r6
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	bfa6      	itte	ge
 8003f78:	461c      	movge	r4, r3
 8003f7a:	2500      	movge	r5, #0
 8003f7c:	2501      	movlt	r5, #1
 8003f7e:	f7ff fd3f 	bl	8003a00 <_Balloc>
 8003f82:	b920      	cbnz	r0, 8003f8e <__mdiff+0x5a>
 8003f84:	4b2d      	ldr	r3, [pc, #180]	; (800403c <__mdiff+0x108>)
 8003f86:	4602      	mov	r2, r0
 8003f88:	f44f 7110 	mov.w	r1, #576	; 0x240
 8003f8c:	e7e6      	b.n	8003f5c <__mdiff+0x28>
 8003f8e:	693e      	ldr	r6, [r7, #16]
 8003f90:	60c5      	str	r5, [r0, #12]
 8003f92:	6925      	ldr	r5, [r4, #16]
 8003f94:	f107 0114 	add.w	r1, r7, #20
 8003f98:	f104 0914 	add.w	r9, r4, #20
 8003f9c:	f100 0e14 	add.w	lr, r0, #20
 8003fa0:	f107 0210 	add.w	r2, r7, #16
 8003fa4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8003fa8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8003fac:	46f2      	mov	sl, lr
 8003fae:	2700      	movs	r7, #0
 8003fb0:	f859 3b04 	ldr.w	r3, [r9], #4
 8003fb4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8003fb8:	fa1f f883 	uxth.w	r8, r3
 8003fbc:	fa17 f78b 	uxtah	r7, r7, fp
 8003fc0:	0c1b      	lsrs	r3, r3, #16
 8003fc2:	eba7 0808 	sub.w	r8, r7, r8
 8003fc6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8003fca:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8003fce:	fa1f f888 	uxth.w	r8, r8
 8003fd2:	141f      	asrs	r7, r3, #16
 8003fd4:	454d      	cmp	r5, r9
 8003fd6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8003fda:	f84a 3b04 	str.w	r3, [sl], #4
 8003fde:	d8e7      	bhi.n	8003fb0 <__mdiff+0x7c>
 8003fe0:	1b2b      	subs	r3, r5, r4
 8003fe2:	3b15      	subs	r3, #21
 8003fe4:	f023 0303 	bic.w	r3, r3, #3
 8003fe8:	3304      	adds	r3, #4
 8003fea:	3415      	adds	r4, #21
 8003fec:	42a5      	cmp	r5, r4
 8003fee:	bf38      	it	cc
 8003ff0:	2304      	movcc	r3, #4
 8003ff2:	4419      	add	r1, r3
 8003ff4:	4473      	add	r3, lr
 8003ff6:	469e      	mov	lr, r3
 8003ff8:	460d      	mov	r5, r1
 8003ffa:	4565      	cmp	r5, ip
 8003ffc:	d30e      	bcc.n	800401c <__mdiff+0xe8>
 8003ffe:	f10c 0203 	add.w	r2, ip, #3
 8004002:	1a52      	subs	r2, r2, r1
 8004004:	f022 0203 	bic.w	r2, r2, #3
 8004008:	3903      	subs	r1, #3
 800400a:	458c      	cmp	ip, r1
 800400c:	bf38      	it	cc
 800400e:	2200      	movcc	r2, #0
 8004010:	441a      	add	r2, r3
 8004012:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8004016:	b17b      	cbz	r3, 8004038 <__mdiff+0x104>
 8004018:	6106      	str	r6, [r0, #16]
 800401a:	e7a5      	b.n	8003f68 <__mdiff+0x34>
 800401c:	f855 8b04 	ldr.w	r8, [r5], #4
 8004020:	fa17 f488 	uxtah	r4, r7, r8
 8004024:	1422      	asrs	r2, r4, #16
 8004026:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800402a:	b2a4      	uxth	r4, r4
 800402c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004030:	f84e 4b04 	str.w	r4, [lr], #4
 8004034:	1417      	asrs	r7, r2, #16
 8004036:	e7e0      	b.n	8003ffa <__mdiff+0xc6>
 8004038:	3e01      	subs	r6, #1
 800403a:	e7ea      	b.n	8004012 <__mdiff+0xde>
 800403c:	08004e8b 	.word	0x08004e8b
 8004040:	08004e9c 	.word	0x08004e9c

08004044 <__d2b>:
 8004044:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004048:	4689      	mov	r9, r1
 800404a:	2101      	movs	r1, #1
 800404c:	ec57 6b10 	vmov	r6, r7, d0
 8004050:	4690      	mov	r8, r2
 8004052:	f7ff fcd5 	bl	8003a00 <_Balloc>
 8004056:	4604      	mov	r4, r0
 8004058:	b930      	cbnz	r0, 8004068 <__d2b+0x24>
 800405a:	4602      	mov	r2, r0
 800405c:	4b25      	ldr	r3, [pc, #148]	; (80040f4 <__d2b+0xb0>)
 800405e:	4826      	ldr	r0, [pc, #152]	; (80040f8 <__d2b+0xb4>)
 8004060:	f240 310a 	movw	r1, #778	; 0x30a
 8004064:	f000 f914 	bl	8004290 <__assert_func>
 8004068:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800406c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004070:	bb35      	cbnz	r5, 80040c0 <__d2b+0x7c>
 8004072:	2e00      	cmp	r6, #0
 8004074:	9301      	str	r3, [sp, #4]
 8004076:	d028      	beq.n	80040ca <__d2b+0x86>
 8004078:	4668      	mov	r0, sp
 800407a:	9600      	str	r6, [sp, #0]
 800407c:	f7ff fd8c 	bl	8003b98 <__lo0bits>
 8004080:	9900      	ldr	r1, [sp, #0]
 8004082:	b300      	cbz	r0, 80040c6 <__d2b+0x82>
 8004084:	9a01      	ldr	r2, [sp, #4]
 8004086:	f1c0 0320 	rsb	r3, r0, #32
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	430b      	orrs	r3, r1
 8004090:	40c2      	lsrs	r2, r0
 8004092:	6163      	str	r3, [r4, #20]
 8004094:	9201      	str	r2, [sp, #4]
 8004096:	9b01      	ldr	r3, [sp, #4]
 8004098:	61a3      	str	r3, [r4, #24]
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2202      	movne	r2, #2
 80040a0:	2201      	moveq	r2, #1
 80040a2:	6122      	str	r2, [r4, #16]
 80040a4:	b1d5      	cbz	r5, 80040dc <__d2b+0x98>
 80040a6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80040aa:	4405      	add	r5, r0
 80040ac:	f8c9 5000 	str.w	r5, [r9]
 80040b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80040b4:	f8c8 0000 	str.w	r0, [r8]
 80040b8:	4620      	mov	r0, r4
 80040ba:	b003      	add	sp, #12
 80040bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80040c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040c4:	e7d5      	b.n	8004072 <__d2b+0x2e>
 80040c6:	6161      	str	r1, [r4, #20]
 80040c8:	e7e5      	b.n	8004096 <__d2b+0x52>
 80040ca:	a801      	add	r0, sp, #4
 80040cc:	f7ff fd64 	bl	8003b98 <__lo0bits>
 80040d0:	9b01      	ldr	r3, [sp, #4]
 80040d2:	6163      	str	r3, [r4, #20]
 80040d4:	2201      	movs	r2, #1
 80040d6:	6122      	str	r2, [r4, #16]
 80040d8:	3020      	adds	r0, #32
 80040da:	e7e3      	b.n	80040a4 <__d2b+0x60>
 80040dc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80040e0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80040e4:	f8c9 0000 	str.w	r0, [r9]
 80040e8:	6918      	ldr	r0, [r3, #16]
 80040ea:	f7ff fd35 	bl	8003b58 <__hi0bits>
 80040ee:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80040f2:	e7df      	b.n	80040b4 <__d2b+0x70>
 80040f4:	08004e8b 	.word	0x08004e8b
 80040f8:	08004e9c 	.word	0x08004e9c

080040fc <_calloc_r>:
 80040fc:	b513      	push	{r0, r1, r4, lr}
 80040fe:	434a      	muls	r2, r1
 8004100:	4611      	mov	r1, r2
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	f000 f85a 	bl	80041bc <_malloc_r>
 8004108:	4604      	mov	r4, r0
 800410a:	b118      	cbz	r0, 8004114 <_calloc_r+0x18>
 800410c:	9a01      	ldr	r2, [sp, #4]
 800410e:	2100      	movs	r1, #0
 8004110:	f7fe fa00 	bl	8002514 <memset>
 8004114:	4620      	mov	r0, r4
 8004116:	b002      	add	sp, #8
 8004118:	bd10      	pop	{r4, pc}
	...

0800411c <_free_r>:
 800411c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800411e:	2900      	cmp	r1, #0
 8004120:	d048      	beq.n	80041b4 <_free_r+0x98>
 8004122:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004126:	9001      	str	r0, [sp, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	f1a1 0404 	sub.w	r4, r1, #4
 800412e:	bfb8      	it	lt
 8004130:	18e4      	addlt	r4, r4, r3
 8004132:	f000 f8ef 	bl	8004314 <__malloc_lock>
 8004136:	4a20      	ldr	r2, [pc, #128]	; (80041b8 <_free_r+0x9c>)
 8004138:	9801      	ldr	r0, [sp, #4]
 800413a:	6813      	ldr	r3, [r2, #0]
 800413c:	4615      	mov	r5, r2
 800413e:	b933      	cbnz	r3, 800414e <_free_r+0x32>
 8004140:	6063      	str	r3, [r4, #4]
 8004142:	6014      	str	r4, [r2, #0]
 8004144:	b003      	add	sp, #12
 8004146:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800414a:	f000 b8e9 	b.w	8004320 <__malloc_unlock>
 800414e:	42a3      	cmp	r3, r4
 8004150:	d90b      	bls.n	800416a <_free_r+0x4e>
 8004152:	6821      	ldr	r1, [r4, #0]
 8004154:	1862      	adds	r2, r4, r1
 8004156:	4293      	cmp	r3, r2
 8004158:	bf04      	itt	eq
 800415a:	681a      	ldreq	r2, [r3, #0]
 800415c:	685b      	ldreq	r3, [r3, #4]
 800415e:	6063      	str	r3, [r4, #4]
 8004160:	bf04      	itt	eq
 8004162:	1852      	addeq	r2, r2, r1
 8004164:	6022      	streq	r2, [r4, #0]
 8004166:	602c      	str	r4, [r5, #0]
 8004168:	e7ec      	b.n	8004144 <_free_r+0x28>
 800416a:	461a      	mov	r2, r3
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	b10b      	cbz	r3, 8004174 <_free_r+0x58>
 8004170:	42a3      	cmp	r3, r4
 8004172:	d9fa      	bls.n	800416a <_free_r+0x4e>
 8004174:	6811      	ldr	r1, [r2, #0]
 8004176:	1855      	adds	r5, r2, r1
 8004178:	42a5      	cmp	r5, r4
 800417a:	d10b      	bne.n	8004194 <_free_r+0x78>
 800417c:	6824      	ldr	r4, [r4, #0]
 800417e:	4421      	add	r1, r4
 8004180:	1854      	adds	r4, r2, r1
 8004182:	42a3      	cmp	r3, r4
 8004184:	6011      	str	r1, [r2, #0]
 8004186:	d1dd      	bne.n	8004144 <_free_r+0x28>
 8004188:	681c      	ldr	r4, [r3, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	6053      	str	r3, [r2, #4]
 800418e:	4421      	add	r1, r4
 8004190:	6011      	str	r1, [r2, #0]
 8004192:	e7d7      	b.n	8004144 <_free_r+0x28>
 8004194:	d902      	bls.n	800419c <_free_r+0x80>
 8004196:	230c      	movs	r3, #12
 8004198:	6003      	str	r3, [r0, #0]
 800419a:	e7d3      	b.n	8004144 <_free_r+0x28>
 800419c:	6825      	ldr	r5, [r4, #0]
 800419e:	1961      	adds	r1, r4, r5
 80041a0:	428b      	cmp	r3, r1
 80041a2:	bf04      	itt	eq
 80041a4:	6819      	ldreq	r1, [r3, #0]
 80041a6:	685b      	ldreq	r3, [r3, #4]
 80041a8:	6063      	str	r3, [r4, #4]
 80041aa:	bf04      	itt	eq
 80041ac:	1949      	addeq	r1, r1, r5
 80041ae:	6021      	streq	r1, [r4, #0]
 80041b0:	6054      	str	r4, [r2, #4]
 80041b2:	e7c7      	b.n	8004144 <_free_r+0x28>
 80041b4:	b003      	add	sp, #12
 80041b6:	bd30      	pop	{r4, r5, pc}
 80041b8:	20000200 	.word	0x20000200

080041bc <_malloc_r>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	1ccd      	adds	r5, r1, #3
 80041c0:	f025 0503 	bic.w	r5, r5, #3
 80041c4:	3508      	adds	r5, #8
 80041c6:	2d0c      	cmp	r5, #12
 80041c8:	bf38      	it	cc
 80041ca:	250c      	movcc	r5, #12
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	4606      	mov	r6, r0
 80041d0:	db01      	blt.n	80041d6 <_malloc_r+0x1a>
 80041d2:	42a9      	cmp	r1, r5
 80041d4:	d903      	bls.n	80041de <_malloc_r+0x22>
 80041d6:	230c      	movs	r3, #12
 80041d8:	6033      	str	r3, [r6, #0]
 80041da:	2000      	movs	r0, #0
 80041dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041de:	f000 f899 	bl	8004314 <__malloc_lock>
 80041e2:	4921      	ldr	r1, [pc, #132]	; (8004268 <_malloc_r+0xac>)
 80041e4:	680a      	ldr	r2, [r1, #0]
 80041e6:	4614      	mov	r4, r2
 80041e8:	b99c      	cbnz	r4, 8004212 <_malloc_r+0x56>
 80041ea:	4f20      	ldr	r7, [pc, #128]	; (800426c <_malloc_r+0xb0>)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	b923      	cbnz	r3, 80041fa <_malloc_r+0x3e>
 80041f0:	4621      	mov	r1, r4
 80041f2:	4630      	mov	r0, r6
 80041f4:	f000 f83c 	bl	8004270 <_sbrk_r>
 80041f8:	6038      	str	r0, [r7, #0]
 80041fa:	4629      	mov	r1, r5
 80041fc:	4630      	mov	r0, r6
 80041fe:	f000 f837 	bl	8004270 <_sbrk_r>
 8004202:	1c43      	adds	r3, r0, #1
 8004204:	d123      	bne.n	800424e <_malloc_r+0x92>
 8004206:	230c      	movs	r3, #12
 8004208:	6033      	str	r3, [r6, #0]
 800420a:	4630      	mov	r0, r6
 800420c:	f000 f888 	bl	8004320 <__malloc_unlock>
 8004210:	e7e3      	b.n	80041da <_malloc_r+0x1e>
 8004212:	6823      	ldr	r3, [r4, #0]
 8004214:	1b5b      	subs	r3, r3, r5
 8004216:	d417      	bmi.n	8004248 <_malloc_r+0x8c>
 8004218:	2b0b      	cmp	r3, #11
 800421a:	d903      	bls.n	8004224 <_malloc_r+0x68>
 800421c:	6023      	str	r3, [r4, #0]
 800421e:	441c      	add	r4, r3
 8004220:	6025      	str	r5, [r4, #0]
 8004222:	e004      	b.n	800422e <_malloc_r+0x72>
 8004224:	6863      	ldr	r3, [r4, #4]
 8004226:	42a2      	cmp	r2, r4
 8004228:	bf0c      	ite	eq
 800422a:	600b      	streq	r3, [r1, #0]
 800422c:	6053      	strne	r3, [r2, #4]
 800422e:	4630      	mov	r0, r6
 8004230:	f000 f876 	bl	8004320 <__malloc_unlock>
 8004234:	f104 000b 	add.w	r0, r4, #11
 8004238:	1d23      	adds	r3, r4, #4
 800423a:	f020 0007 	bic.w	r0, r0, #7
 800423e:	1ac2      	subs	r2, r0, r3
 8004240:	d0cc      	beq.n	80041dc <_malloc_r+0x20>
 8004242:	1a1b      	subs	r3, r3, r0
 8004244:	50a3      	str	r3, [r4, r2]
 8004246:	e7c9      	b.n	80041dc <_malloc_r+0x20>
 8004248:	4622      	mov	r2, r4
 800424a:	6864      	ldr	r4, [r4, #4]
 800424c:	e7cc      	b.n	80041e8 <_malloc_r+0x2c>
 800424e:	1cc4      	adds	r4, r0, #3
 8004250:	f024 0403 	bic.w	r4, r4, #3
 8004254:	42a0      	cmp	r0, r4
 8004256:	d0e3      	beq.n	8004220 <_malloc_r+0x64>
 8004258:	1a21      	subs	r1, r4, r0
 800425a:	4630      	mov	r0, r6
 800425c:	f000 f808 	bl	8004270 <_sbrk_r>
 8004260:	3001      	adds	r0, #1
 8004262:	d1dd      	bne.n	8004220 <_malloc_r+0x64>
 8004264:	e7cf      	b.n	8004206 <_malloc_r+0x4a>
 8004266:	bf00      	nop
 8004268:	20000200 	.word	0x20000200
 800426c:	20000204 	.word	0x20000204

08004270 <_sbrk_r>:
 8004270:	b538      	push	{r3, r4, r5, lr}
 8004272:	4d06      	ldr	r5, [pc, #24]	; (800428c <_sbrk_r+0x1c>)
 8004274:	2300      	movs	r3, #0
 8004276:	4604      	mov	r4, r0
 8004278:	4608      	mov	r0, r1
 800427a:	602b      	str	r3, [r5, #0]
 800427c:	f7fc fa74 	bl	8000768 <_sbrk>
 8004280:	1c43      	adds	r3, r0, #1
 8004282:	d102      	bne.n	800428a <_sbrk_r+0x1a>
 8004284:	682b      	ldr	r3, [r5, #0]
 8004286:	b103      	cbz	r3, 800428a <_sbrk_r+0x1a>
 8004288:	6023      	str	r3, [r4, #0]
 800428a:	bd38      	pop	{r3, r4, r5, pc}
 800428c:	20000258 	.word	0x20000258

08004290 <__assert_func>:
 8004290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004292:	4614      	mov	r4, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <__assert_func+0x2c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4605      	mov	r5, r0
 800429c:	68d8      	ldr	r0, [r3, #12]
 800429e:	b14c      	cbz	r4, 80042b4 <__assert_func+0x24>
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <__assert_func+0x30>)
 80042a2:	9100      	str	r1, [sp, #0]
 80042a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80042a8:	4906      	ldr	r1, [pc, #24]	; (80042c4 <__assert_func+0x34>)
 80042aa:	462b      	mov	r3, r5
 80042ac:	f000 f80e 	bl	80042cc <fiprintf>
 80042b0:	f000 fa64 	bl	800477c <abort>
 80042b4:	4b04      	ldr	r3, [pc, #16]	; (80042c8 <__assert_func+0x38>)
 80042b6:	461c      	mov	r4, r3
 80042b8:	e7f3      	b.n	80042a2 <__assert_func+0x12>
 80042ba:	bf00      	nop
 80042bc:	20000010 	.word	0x20000010
 80042c0:	08004ffc 	.word	0x08004ffc
 80042c4:	08005009 	.word	0x08005009
 80042c8:	08005037 	.word	0x08005037

080042cc <fiprintf>:
 80042cc:	b40e      	push	{r1, r2, r3}
 80042ce:	b503      	push	{r0, r1, lr}
 80042d0:	4601      	mov	r1, r0
 80042d2:	ab03      	add	r3, sp, #12
 80042d4:	4805      	ldr	r0, [pc, #20]	; (80042ec <fiprintf+0x20>)
 80042d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80042da:	6800      	ldr	r0, [r0, #0]
 80042dc:	9301      	str	r3, [sp, #4]
 80042de:	f000 f84f 	bl	8004380 <_vfiprintf_r>
 80042e2:	b002      	add	sp, #8
 80042e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80042e8:	b003      	add	sp, #12
 80042ea:	4770      	bx	lr
 80042ec:	20000010 	.word	0x20000010

080042f0 <__ascii_mbtowc>:
 80042f0:	b082      	sub	sp, #8
 80042f2:	b901      	cbnz	r1, 80042f6 <__ascii_mbtowc+0x6>
 80042f4:	a901      	add	r1, sp, #4
 80042f6:	b142      	cbz	r2, 800430a <__ascii_mbtowc+0x1a>
 80042f8:	b14b      	cbz	r3, 800430e <__ascii_mbtowc+0x1e>
 80042fa:	7813      	ldrb	r3, [r2, #0]
 80042fc:	600b      	str	r3, [r1, #0]
 80042fe:	7812      	ldrb	r2, [r2, #0]
 8004300:	1e10      	subs	r0, r2, #0
 8004302:	bf18      	it	ne
 8004304:	2001      	movne	r0, #1
 8004306:	b002      	add	sp, #8
 8004308:	4770      	bx	lr
 800430a:	4610      	mov	r0, r2
 800430c:	e7fb      	b.n	8004306 <__ascii_mbtowc+0x16>
 800430e:	f06f 0001 	mvn.w	r0, #1
 8004312:	e7f8      	b.n	8004306 <__ascii_mbtowc+0x16>

08004314 <__malloc_lock>:
 8004314:	4801      	ldr	r0, [pc, #4]	; (800431c <__malloc_lock+0x8>)
 8004316:	f000 bbf1 	b.w	8004afc <__retarget_lock_acquire_recursive>
 800431a:	bf00      	nop
 800431c:	20000260 	.word	0x20000260

08004320 <__malloc_unlock>:
 8004320:	4801      	ldr	r0, [pc, #4]	; (8004328 <__malloc_unlock+0x8>)
 8004322:	f000 bbec 	b.w	8004afe <__retarget_lock_release_recursive>
 8004326:	bf00      	nop
 8004328:	20000260 	.word	0x20000260

0800432c <__sfputc_r>:
 800432c:	6893      	ldr	r3, [r2, #8]
 800432e:	3b01      	subs	r3, #1
 8004330:	2b00      	cmp	r3, #0
 8004332:	b410      	push	{r4}
 8004334:	6093      	str	r3, [r2, #8]
 8004336:	da08      	bge.n	800434a <__sfputc_r+0x1e>
 8004338:	6994      	ldr	r4, [r2, #24]
 800433a:	42a3      	cmp	r3, r4
 800433c:	db01      	blt.n	8004342 <__sfputc_r+0x16>
 800433e:	290a      	cmp	r1, #10
 8004340:	d103      	bne.n	800434a <__sfputc_r+0x1e>
 8004342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004346:	f000 b94b 	b.w	80045e0 <__swbuf_r>
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	1c58      	adds	r0, r3, #1
 800434e:	6010      	str	r0, [r2, #0]
 8004350:	7019      	strb	r1, [r3, #0]
 8004352:	4608      	mov	r0, r1
 8004354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004358:	4770      	bx	lr

0800435a <__sfputs_r>:
 800435a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435c:	4606      	mov	r6, r0
 800435e:	460f      	mov	r7, r1
 8004360:	4614      	mov	r4, r2
 8004362:	18d5      	adds	r5, r2, r3
 8004364:	42ac      	cmp	r4, r5
 8004366:	d101      	bne.n	800436c <__sfputs_r+0x12>
 8004368:	2000      	movs	r0, #0
 800436a:	e007      	b.n	800437c <__sfputs_r+0x22>
 800436c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004370:	463a      	mov	r2, r7
 8004372:	4630      	mov	r0, r6
 8004374:	f7ff ffda 	bl	800432c <__sfputc_r>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d1f3      	bne.n	8004364 <__sfputs_r+0xa>
 800437c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004380 <_vfiprintf_r>:
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	460d      	mov	r5, r1
 8004386:	b09d      	sub	sp, #116	; 0x74
 8004388:	4614      	mov	r4, r2
 800438a:	4698      	mov	r8, r3
 800438c:	4606      	mov	r6, r0
 800438e:	b118      	cbz	r0, 8004398 <_vfiprintf_r+0x18>
 8004390:	6983      	ldr	r3, [r0, #24]
 8004392:	b90b      	cbnz	r3, 8004398 <_vfiprintf_r+0x18>
 8004394:	f000 fb14 	bl	80049c0 <__sinit>
 8004398:	4b89      	ldr	r3, [pc, #548]	; (80045c0 <_vfiprintf_r+0x240>)
 800439a:	429d      	cmp	r5, r3
 800439c:	d11b      	bne.n	80043d6 <_vfiprintf_r+0x56>
 800439e:	6875      	ldr	r5, [r6, #4]
 80043a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043a2:	07d9      	lsls	r1, r3, #31
 80043a4:	d405      	bmi.n	80043b2 <_vfiprintf_r+0x32>
 80043a6:	89ab      	ldrh	r3, [r5, #12]
 80043a8:	059a      	lsls	r2, r3, #22
 80043aa:	d402      	bmi.n	80043b2 <_vfiprintf_r+0x32>
 80043ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043ae:	f000 fba5 	bl	8004afc <__retarget_lock_acquire_recursive>
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	d501      	bpl.n	80043bc <_vfiprintf_r+0x3c>
 80043b8:	692b      	ldr	r3, [r5, #16]
 80043ba:	b9eb      	cbnz	r3, 80043f8 <_vfiprintf_r+0x78>
 80043bc:	4629      	mov	r1, r5
 80043be:	4630      	mov	r0, r6
 80043c0:	f000 f96e 	bl	80046a0 <__swsetup_r>
 80043c4:	b1c0      	cbz	r0, 80043f8 <_vfiprintf_r+0x78>
 80043c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80043c8:	07dc      	lsls	r4, r3, #31
 80043ca:	d50e      	bpl.n	80043ea <_vfiprintf_r+0x6a>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043d0:	b01d      	add	sp, #116	; 0x74
 80043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d6:	4b7b      	ldr	r3, [pc, #492]	; (80045c4 <_vfiprintf_r+0x244>)
 80043d8:	429d      	cmp	r5, r3
 80043da:	d101      	bne.n	80043e0 <_vfiprintf_r+0x60>
 80043dc:	68b5      	ldr	r5, [r6, #8]
 80043de:	e7df      	b.n	80043a0 <_vfiprintf_r+0x20>
 80043e0:	4b79      	ldr	r3, [pc, #484]	; (80045c8 <_vfiprintf_r+0x248>)
 80043e2:	429d      	cmp	r5, r3
 80043e4:	bf08      	it	eq
 80043e6:	68f5      	ldreq	r5, [r6, #12]
 80043e8:	e7da      	b.n	80043a0 <_vfiprintf_r+0x20>
 80043ea:	89ab      	ldrh	r3, [r5, #12]
 80043ec:	0598      	lsls	r0, r3, #22
 80043ee:	d4ed      	bmi.n	80043cc <_vfiprintf_r+0x4c>
 80043f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043f2:	f000 fb84 	bl	8004afe <__retarget_lock_release_recursive>
 80043f6:	e7e9      	b.n	80043cc <_vfiprintf_r+0x4c>
 80043f8:	2300      	movs	r3, #0
 80043fa:	9309      	str	r3, [sp, #36]	; 0x24
 80043fc:	2320      	movs	r3, #32
 80043fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004402:	f8cd 800c 	str.w	r8, [sp, #12]
 8004406:	2330      	movs	r3, #48	; 0x30
 8004408:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80045cc <_vfiprintf_r+0x24c>
 800440c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004410:	f04f 0901 	mov.w	r9, #1
 8004414:	4623      	mov	r3, r4
 8004416:	469a      	mov	sl, r3
 8004418:	f813 2b01 	ldrb.w	r2, [r3], #1
 800441c:	b10a      	cbz	r2, 8004422 <_vfiprintf_r+0xa2>
 800441e:	2a25      	cmp	r2, #37	; 0x25
 8004420:	d1f9      	bne.n	8004416 <_vfiprintf_r+0x96>
 8004422:	ebba 0b04 	subs.w	fp, sl, r4
 8004426:	d00b      	beq.n	8004440 <_vfiprintf_r+0xc0>
 8004428:	465b      	mov	r3, fp
 800442a:	4622      	mov	r2, r4
 800442c:	4629      	mov	r1, r5
 800442e:	4630      	mov	r0, r6
 8004430:	f7ff ff93 	bl	800435a <__sfputs_r>
 8004434:	3001      	adds	r0, #1
 8004436:	f000 80aa 	beq.w	800458e <_vfiprintf_r+0x20e>
 800443a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800443c:	445a      	add	r2, fp
 800443e:	9209      	str	r2, [sp, #36]	; 0x24
 8004440:	f89a 3000 	ldrb.w	r3, [sl]
 8004444:	2b00      	cmp	r3, #0
 8004446:	f000 80a2 	beq.w	800458e <_vfiprintf_r+0x20e>
 800444a:	2300      	movs	r3, #0
 800444c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004450:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004454:	f10a 0a01 	add.w	sl, sl, #1
 8004458:	9304      	str	r3, [sp, #16]
 800445a:	9307      	str	r3, [sp, #28]
 800445c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004460:	931a      	str	r3, [sp, #104]	; 0x68
 8004462:	4654      	mov	r4, sl
 8004464:	2205      	movs	r2, #5
 8004466:	f814 1b01 	ldrb.w	r1, [r4], #1
 800446a:	4858      	ldr	r0, [pc, #352]	; (80045cc <_vfiprintf_r+0x24c>)
 800446c:	f7fb ff40 	bl	80002f0 <memchr>
 8004470:	9a04      	ldr	r2, [sp, #16]
 8004472:	b9d8      	cbnz	r0, 80044ac <_vfiprintf_r+0x12c>
 8004474:	06d1      	lsls	r1, r2, #27
 8004476:	bf44      	itt	mi
 8004478:	2320      	movmi	r3, #32
 800447a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800447e:	0713      	lsls	r3, r2, #28
 8004480:	bf44      	itt	mi
 8004482:	232b      	movmi	r3, #43	; 0x2b
 8004484:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004488:	f89a 3000 	ldrb.w	r3, [sl]
 800448c:	2b2a      	cmp	r3, #42	; 0x2a
 800448e:	d015      	beq.n	80044bc <_vfiprintf_r+0x13c>
 8004490:	9a07      	ldr	r2, [sp, #28]
 8004492:	4654      	mov	r4, sl
 8004494:	2000      	movs	r0, #0
 8004496:	f04f 0c0a 	mov.w	ip, #10
 800449a:	4621      	mov	r1, r4
 800449c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80044a0:	3b30      	subs	r3, #48	; 0x30
 80044a2:	2b09      	cmp	r3, #9
 80044a4:	d94e      	bls.n	8004544 <_vfiprintf_r+0x1c4>
 80044a6:	b1b0      	cbz	r0, 80044d6 <_vfiprintf_r+0x156>
 80044a8:	9207      	str	r2, [sp, #28]
 80044aa:	e014      	b.n	80044d6 <_vfiprintf_r+0x156>
 80044ac:	eba0 0308 	sub.w	r3, r0, r8
 80044b0:	fa09 f303 	lsl.w	r3, r9, r3
 80044b4:	4313      	orrs	r3, r2
 80044b6:	9304      	str	r3, [sp, #16]
 80044b8:	46a2      	mov	sl, r4
 80044ba:	e7d2      	b.n	8004462 <_vfiprintf_r+0xe2>
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	1d19      	adds	r1, r3, #4
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	9103      	str	r1, [sp, #12]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bfbb      	ittet	lt
 80044c8:	425b      	neglt	r3, r3
 80044ca:	f042 0202 	orrlt.w	r2, r2, #2
 80044ce:	9307      	strge	r3, [sp, #28]
 80044d0:	9307      	strlt	r3, [sp, #28]
 80044d2:	bfb8      	it	lt
 80044d4:	9204      	strlt	r2, [sp, #16]
 80044d6:	7823      	ldrb	r3, [r4, #0]
 80044d8:	2b2e      	cmp	r3, #46	; 0x2e
 80044da:	d10c      	bne.n	80044f6 <_vfiprintf_r+0x176>
 80044dc:	7863      	ldrb	r3, [r4, #1]
 80044de:	2b2a      	cmp	r3, #42	; 0x2a
 80044e0:	d135      	bne.n	800454e <_vfiprintf_r+0x1ce>
 80044e2:	9b03      	ldr	r3, [sp, #12]
 80044e4:	1d1a      	adds	r2, r3, #4
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	9203      	str	r2, [sp, #12]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	bfb8      	it	lt
 80044ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044f2:	3402      	adds	r4, #2
 80044f4:	9305      	str	r3, [sp, #20]
 80044f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80045dc <_vfiprintf_r+0x25c>
 80044fa:	7821      	ldrb	r1, [r4, #0]
 80044fc:	2203      	movs	r2, #3
 80044fe:	4650      	mov	r0, sl
 8004500:	f7fb fef6 	bl	80002f0 <memchr>
 8004504:	b140      	cbz	r0, 8004518 <_vfiprintf_r+0x198>
 8004506:	2340      	movs	r3, #64	; 0x40
 8004508:	eba0 000a 	sub.w	r0, r0, sl
 800450c:	fa03 f000 	lsl.w	r0, r3, r0
 8004510:	9b04      	ldr	r3, [sp, #16]
 8004512:	4303      	orrs	r3, r0
 8004514:	3401      	adds	r4, #1
 8004516:	9304      	str	r3, [sp, #16]
 8004518:	f814 1b01 	ldrb.w	r1, [r4], #1
 800451c:	482c      	ldr	r0, [pc, #176]	; (80045d0 <_vfiprintf_r+0x250>)
 800451e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004522:	2206      	movs	r2, #6
 8004524:	f7fb fee4 	bl	80002f0 <memchr>
 8004528:	2800      	cmp	r0, #0
 800452a:	d03f      	beq.n	80045ac <_vfiprintf_r+0x22c>
 800452c:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <_vfiprintf_r+0x254>)
 800452e:	bb1b      	cbnz	r3, 8004578 <_vfiprintf_r+0x1f8>
 8004530:	9b03      	ldr	r3, [sp, #12]
 8004532:	3307      	adds	r3, #7
 8004534:	f023 0307 	bic.w	r3, r3, #7
 8004538:	3308      	adds	r3, #8
 800453a:	9303      	str	r3, [sp, #12]
 800453c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800453e:	443b      	add	r3, r7
 8004540:	9309      	str	r3, [sp, #36]	; 0x24
 8004542:	e767      	b.n	8004414 <_vfiprintf_r+0x94>
 8004544:	fb0c 3202 	mla	r2, ip, r2, r3
 8004548:	460c      	mov	r4, r1
 800454a:	2001      	movs	r0, #1
 800454c:	e7a5      	b.n	800449a <_vfiprintf_r+0x11a>
 800454e:	2300      	movs	r3, #0
 8004550:	3401      	adds	r4, #1
 8004552:	9305      	str	r3, [sp, #20]
 8004554:	4619      	mov	r1, r3
 8004556:	f04f 0c0a 	mov.w	ip, #10
 800455a:	4620      	mov	r0, r4
 800455c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004560:	3a30      	subs	r2, #48	; 0x30
 8004562:	2a09      	cmp	r2, #9
 8004564:	d903      	bls.n	800456e <_vfiprintf_r+0x1ee>
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0c5      	beq.n	80044f6 <_vfiprintf_r+0x176>
 800456a:	9105      	str	r1, [sp, #20]
 800456c:	e7c3      	b.n	80044f6 <_vfiprintf_r+0x176>
 800456e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004572:	4604      	mov	r4, r0
 8004574:	2301      	movs	r3, #1
 8004576:	e7f0      	b.n	800455a <_vfiprintf_r+0x1da>
 8004578:	ab03      	add	r3, sp, #12
 800457a:	9300      	str	r3, [sp, #0]
 800457c:	462a      	mov	r2, r5
 800457e:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <_vfiprintf_r+0x258>)
 8004580:	a904      	add	r1, sp, #16
 8004582:	4630      	mov	r0, r6
 8004584:	f7fe f860 	bl	8002648 <_printf_float>
 8004588:	4607      	mov	r7, r0
 800458a:	1c78      	adds	r0, r7, #1
 800458c:	d1d6      	bne.n	800453c <_vfiprintf_r+0x1bc>
 800458e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004590:	07d9      	lsls	r1, r3, #31
 8004592:	d405      	bmi.n	80045a0 <_vfiprintf_r+0x220>
 8004594:	89ab      	ldrh	r3, [r5, #12]
 8004596:	059a      	lsls	r2, r3, #22
 8004598:	d402      	bmi.n	80045a0 <_vfiprintf_r+0x220>
 800459a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800459c:	f000 faaf 	bl	8004afe <__retarget_lock_release_recursive>
 80045a0:	89ab      	ldrh	r3, [r5, #12]
 80045a2:	065b      	lsls	r3, r3, #25
 80045a4:	f53f af12 	bmi.w	80043cc <_vfiprintf_r+0x4c>
 80045a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045aa:	e711      	b.n	80043d0 <_vfiprintf_r+0x50>
 80045ac:	ab03      	add	r3, sp, #12
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	462a      	mov	r2, r5
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <_vfiprintf_r+0x258>)
 80045b4:	a904      	add	r1, sp, #16
 80045b6:	4630      	mov	r0, r6
 80045b8:	f7fe fad2 	bl	8002b60 <_printf_i>
 80045bc:	e7e4      	b.n	8004588 <_vfiprintf_r+0x208>
 80045be:	bf00      	nop
 80045c0:	08005174 	.word	0x08005174
 80045c4:	08005194 	.word	0x08005194
 80045c8:	08005154 	.word	0x08005154
 80045cc:	08005042 	.word	0x08005042
 80045d0:	0800504c 	.word	0x0800504c
 80045d4:	08002649 	.word	0x08002649
 80045d8:	0800435b 	.word	0x0800435b
 80045dc:	08005048 	.word	0x08005048

080045e0 <__swbuf_r>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	460e      	mov	r6, r1
 80045e4:	4614      	mov	r4, r2
 80045e6:	4605      	mov	r5, r0
 80045e8:	b118      	cbz	r0, 80045f2 <__swbuf_r+0x12>
 80045ea:	6983      	ldr	r3, [r0, #24]
 80045ec:	b90b      	cbnz	r3, 80045f2 <__swbuf_r+0x12>
 80045ee:	f000 f9e7 	bl	80049c0 <__sinit>
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <__swbuf_r+0x98>)
 80045f4:	429c      	cmp	r4, r3
 80045f6:	d12b      	bne.n	8004650 <__swbuf_r+0x70>
 80045f8:	686c      	ldr	r4, [r5, #4]
 80045fa:	69a3      	ldr	r3, [r4, #24]
 80045fc:	60a3      	str	r3, [r4, #8]
 80045fe:	89a3      	ldrh	r3, [r4, #12]
 8004600:	071a      	lsls	r2, r3, #28
 8004602:	d52f      	bpl.n	8004664 <__swbuf_r+0x84>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	b36b      	cbz	r3, 8004664 <__swbuf_r+0x84>
 8004608:	6923      	ldr	r3, [r4, #16]
 800460a:	6820      	ldr	r0, [r4, #0]
 800460c:	1ac0      	subs	r0, r0, r3
 800460e:	6963      	ldr	r3, [r4, #20]
 8004610:	b2f6      	uxtb	r6, r6
 8004612:	4283      	cmp	r3, r0
 8004614:	4637      	mov	r7, r6
 8004616:	dc04      	bgt.n	8004622 <__swbuf_r+0x42>
 8004618:	4621      	mov	r1, r4
 800461a:	4628      	mov	r0, r5
 800461c:	f000 f93c 	bl	8004898 <_fflush_r>
 8004620:	bb30      	cbnz	r0, 8004670 <__swbuf_r+0x90>
 8004622:	68a3      	ldr	r3, [r4, #8]
 8004624:	3b01      	subs	r3, #1
 8004626:	60a3      	str	r3, [r4, #8]
 8004628:	6823      	ldr	r3, [r4, #0]
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	6022      	str	r2, [r4, #0]
 800462e:	701e      	strb	r6, [r3, #0]
 8004630:	6963      	ldr	r3, [r4, #20]
 8004632:	3001      	adds	r0, #1
 8004634:	4283      	cmp	r3, r0
 8004636:	d004      	beq.n	8004642 <__swbuf_r+0x62>
 8004638:	89a3      	ldrh	r3, [r4, #12]
 800463a:	07db      	lsls	r3, r3, #31
 800463c:	d506      	bpl.n	800464c <__swbuf_r+0x6c>
 800463e:	2e0a      	cmp	r6, #10
 8004640:	d104      	bne.n	800464c <__swbuf_r+0x6c>
 8004642:	4621      	mov	r1, r4
 8004644:	4628      	mov	r0, r5
 8004646:	f000 f927 	bl	8004898 <_fflush_r>
 800464a:	b988      	cbnz	r0, 8004670 <__swbuf_r+0x90>
 800464c:	4638      	mov	r0, r7
 800464e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <__swbuf_r+0x9c>)
 8004652:	429c      	cmp	r4, r3
 8004654:	d101      	bne.n	800465a <__swbuf_r+0x7a>
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	e7cf      	b.n	80045fa <__swbuf_r+0x1a>
 800465a:	4b09      	ldr	r3, [pc, #36]	; (8004680 <__swbuf_r+0xa0>)
 800465c:	429c      	cmp	r4, r3
 800465e:	bf08      	it	eq
 8004660:	68ec      	ldreq	r4, [r5, #12]
 8004662:	e7ca      	b.n	80045fa <__swbuf_r+0x1a>
 8004664:	4621      	mov	r1, r4
 8004666:	4628      	mov	r0, r5
 8004668:	f000 f81a 	bl	80046a0 <__swsetup_r>
 800466c:	2800      	cmp	r0, #0
 800466e:	d0cb      	beq.n	8004608 <__swbuf_r+0x28>
 8004670:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004674:	e7ea      	b.n	800464c <__swbuf_r+0x6c>
 8004676:	bf00      	nop
 8004678:	08005174 	.word	0x08005174
 800467c:	08005194 	.word	0x08005194
 8004680:	08005154 	.word	0x08005154

08004684 <__ascii_wctomb>:
 8004684:	b149      	cbz	r1, 800469a <__ascii_wctomb+0x16>
 8004686:	2aff      	cmp	r2, #255	; 0xff
 8004688:	bf85      	ittet	hi
 800468a:	238a      	movhi	r3, #138	; 0x8a
 800468c:	6003      	strhi	r3, [r0, #0]
 800468e:	700a      	strbls	r2, [r1, #0]
 8004690:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004694:	bf98      	it	ls
 8004696:	2001      	movls	r0, #1
 8004698:	4770      	bx	lr
 800469a:	4608      	mov	r0, r1
 800469c:	4770      	bx	lr
	...

080046a0 <__swsetup_r>:
 80046a0:	4b32      	ldr	r3, [pc, #200]	; (800476c <__swsetup_r+0xcc>)
 80046a2:	b570      	push	{r4, r5, r6, lr}
 80046a4:	681d      	ldr	r5, [r3, #0]
 80046a6:	4606      	mov	r6, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	b125      	cbz	r5, 80046b6 <__swsetup_r+0x16>
 80046ac:	69ab      	ldr	r3, [r5, #24]
 80046ae:	b913      	cbnz	r3, 80046b6 <__swsetup_r+0x16>
 80046b0:	4628      	mov	r0, r5
 80046b2:	f000 f985 	bl	80049c0 <__sinit>
 80046b6:	4b2e      	ldr	r3, [pc, #184]	; (8004770 <__swsetup_r+0xd0>)
 80046b8:	429c      	cmp	r4, r3
 80046ba:	d10f      	bne.n	80046dc <__swsetup_r+0x3c>
 80046bc:	686c      	ldr	r4, [r5, #4]
 80046be:	89a3      	ldrh	r3, [r4, #12]
 80046c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046c4:	0719      	lsls	r1, r3, #28
 80046c6:	d42c      	bmi.n	8004722 <__swsetup_r+0x82>
 80046c8:	06dd      	lsls	r5, r3, #27
 80046ca:	d411      	bmi.n	80046f0 <__swsetup_r+0x50>
 80046cc:	2309      	movs	r3, #9
 80046ce:	6033      	str	r3, [r6, #0]
 80046d0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046d4:	81a3      	strh	r3, [r4, #12]
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046da:	e03e      	b.n	800475a <__swsetup_r+0xba>
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <__swsetup_r+0xd4>)
 80046de:	429c      	cmp	r4, r3
 80046e0:	d101      	bne.n	80046e6 <__swsetup_r+0x46>
 80046e2:	68ac      	ldr	r4, [r5, #8]
 80046e4:	e7eb      	b.n	80046be <__swsetup_r+0x1e>
 80046e6:	4b24      	ldr	r3, [pc, #144]	; (8004778 <__swsetup_r+0xd8>)
 80046e8:	429c      	cmp	r4, r3
 80046ea:	bf08      	it	eq
 80046ec:	68ec      	ldreq	r4, [r5, #12]
 80046ee:	e7e6      	b.n	80046be <__swsetup_r+0x1e>
 80046f0:	0758      	lsls	r0, r3, #29
 80046f2:	d512      	bpl.n	800471a <__swsetup_r+0x7a>
 80046f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80046f6:	b141      	cbz	r1, 800470a <__swsetup_r+0x6a>
 80046f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80046fc:	4299      	cmp	r1, r3
 80046fe:	d002      	beq.n	8004706 <__swsetup_r+0x66>
 8004700:	4630      	mov	r0, r6
 8004702:	f7ff fd0b 	bl	800411c <_free_r>
 8004706:	2300      	movs	r3, #0
 8004708:	6363      	str	r3, [r4, #52]	; 0x34
 800470a:	89a3      	ldrh	r3, [r4, #12]
 800470c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004710:	81a3      	strh	r3, [r4, #12]
 8004712:	2300      	movs	r3, #0
 8004714:	6063      	str	r3, [r4, #4]
 8004716:	6923      	ldr	r3, [r4, #16]
 8004718:	6023      	str	r3, [r4, #0]
 800471a:	89a3      	ldrh	r3, [r4, #12]
 800471c:	f043 0308 	orr.w	r3, r3, #8
 8004720:	81a3      	strh	r3, [r4, #12]
 8004722:	6923      	ldr	r3, [r4, #16]
 8004724:	b94b      	cbnz	r3, 800473a <__swsetup_r+0x9a>
 8004726:	89a3      	ldrh	r3, [r4, #12]
 8004728:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800472c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004730:	d003      	beq.n	800473a <__swsetup_r+0x9a>
 8004732:	4621      	mov	r1, r4
 8004734:	4630      	mov	r0, r6
 8004736:	f000 fa07 	bl	8004b48 <__smakebuf_r>
 800473a:	89a0      	ldrh	r0, [r4, #12]
 800473c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004740:	f010 0301 	ands.w	r3, r0, #1
 8004744:	d00a      	beq.n	800475c <__swsetup_r+0xbc>
 8004746:	2300      	movs	r3, #0
 8004748:	60a3      	str	r3, [r4, #8]
 800474a:	6963      	ldr	r3, [r4, #20]
 800474c:	425b      	negs	r3, r3
 800474e:	61a3      	str	r3, [r4, #24]
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	b943      	cbnz	r3, 8004766 <__swsetup_r+0xc6>
 8004754:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004758:	d1ba      	bne.n	80046d0 <__swsetup_r+0x30>
 800475a:	bd70      	pop	{r4, r5, r6, pc}
 800475c:	0781      	lsls	r1, r0, #30
 800475e:	bf58      	it	pl
 8004760:	6963      	ldrpl	r3, [r4, #20]
 8004762:	60a3      	str	r3, [r4, #8]
 8004764:	e7f4      	b.n	8004750 <__swsetup_r+0xb0>
 8004766:	2000      	movs	r0, #0
 8004768:	e7f7      	b.n	800475a <__swsetup_r+0xba>
 800476a:	bf00      	nop
 800476c:	20000010 	.word	0x20000010
 8004770:	08005174 	.word	0x08005174
 8004774:	08005194 	.word	0x08005194
 8004778:	08005154 	.word	0x08005154

0800477c <abort>:
 800477c:	b508      	push	{r3, lr}
 800477e:	2006      	movs	r0, #6
 8004780:	f000 fa4a 	bl	8004c18 <raise>
 8004784:	2001      	movs	r0, #1
 8004786:	f7fb ffbf 	bl	8000708 <_exit>
	...

0800478c <__sflush_r>:
 800478c:	898a      	ldrh	r2, [r1, #12]
 800478e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004792:	4605      	mov	r5, r0
 8004794:	0710      	lsls	r0, r2, #28
 8004796:	460c      	mov	r4, r1
 8004798:	d458      	bmi.n	800484c <__sflush_r+0xc0>
 800479a:	684b      	ldr	r3, [r1, #4]
 800479c:	2b00      	cmp	r3, #0
 800479e:	dc05      	bgt.n	80047ac <__sflush_r+0x20>
 80047a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	dc02      	bgt.n	80047ac <__sflush_r+0x20>
 80047a6:	2000      	movs	r0, #0
 80047a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047ae:	2e00      	cmp	r6, #0
 80047b0:	d0f9      	beq.n	80047a6 <__sflush_r+0x1a>
 80047b2:	2300      	movs	r3, #0
 80047b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047b8:	682f      	ldr	r7, [r5, #0]
 80047ba:	602b      	str	r3, [r5, #0]
 80047bc:	d032      	beq.n	8004824 <__sflush_r+0x98>
 80047be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047c0:	89a3      	ldrh	r3, [r4, #12]
 80047c2:	075a      	lsls	r2, r3, #29
 80047c4:	d505      	bpl.n	80047d2 <__sflush_r+0x46>
 80047c6:	6863      	ldr	r3, [r4, #4]
 80047c8:	1ac0      	subs	r0, r0, r3
 80047ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047cc:	b10b      	cbz	r3, 80047d2 <__sflush_r+0x46>
 80047ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80047d0:	1ac0      	subs	r0, r0, r3
 80047d2:	2300      	movs	r3, #0
 80047d4:	4602      	mov	r2, r0
 80047d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047d8:	6a21      	ldr	r1, [r4, #32]
 80047da:	4628      	mov	r0, r5
 80047dc:	47b0      	blx	r6
 80047de:	1c43      	adds	r3, r0, #1
 80047e0:	89a3      	ldrh	r3, [r4, #12]
 80047e2:	d106      	bne.n	80047f2 <__sflush_r+0x66>
 80047e4:	6829      	ldr	r1, [r5, #0]
 80047e6:	291d      	cmp	r1, #29
 80047e8:	d82c      	bhi.n	8004844 <__sflush_r+0xb8>
 80047ea:	4a2a      	ldr	r2, [pc, #168]	; (8004894 <__sflush_r+0x108>)
 80047ec:	40ca      	lsrs	r2, r1
 80047ee:	07d6      	lsls	r6, r2, #31
 80047f0:	d528      	bpl.n	8004844 <__sflush_r+0xb8>
 80047f2:	2200      	movs	r2, #0
 80047f4:	6062      	str	r2, [r4, #4]
 80047f6:	04d9      	lsls	r1, r3, #19
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	6022      	str	r2, [r4, #0]
 80047fc:	d504      	bpl.n	8004808 <__sflush_r+0x7c>
 80047fe:	1c42      	adds	r2, r0, #1
 8004800:	d101      	bne.n	8004806 <__sflush_r+0x7a>
 8004802:	682b      	ldr	r3, [r5, #0]
 8004804:	b903      	cbnz	r3, 8004808 <__sflush_r+0x7c>
 8004806:	6560      	str	r0, [r4, #84]	; 0x54
 8004808:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800480a:	602f      	str	r7, [r5, #0]
 800480c:	2900      	cmp	r1, #0
 800480e:	d0ca      	beq.n	80047a6 <__sflush_r+0x1a>
 8004810:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004814:	4299      	cmp	r1, r3
 8004816:	d002      	beq.n	800481e <__sflush_r+0x92>
 8004818:	4628      	mov	r0, r5
 800481a:	f7ff fc7f 	bl	800411c <_free_r>
 800481e:	2000      	movs	r0, #0
 8004820:	6360      	str	r0, [r4, #52]	; 0x34
 8004822:	e7c1      	b.n	80047a8 <__sflush_r+0x1c>
 8004824:	6a21      	ldr	r1, [r4, #32]
 8004826:	2301      	movs	r3, #1
 8004828:	4628      	mov	r0, r5
 800482a:	47b0      	blx	r6
 800482c:	1c41      	adds	r1, r0, #1
 800482e:	d1c7      	bne.n	80047c0 <__sflush_r+0x34>
 8004830:	682b      	ldr	r3, [r5, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0c4      	beq.n	80047c0 <__sflush_r+0x34>
 8004836:	2b1d      	cmp	r3, #29
 8004838:	d001      	beq.n	800483e <__sflush_r+0xb2>
 800483a:	2b16      	cmp	r3, #22
 800483c:	d101      	bne.n	8004842 <__sflush_r+0xb6>
 800483e:	602f      	str	r7, [r5, #0]
 8004840:	e7b1      	b.n	80047a6 <__sflush_r+0x1a>
 8004842:	89a3      	ldrh	r3, [r4, #12]
 8004844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004848:	81a3      	strh	r3, [r4, #12]
 800484a:	e7ad      	b.n	80047a8 <__sflush_r+0x1c>
 800484c:	690f      	ldr	r7, [r1, #16]
 800484e:	2f00      	cmp	r7, #0
 8004850:	d0a9      	beq.n	80047a6 <__sflush_r+0x1a>
 8004852:	0793      	lsls	r3, r2, #30
 8004854:	680e      	ldr	r6, [r1, #0]
 8004856:	bf08      	it	eq
 8004858:	694b      	ldreq	r3, [r1, #20]
 800485a:	600f      	str	r7, [r1, #0]
 800485c:	bf18      	it	ne
 800485e:	2300      	movne	r3, #0
 8004860:	eba6 0807 	sub.w	r8, r6, r7
 8004864:	608b      	str	r3, [r1, #8]
 8004866:	f1b8 0f00 	cmp.w	r8, #0
 800486a:	dd9c      	ble.n	80047a6 <__sflush_r+0x1a>
 800486c:	6a21      	ldr	r1, [r4, #32]
 800486e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004870:	4643      	mov	r3, r8
 8004872:	463a      	mov	r2, r7
 8004874:	4628      	mov	r0, r5
 8004876:	47b0      	blx	r6
 8004878:	2800      	cmp	r0, #0
 800487a:	dc06      	bgt.n	800488a <__sflush_r+0xfe>
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004882:	81a3      	strh	r3, [r4, #12]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004888:	e78e      	b.n	80047a8 <__sflush_r+0x1c>
 800488a:	4407      	add	r7, r0
 800488c:	eba8 0800 	sub.w	r8, r8, r0
 8004890:	e7e9      	b.n	8004866 <__sflush_r+0xda>
 8004892:	bf00      	nop
 8004894:	20400001 	.word	0x20400001

08004898 <_fflush_r>:
 8004898:	b538      	push	{r3, r4, r5, lr}
 800489a:	690b      	ldr	r3, [r1, #16]
 800489c:	4605      	mov	r5, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	b913      	cbnz	r3, 80048a8 <_fflush_r+0x10>
 80048a2:	2500      	movs	r5, #0
 80048a4:	4628      	mov	r0, r5
 80048a6:	bd38      	pop	{r3, r4, r5, pc}
 80048a8:	b118      	cbz	r0, 80048b2 <_fflush_r+0x1a>
 80048aa:	6983      	ldr	r3, [r0, #24]
 80048ac:	b90b      	cbnz	r3, 80048b2 <_fflush_r+0x1a>
 80048ae:	f000 f887 	bl	80049c0 <__sinit>
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <_fflush_r+0x6c>)
 80048b4:	429c      	cmp	r4, r3
 80048b6:	d11b      	bne.n	80048f0 <_fflush_r+0x58>
 80048b8:	686c      	ldr	r4, [r5, #4]
 80048ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0ef      	beq.n	80048a2 <_fflush_r+0xa>
 80048c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048c4:	07d0      	lsls	r0, r2, #31
 80048c6:	d404      	bmi.n	80048d2 <_fflush_r+0x3a>
 80048c8:	0599      	lsls	r1, r3, #22
 80048ca:	d402      	bmi.n	80048d2 <_fflush_r+0x3a>
 80048cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ce:	f000 f915 	bl	8004afc <__retarget_lock_acquire_recursive>
 80048d2:	4628      	mov	r0, r5
 80048d4:	4621      	mov	r1, r4
 80048d6:	f7ff ff59 	bl	800478c <__sflush_r>
 80048da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048dc:	07da      	lsls	r2, r3, #31
 80048de:	4605      	mov	r5, r0
 80048e0:	d4e0      	bmi.n	80048a4 <_fflush_r+0xc>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	059b      	lsls	r3, r3, #22
 80048e6:	d4dd      	bmi.n	80048a4 <_fflush_r+0xc>
 80048e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048ea:	f000 f908 	bl	8004afe <__retarget_lock_release_recursive>
 80048ee:	e7d9      	b.n	80048a4 <_fflush_r+0xc>
 80048f0:	4b05      	ldr	r3, [pc, #20]	; (8004908 <_fflush_r+0x70>)
 80048f2:	429c      	cmp	r4, r3
 80048f4:	d101      	bne.n	80048fa <_fflush_r+0x62>
 80048f6:	68ac      	ldr	r4, [r5, #8]
 80048f8:	e7df      	b.n	80048ba <_fflush_r+0x22>
 80048fa:	4b04      	ldr	r3, [pc, #16]	; (800490c <_fflush_r+0x74>)
 80048fc:	429c      	cmp	r4, r3
 80048fe:	bf08      	it	eq
 8004900:	68ec      	ldreq	r4, [r5, #12]
 8004902:	e7da      	b.n	80048ba <_fflush_r+0x22>
 8004904:	08005174 	.word	0x08005174
 8004908:	08005194 	.word	0x08005194
 800490c:	08005154 	.word	0x08005154

08004910 <std>:
 8004910:	2300      	movs	r3, #0
 8004912:	b510      	push	{r4, lr}
 8004914:	4604      	mov	r4, r0
 8004916:	e9c0 3300 	strd	r3, r3, [r0]
 800491a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800491e:	6083      	str	r3, [r0, #8]
 8004920:	8181      	strh	r1, [r0, #12]
 8004922:	6643      	str	r3, [r0, #100]	; 0x64
 8004924:	81c2      	strh	r2, [r0, #14]
 8004926:	6183      	str	r3, [r0, #24]
 8004928:	4619      	mov	r1, r3
 800492a:	2208      	movs	r2, #8
 800492c:	305c      	adds	r0, #92	; 0x5c
 800492e:	f7fd fdf1 	bl	8002514 <memset>
 8004932:	4b05      	ldr	r3, [pc, #20]	; (8004948 <std+0x38>)
 8004934:	6263      	str	r3, [r4, #36]	; 0x24
 8004936:	4b05      	ldr	r3, [pc, #20]	; (800494c <std+0x3c>)
 8004938:	62a3      	str	r3, [r4, #40]	; 0x28
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <std+0x40>)
 800493c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800493e:	4b05      	ldr	r3, [pc, #20]	; (8004954 <std+0x44>)
 8004940:	6224      	str	r4, [r4, #32]
 8004942:	6323      	str	r3, [r4, #48]	; 0x30
 8004944:	bd10      	pop	{r4, pc}
 8004946:	bf00      	nop
 8004948:	08004c51 	.word	0x08004c51
 800494c:	08004c73 	.word	0x08004c73
 8004950:	08004cab 	.word	0x08004cab
 8004954:	08004ccf 	.word	0x08004ccf

08004958 <_cleanup_r>:
 8004958:	4901      	ldr	r1, [pc, #4]	; (8004960 <_cleanup_r+0x8>)
 800495a:	f000 b8af 	b.w	8004abc <_fwalk_reent>
 800495e:	bf00      	nop
 8004960:	08004899 	.word	0x08004899

08004964 <__sfmoreglue>:
 8004964:	b570      	push	{r4, r5, r6, lr}
 8004966:	1e4a      	subs	r2, r1, #1
 8004968:	2568      	movs	r5, #104	; 0x68
 800496a:	4355      	muls	r5, r2
 800496c:	460e      	mov	r6, r1
 800496e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004972:	f7ff fc23 	bl	80041bc <_malloc_r>
 8004976:	4604      	mov	r4, r0
 8004978:	b140      	cbz	r0, 800498c <__sfmoreglue+0x28>
 800497a:	2100      	movs	r1, #0
 800497c:	e9c0 1600 	strd	r1, r6, [r0]
 8004980:	300c      	adds	r0, #12
 8004982:	60a0      	str	r0, [r4, #8]
 8004984:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004988:	f7fd fdc4 	bl	8002514 <memset>
 800498c:	4620      	mov	r0, r4
 800498e:	bd70      	pop	{r4, r5, r6, pc}

08004990 <__sfp_lock_acquire>:
 8004990:	4801      	ldr	r0, [pc, #4]	; (8004998 <__sfp_lock_acquire+0x8>)
 8004992:	f000 b8b3 	b.w	8004afc <__retarget_lock_acquire_recursive>
 8004996:	bf00      	nop
 8004998:	20000264 	.word	0x20000264

0800499c <__sfp_lock_release>:
 800499c:	4801      	ldr	r0, [pc, #4]	; (80049a4 <__sfp_lock_release+0x8>)
 800499e:	f000 b8ae 	b.w	8004afe <__retarget_lock_release_recursive>
 80049a2:	bf00      	nop
 80049a4:	20000264 	.word	0x20000264

080049a8 <__sinit_lock_acquire>:
 80049a8:	4801      	ldr	r0, [pc, #4]	; (80049b0 <__sinit_lock_acquire+0x8>)
 80049aa:	f000 b8a7 	b.w	8004afc <__retarget_lock_acquire_recursive>
 80049ae:	bf00      	nop
 80049b0:	2000025f 	.word	0x2000025f

080049b4 <__sinit_lock_release>:
 80049b4:	4801      	ldr	r0, [pc, #4]	; (80049bc <__sinit_lock_release+0x8>)
 80049b6:	f000 b8a2 	b.w	8004afe <__retarget_lock_release_recursive>
 80049ba:	bf00      	nop
 80049bc:	2000025f 	.word	0x2000025f

080049c0 <__sinit>:
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4604      	mov	r4, r0
 80049c4:	f7ff fff0 	bl	80049a8 <__sinit_lock_acquire>
 80049c8:	69a3      	ldr	r3, [r4, #24]
 80049ca:	b11b      	cbz	r3, 80049d4 <__sinit+0x14>
 80049cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d0:	f7ff bff0 	b.w	80049b4 <__sinit_lock_release>
 80049d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80049d8:	6523      	str	r3, [r4, #80]	; 0x50
 80049da:	4b13      	ldr	r3, [pc, #76]	; (8004a28 <__sinit+0x68>)
 80049dc:	4a13      	ldr	r2, [pc, #76]	; (8004a2c <__sinit+0x6c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80049e2:	42a3      	cmp	r3, r4
 80049e4:	bf04      	itt	eq
 80049e6:	2301      	moveq	r3, #1
 80049e8:	61a3      	streq	r3, [r4, #24]
 80049ea:	4620      	mov	r0, r4
 80049ec:	f000 f820 	bl	8004a30 <__sfp>
 80049f0:	6060      	str	r0, [r4, #4]
 80049f2:	4620      	mov	r0, r4
 80049f4:	f000 f81c 	bl	8004a30 <__sfp>
 80049f8:	60a0      	str	r0, [r4, #8]
 80049fa:	4620      	mov	r0, r4
 80049fc:	f000 f818 	bl	8004a30 <__sfp>
 8004a00:	2200      	movs	r2, #0
 8004a02:	60e0      	str	r0, [r4, #12]
 8004a04:	2104      	movs	r1, #4
 8004a06:	6860      	ldr	r0, [r4, #4]
 8004a08:	f7ff ff82 	bl	8004910 <std>
 8004a0c:	68a0      	ldr	r0, [r4, #8]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	2109      	movs	r1, #9
 8004a12:	f7ff ff7d 	bl	8004910 <std>
 8004a16:	68e0      	ldr	r0, [r4, #12]
 8004a18:	2202      	movs	r2, #2
 8004a1a:	2112      	movs	r1, #18
 8004a1c:	f7ff ff78 	bl	8004910 <std>
 8004a20:	2301      	movs	r3, #1
 8004a22:	61a3      	str	r3, [r4, #24]
 8004a24:	e7d2      	b.n	80049cc <__sinit+0xc>
 8004a26:	bf00      	nop
 8004a28:	08004dd0 	.word	0x08004dd0
 8004a2c:	08004959 	.word	0x08004959

08004a30 <__sfp>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	4607      	mov	r7, r0
 8004a34:	f7ff ffac 	bl	8004990 <__sfp_lock_acquire>
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <__sfp+0x84>)
 8004a3a:	681e      	ldr	r6, [r3, #0]
 8004a3c:	69b3      	ldr	r3, [r6, #24]
 8004a3e:	b913      	cbnz	r3, 8004a46 <__sfp+0x16>
 8004a40:	4630      	mov	r0, r6
 8004a42:	f7ff ffbd 	bl	80049c0 <__sinit>
 8004a46:	3648      	adds	r6, #72	; 0x48
 8004a48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	d503      	bpl.n	8004a58 <__sfp+0x28>
 8004a50:	6833      	ldr	r3, [r6, #0]
 8004a52:	b30b      	cbz	r3, 8004a98 <__sfp+0x68>
 8004a54:	6836      	ldr	r6, [r6, #0]
 8004a56:	e7f7      	b.n	8004a48 <__sfp+0x18>
 8004a58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004a5c:	b9d5      	cbnz	r5, 8004a94 <__sfp+0x64>
 8004a5e:	4b16      	ldr	r3, [pc, #88]	; (8004ab8 <__sfp+0x88>)
 8004a60:	60e3      	str	r3, [r4, #12]
 8004a62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004a66:	6665      	str	r5, [r4, #100]	; 0x64
 8004a68:	f000 f847 	bl	8004afa <__retarget_lock_init_recursive>
 8004a6c:	f7ff ff96 	bl	800499c <__sfp_lock_release>
 8004a70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004a74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004a78:	6025      	str	r5, [r4, #0]
 8004a7a:	61a5      	str	r5, [r4, #24]
 8004a7c:	2208      	movs	r2, #8
 8004a7e:	4629      	mov	r1, r5
 8004a80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004a84:	f7fd fd46 	bl	8002514 <memset>
 8004a88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004a8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004a90:	4620      	mov	r0, r4
 8004a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a94:	3468      	adds	r4, #104	; 0x68
 8004a96:	e7d9      	b.n	8004a4c <__sfp+0x1c>
 8004a98:	2104      	movs	r1, #4
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	f7ff ff62 	bl	8004964 <__sfmoreglue>
 8004aa0:	4604      	mov	r4, r0
 8004aa2:	6030      	str	r0, [r6, #0]
 8004aa4:	2800      	cmp	r0, #0
 8004aa6:	d1d5      	bne.n	8004a54 <__sfp+0x24>
 8004aa8:	f7ff ff78 	bl	800499c <__sfp_lock_release>
 8004aac:	230c      	movs	r3, #12
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	e7ee      	b.n	8004a90 <__sfp+0x60>
 8004ab2:	bf00      	nop
 8004ab4:	08004dd0 	.word	0x08004dd0
 8004ab8:	ffff0001 	.word	0xffff0001

08004abc <_fwalk_reent>:
 8004abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ac0:	4606      	mov	r6, r0
 8004ac2:	4688      	mov	r8, r1
 8004ac4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004ac8:	2700      	movs	r7, #0
 8004aca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ace:	f1b9 0901 	subs.w	r9, r9, #1
 8004ad2:	d505      	bpl.n	8004ae0 <_fwalk_reent+0x24>
 8004ad4:	6824      	ldr	r4, [r4, #0]
 8004ad6:	2c00      	cmp	r4, #0
 8004ad8:	d1f7      	bne.n	8004aca <_fwalk_reent+0xe>
 8004ada:	4638      	mov	r0, r7
 8004adc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ae0:	89ab      	ldrh	r3, [r5, #12]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d907      	bls.n	8004af6 <_fwalk_reent+0x3a>
 8004ae6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004aea:	3301      	adds	r3, #1
 8004aec:	d003      	beq.n	8004af6 <_fwalk_reent+0x3a>
 8004aee:	4629      	mov	r1, r5
 8004af0:	4630      	mov	r0, r6
 8004af2:	47c0      	blx	r8
 8004af4:	4307      	orrs	r7, r0
 8004af6:	3568      	adds	r5, #104	; 0x68
 8004af8:	e7e9      	b.n	8004ace <_fwalk_reent+0x12>

08004afa <__retarget_lock_init_recursive>:
 8004afa:	4770      	bx	lr

08004afc <__retarget_lock_acquire_recursive>:
 8004afc:	4770      	bx	lr

08004afe <__retarget_lock_release_recursive>:
 8004afe:	4770      	bx	lr

08004b00 <__swhatbuf_r>:
 8004b00:	b570      	push	{r4, r5, r6, lr}
 8004b02:	460e      	mov	r6, r1
 8004b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b08:	2900      	cmp	r1, #0
 8004b0a:	b096      	sub	sp, #88	; 0x58
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	461d      	mov	r5, r3
 8004b10:	da07      	bge.n	8004b22 <__swhatbuf_r+0x22>
 8004b12:	2300      	movs	r3, #0
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	89b3      	ldrh	r3, [r6, #12]
 8004b18:	061a      	lsls	r2, r3, #24
 8004b1a:	d410      	bmi.n	8004b3e <__swhatbuf_r+0x3e>
 8004b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b20:	e00e      	b.n	8004b40 <__swhatbuf_r+0x40>
 8004b22:	466a      	mov	r2, sp
 8004b24:	f000 f8fa 	bl	8004d1c <_fstat_r>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	dbf2      	blt.n	8004b12 <__swhatbuf_r+0x12>
 8004b2c:	9a01      	ldr	r2, [sp, #4]
 8004b2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004b32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004b36:	425a      	negs	r2, r3
 8004b38:	415a      	adcs	r2, r3
 8004b3a:	602a      	str	r2, [r5, #0]
 8004b3c:	e7ee      	b.n	8004b1c <__swhatbuf_r+0x1c>
 8004b3e:	2340      	movs	r3, #64	; 0x40
 8004b40:	2000      	movs	r0, #0
 8004b42:	6023      	str	r3, [r4, #0]
 8004b44:	b016      	add	sp, #88	; 0x58
 8004b46:	bd70      	pop	{r4, r5, r6, pc}

08004b48 <__smakebuf_r>:
 8004b48:	898b      	ldrh	r3, [r1, #12]
 8004b4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004b4c:	079d      	lsls	r5, r3, #30
 8004b4e:	4606      	mov	r6, r0
 8004b50:	460c      	mov	r4, r1
 8004b52:	d507      	bpl.n	8004b64 <__smakebuf_r+0x1c>
 8004b54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	6123      	str	r3, [r4, #16]
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	6163      	str	r3, [r4, #20]
 8004b60:	b002      	add	sp, #8
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	ab01      	add	r3, sp, #4
 8004b66:	466a      	mov	r2, sp
 8004b68:	f7ff ffca 	bl	8004b00 <__swhatbuf_r>
 8004b6c:	9900      	ldr	r1, [sp, #0]
 8004b6e:	4605      	mov	r5, r0
 8004b70:	4630      	mov	r0, r6
 8004b72:	f7ff fb23 	bl	80041bc <_malloc_r>
 8004b76:	b948      	cbnz	r0, 8004b8c <__smakebuf_r+0x44>
 8004b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b7c:	059a      	lsls	r2, r3, #22
 8004b7e:	d4ef      	bmi.n	8004b60 <__smakebuf_r+0x18>
 8004b80:	f023 0303 	bic.w	r3, r3, #3
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	81a3      	strh	r3, [r4, #12]
 8004b8a:	e7e3      	b.n	8004b54 <__smakebuf_r+0xc>
 8004b8c:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <__smakebuf_r+0x7c>)
 8004b8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	6020      	str	r0, [r4, #0]
 8004b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b98:	81a3      	strh	r3, [r4, #12]
 8004b9a:	9b00      	ldr	r3, [sp, #0]
 8004b9c:	6163      	str	r3, [r4, #20]
 8004b9e:	9b01      	ldr	r3, [sp, #4]
 8004ba0:	6120      	str	r0, [r4, #16]
 8004ba2:	b15b      	cbz	r3, 8004bbc <__smakebuf_r+0x74>
 8004ba4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ba8:	4630      	mov	r0, r6
 8004baa:	f000 f8c9 	bl	8004d40 <_isatty_r>
 8004bae:	b128      	cbz	r0, 8004bbc <__smakebuf_r+0x74>
 8004bb0:	89a3      	ldrh	r3, [r4, #12]
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	81a3      	strh	r3, [r4, #12]
 8004bbc:	89a0      	ldrh	r0, [r4, #12]
 8004bbe:	4305      	orrs	r5, r0
 8004bc0:	81a5      	strh	r5, [r4, #12]
 8004bc2:	e7cd      	b.n	8004b60 <__smakebuf_r+0x18>
 8004bc4:	08004959 	.word	0x08004959

08004bc8 <_raise_r>:
 8004bc8:	291f      	cmp	r1, #31
 8004bca:	b538      	push	{r3, r4, r5, lr}
 8004bcc:	4604      	mov	r4, r0
 8004bce:	460d      	mov	r5, r1
 8004bd0:	d904      	bls.n	8004bdc <_raise_r+0x14>
 8004bd2:	2316      	movs	r3, #22
 8004bd4:	6003      	str	r3, [r0, #0]
 8004bd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bda:	bd38      	pop	{r3, r4, r5, pc}
 8004bdc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004bde:	b112      	cbz	r2, 8004be6 <_raise_r+0x1e>
 8004be0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004be4:	b94b      	cbnz	r3, 8004bfa <_raise_r+0x32>
 8004be6:	4620      	mov	r0, r4
 8004be8:	f000 f830 	bl	8004c4c <_getpid_r>
 8004bec:	462a      	mov	r2, r5
 8004bee:	4601      	mov	r1, r0
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bf6:	f000 b817 	b.w	8004c28 <_kill_r>
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d00a      	beq.n	8004c14 <_raise_r+0x4c>
 8004bfe:	1c59      	adds	r1, r3, #1
 8004c00:	d103      	bne.n	8004c0a <_raise_r+0x42>
 8004c02:	2316      	movs	r3, #22
 8004c04:	6003      	str	r3, [r0, #0]
 8004c06:	2001      	movs	r0, #1
 8004c08:	e7e7      	b.n	8004bda <_raise_r+0x12>
 8004c0a:	2400      	movs	r4, #0
 8004c0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004c10:	4628      	mov	r0, r5
 8004c12:	4798      	blx	r3
 8004c14:	2000      	movs	r0, #0
 8004c16:	e7e0      	b.n	8004bda <_raise_r+0x12>

08004c18 <raise>:
 8004c18:	4b02      	ldr	r3, [pc, #8]	; (8004c24 <raise+0xc>)
 8004c1a:	4601      	mov	r1, r0
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	f7ff bfd3 	b.w	8004bc8 <_raise_r>
 8004c22:	bf00      	nop
 8004c24:	20000010 	.word	0x20000010

08004c28 <_kill_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	4d07      	ldr	r5, [pc, #28]	; (8004c48 <_kill_r+0x20>)
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	4604      	mov	r4, r0
 8004c30:	4608      	mov	r0, r1
 8004c32:	4611      	mov	r1, r2
 8004c34:	602b      	str	r3, [r5, #0]
 8004c36:	f7fb fd5f 	bl	80006f8 <_kill>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	d102      	bne.n	8004c44 <_kill_r+0x1c>
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	b103      	cbz	r3, 8004c44 <_kill_r+0x1c>
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	20000258 	.word	0x20000258

08004c4c <_getpid_r>:
 8004c4c:	f7fb bd52 	b.w	80006f4 <_getpid>

08004c50 <__sread>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	460c      	mov	r4, r1
 8004c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c58:	f000 f894 	bl	8004d84 <_read_r>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	bfab      	itete	ge
 8004c60:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c62:	89a3      	ldrhlt	r3, [r4, #12]
 8004c64:	181b      	addge	r3, r3, r0
 8004c66:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c6a:	bfac      	ite	ge
 8004c6c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c6e:	81a3      	strhlt	r3, [r4, #12]
 8004c70:	bd10      	pop	{r4, pc}

08004c72 <__swrite>:
 8004c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c76:	461f      	mov	r7, r3
 8004c78:	898b      	ldrh	r3, [r1, #12]
 8004c7a:	05db      	lsls	r3, r3, #23
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	460c      	mov	r4, r1
 8004c80:	4616      	mov	r6, r2
 8004c82:	d505      	bpl.n	8004c90 <__swrite+0x1e>
 8004c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c88:	2302      	movs	r3, #2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f000 f868 	bl	8004d60 <_lseek_r>
 8004c90:	89a3      	ldrh	r3, [r4, #12]
 8004c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c9a:	81a3      	strh	r3, [r4, #12]
 8004c9c:	4632      	mov	r2, r6
 8004c9e:	463b      	mov	r3, r7
 8004ca0:	4628      	mov	r0, r5
 8004ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca6:	f000 b817 	b.w	8004cd8 <_write_r>

08004caa <__sseek>:
 8004caa:	b510      	push	{r4, lr}
 8004cac:	460c      	mov	r4, r1
 8004cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cb2:	f000 f855 	bl	8004d60 <_lseek_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	89a3      	ldrh	r3, [r4, #12]
 8004cba:	bf15      	itete	ne
 8004cbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004cbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004cc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004cc6:	81a3      	strheq	r3, [r4, #12]
 8004cc8:	bf18      	it	ne
 8004cca:	81a3      	strhne	r3, [r4, #12]
 8004ccc:	bd10      	pop	{r4, pc}

08004cce <__sclose>:
 8004cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cd2:	f000 b813 	b.w	8004cfc <_close_r>
	...

08004cd8 <_write_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4d07      	ldr	r5, [pc, #28]	; (8004cf8 <_write_r+0x20>)
 8004cdc:	4604      	mov	r4, r0
 8004cde:	4608      	mov	r0, r1
 8004ce0:	4611      	mov	r1, r2
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	602a      	str	r2, [r5, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	f7fb fd24 	bl	8000734 <_write>
 8004cec:	1c43      	adds	r3, r0, #1
 8004cee:	d102      	bne.n	8004cf6 <_write_r+0x1e>
 8004cf0:	682b      	ldr	r3, [r5, #0]
 8004cf2:	b103      	cbz	r3, 8004cf6 <_write_r+0x1e>
 8004cf4:	6023      	str	r3, [r4, #0]
 8004cf6:	bd38      	pop	{r3, r4, r5, pc}
 8004cf8:	20000258 	.word	0x20000258

08004cfc <_close_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4d06      	ldr	r5, [pc, #24]	; (8004d18 <_close_r+0x1c>)
 8004d00:	2300      	movs	r3, #0
 8004d02:	4604      	mov	r4, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	602b      	str	r3, [r5, #0]
 8004d08:	f7fb fd22 	bl	8000750 <_close>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_close_r+0x1a>
 8004d10:	682b      	ldr	r3, [r5, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_close_r+0x1a>
 8004d14:	6023      	str	r3, [r4, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000258 	.word	0x20000258

08004d1c <_fstat_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4d07      	ldr	r5, [pc, #28]	; (8004d3c <_fstat_r+0x20>)
 8004d20:	2300      	movs	r3, #0
 8004d22:	4604      	mov	r4, r0
 8004d24:	4608      	mov	r0, r1
 8004d26:	4611      	mov	r1, r2
 8004d28:	602b      	str	r3, [r5, #0]
 8004d2a:	f7fb fd14 	bl	8000756 <_fstat>
 8004d2e:	1c43      	adds	r3, r0, #1
 8004d30:	d102      	bne.n	8004d38 <_fstat_r+0x1c>
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	b103      	cbz	r3, 8004d38 <_fstat_r+0x1c>
 8004d36:	6023      	str	r3, [r4, #0]
 8004d38:	bd38      	pop	{r3, r4, r5, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000258 	.word	0x20000258

08004d40 <_isatty_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4d06      	ldr	r5, [pc, #24]	; (8004d5c <_isatty_r+0x1c>)
 8004d44:	2300      	movs	r3, #0
 8004d46:	4604      	mov	r4, r0
 8004d48:	4608      	mov	r0, r1
 8004d4a:	602b      	str	r3, [r5, #0]
 8004d4c:	f7fb fd08 	bl	8000760 <_isatty>
 8004d50:	1c43      	adds	r3, r0, #1
 8004d52:	d102      	bne.n	8004d5a <_isatty_r+0x1a>
 8004d54:	682b      	ldr	r3, [r5, #0]
 8004d56:	b103      	cbz	r3, 8004d5a <_isatty_r+0x1a>
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	bd38      	pop	{r3, r4, r5, pc}
 8004d5c:	20000258 	.word	0x20000258

08004d60 <_lseek_r>:
 8004d60:	b538      	push	{r3, r4, r5, lr}
 8004d62:	4d07      	ldr	r5, [pc, #28]	; (8004d80 <_lseek_r+0x20>)
 8004d64:	4604      	mov	r4, r0
 8004d66:	4608      	mov	r0, r1
 8004d68:	4611      	mov	r1, r2
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	602a      	str	r2, [r5, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	f7fb fcf8 	bl	8000764 <_lseek>
 8004d74:	1c43      	adds	r3, r0, #1
 8004d76:	d102      	bne.n	8004d7e <_lseek_r+0x1e>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	b103      	cbz	r3, 8004d7e <_lseek_r+0x1e>
 8004d7c:	6023      	str	r3, [r4, #0]
 8004d7e:	bd38      	pop	{r3, r4, r5, pc}
 8004d80:	20000258 	.word	0x20000258

08004d84 <_read_r>:
 8004d84:	b538      	push	{r3, r4, r5, lr}
 8004d86:	4d07      	ldr	r5, [pc, #28]	; (8004da4 <_read_r+0x20>)
 8004d88:	4604      	mov	r4, r0
 8004d8a:	4608      	mov	r0, r1
 8004d8c:	4611      	mov	r1, r2
 8004d8e:	2200      	movs	r2, #0
 8004d90:	602a      	str	r2, [r5, #0]
 8004d92:	461a      	mov	r2, r3
 8004d94:	f7fb fcbe 	bl	8000714 <_read>
 8004d98:	1c43      	adds	r3, r0, #1
 8004d9a:	d102      	bne.n	8004da2 <_read_r+0x1e>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	b103      	cbz	r3, 8004da2 <_read_r+0x1e>
 8004da0:	6023      	str	r3, [r4, #0]
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
 8004da4:	20000258 	.word	0x20000258

08004da8 <_init>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr

08004db4 <_fini>:
 8004db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004db6:	bf00      	nop
 8004db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dba:	bc08      	pop	{r3}
 8004dbc:	469e      	mov	lr, r3
 8004dbe:	4770      	bx	lr
